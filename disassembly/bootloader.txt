 8000000: STM32 Vector Table

 8000000:   20000400    Vector 0x00: Initial Stack Pointer
 8000004:   08002b65    Vector 0x01: Reset_Handler
 8000008:   08002b7d    Vector 0x02: NMI_Handler (immediate return)
 800000c:   08002b7f    Vector 0x03: HardFault_Handler (infinite loop)
 8000010:   08002b81    Vector 0x04: MemManage_Handler (infinite loop)
 8000014:   08002b83    Vector 0x05: BusFault_Handler (infinite loop)
 8000018:   08002b85    Vector 0x06: UsageFault_Handler (infinite loop)
 800001c:   00000000    Vector 0x07: Unused
 8000020:   00000000    Vector 0x08: Unused
 8000024:   00000000    Vector 0x09: Unused
 8000028:   00000000    Vector 0x0A: Unused
 800002c:   08002b87    Vector 0x0B: SVC_Handler (immediate return)
 8000030:   08002b89    Vector 0x0C: DebugMon_Handler (immediate return)
 8000034:   00000000    Vector 0x0D: Unused
 8000038:   08002b8b    Vector 0x0E: PendSV_Handler (immediate return)
 800003c:   08002b8d    Vector 0x0F: SysTick_Handler (immediate return)

All of the peripheral interrupts lead to an infinite loop, except for
USB_LP_CAN1_RX0.

 8000040:   08002c37    Vector 0x10: WWDG_IRQHandler
 8000044:   08002c3b    Vector 0x11: PVD_IRQHandler
 8000048:   08002c3f    Vector 0x12: TAMPER_IRQHandler
 800004c:   08002c43    Vector 0x13: RTC_IRQHandler
 8000050:   08002c47    Vector 0x14: FLASH_IRQHandler
 8000054:   08002c4b    Vector 0x15: RCC_IRQHandler
 8000058:   08002c4f    Vector 0x16: EXTI0_IRQHandler
 800005c:   08002c53    Vector 0x17: EXTI1_IRQHandler
 8000060:   08002c57    Vector 0x18: EXTI2_IRQHandler
 8000064:   08002c5b    Vector 0x19: EXTI3_IRQHandler
 8000068:   08002c5f    Vector 0x1A: EXTI4_IRQHandler
 800006c:   08002c63    Vector 0x1B: DMA1_Channel1_IRQHandler
 8000070:   08002c67    Vector 0x1C: DMA1_Channel2_IRQHandler
 8000074:   08002c6b    Vector 0x1D: DMA1_Channel3_IRQHandler
 8000078:   08002c6f    Vector 0x1E: DMA1_Channel4_IRQHandler
 800007c:   08002c73    Vector 0x1F: DMA1_Channel5_IRQHandler
 8000080:   08002c77    Vector 0x20: DMA1_Channel6_IRQHandler
 8000084:   08002c7b    Vector 0x21: DMA1_Channel7_IRQHandler
 8000088:   08002c7f    Vector 0x22: ADC1_2_IRQHandler
 800008c:   08002c83    Vector 0x23: USB_HP_CAN1_TX_IRQHandler
 8000090:   08002b8f    Vector 0x24: USB_LP_CAN1_RX0_IRQHandler (handled)
 8000094:   08002c8b    Vector 0x25: CAN1_RX1_IRQHandler
 8000098:   08002c8f    Vector 0x26: CAN1_SCE_IRQHandler
 800009c:   08002c93    Vector 0x27: EXTI9_5_IRQHandler
 80000a0:   08002c97    Vector 0x28: TIM1_BRK_IRQHandler
 80000a4:   08002c9b    Vector 0x29: TIM1_UP_IRQHandler
 80000a8:   08002c9f    Vector 0x2A: TIM1_TRG_COM_IRQHandler
 80000ac:   08002ca3    Vector 0x2B: TIM1_CC_IRQHandler
 80000b0:   08002ca7    Vector 0x2C: TIM2_IRQHandler
 80000b4:   08002cab    Vector 0x2D: TIM3_IRQHandler
 80000b8:   08002caf    Vector 0x2E: TIM4_IRQHandler
 80000bc:   08002cb3    Vector 0x2F: I2C1_EV_IRQHandler
 80000c0:   08002cb7    Vector 0x30: I2C1_ER_IRQHandler
 80000c4:   08002cbb    Vector 0x31: I2C2_EV_IRQHandler
 80000c8:   08002cbf    Vector 0x32: I2C2_ER_IRQHandler
 80000cc:   08002cc3    Vector 0x33: SPI1_IRQHandler
 80000d0:   08002cc7    Vector 0x34: SPI2_IRQHandler
 80000d4:   08002ccb    Vector 0x35: USART1_IRQHandler
 80000d8:   08002ccf    Vector 0x36: USART2_IRQHandler
 80000dc:   08002cd3    Vector 0x37: USART3_IRQHandler
 80000e0:   08002cd7    Vector 0x38: EXTI15_10_IRQHandler
 80000e4:   08002cdb    Vector 0x39: RTCAlarm_IRQHandler
 80000e8:   08002cdf    Vector 0x3A: USBWakeUp_IRQHandler
 80000ec:   08002ce3    Vector 0x3B: TIM8_BRK_IRQHandler
 80000f0:   08002ce7    Vector 0x3C: TIM8_UP_IRQHandler
 80000f4:   08002ceb    Vector 0x3D: TIM8_TRG_COM_IRQHandler
 80000f8:   08002cef    Vector 0x3E: TIM8_CC_IRQHandler
 80000fc:   08002cf3    Vector 0x3F: ADC3_IRQHandler
 8000100:   08002cf7    Vector 0x40: FSMC_IRQHandler
 8000104:   08002cfb    Vector 0x41: SDIO_IRQHandler
 8000108:   08002cff    Vector 0x42: TIM5_IRQHandler
 800010c:   08002d03    Vector 0x43: SPI3_IRQHandler
 8000110:   08002d07    Vector 0x44: UART4_IRQHandler
 8000114:   08002d0b    Vector 0x45: UART5_IRQHandler
 8000118:   08002d0f    Vector 0x46: TIM6_IRQHandler
 800011c:   08002d13    Vector 0x47: TIM7_IRQHandler
 8000120:   08002d17    Vector 0x48: DMA2_Channel1_IRQHandler
 8000124:   08002d1b    Vector 0x49: DMA2_Channel2_IRQHandler
 8000128:   08002d1f    Vector 0x4A: DMA2_Channel3_IRQHandler
 800012c:   08002d23    Vector 0x4B: DMA2_Channel4_5_IRQHandler

 8000130:   b510        push  {r4, lr}
 8000132:   f8df 4700   ldr.w r4, =0x20000824    ; { RAM (bss) } | [pc, #1792]   ; 8000834 <FlashStart+0x834>
 8000136:   2800        cmp   r0, #0
 8000138:   d100        bne.n 800013c <FlashStart+0x13c>
 800013a:   e02b        b.n   8000194 <FlashStart+0x194>
 800013c:   f000 f89a   bl 8000274 <FlashStart+0x274>
 8000140:   6800        ldr   r0, [r0, #0]
 8000142:   4780        blx   r0
 8000144:   6820        ldr   r0, [r4, #0]
 8000146:   300a        adds  r0, #10
 8000148:   bd10        pop   {r4, pc}

FUNCTION:   TODO_800014a
 800014a:   b580        push  {r7, lr}
 800014c:   f000 f940   bl 80003d0 <FlashStart+0x3d0>
 8000150:   78c1        ldrb  r1, [r0, #3]
 8000152:   f8df 279c   ldr.w r2, =0x20000aec    ; { RAM (data) } | [pc, #1948]   ; 80008f0 <FlashStart+0x8f0>
 8000156:   7852        ldrb  r2, [r2, #1]
 8000158:   428a        cmp   r2, r1
 800015a:   d30c        bcc.n 8000176 <FlashStart+0x176>
 800015c:   7882        ldrb  r2, [r0, #2]
 800015e:   2a00        cmp   r2, #0
 8000160:   d109        bne.n 8000176 <FlashStart+0x176>
 8000162:   8882        ldrh  r2, [r0, #4]
 8000164:   2a00        cmp   r2, #0
 8000166:   d106        bne.n 8000176 <FlashStart+0x176>
 8000168:   7281        strb  r1, [r0, #10]
 800016a:   f000 f883   bl 8000274 <FlashStart+0x274>
 800016e:   6840        ldr   r0, [r0, #4]
 8000170:   4780        blx   r0
 8000172:   2000        movs  r0, #0
 8000174:   bd02        pop   {r1, pc}
 8000176:   2002        movs  r0, #2
 8000178:   bd02        pop   {r1, pc}
 800017a:   b510        push  {r4, lr}
 800017c:   f8df 46b4   ldr.w r4, =0x20000824    ; { RAM (bss) } | [pc, #1716]   ; 8000834 <FlashStart+0x834>
 8000180:   2800        cmp   r0, #0
 8000182:   d100        bne.n 8000186 <FlashStart+0x186>
 8000184:   e006        b.n   8000194 <FlashStart+0x194>
 8000186:   f000 f875   bl 8000274 <FlashStart+0x274>
 800018a:   6880        ldr   r0, [r0, #8]
 800018c:   4780        blx   r0
 800018e:   6820        ldr   r0, [r4, #0]
 8000190:   300c        adds  r0, #12
 8000192:   bd10        pop   {r4, pc}
 8000194:   6820        ldr   r0, [r4, #0]
 8000196:   2101        movs  r1, #1
 8000198:   8201        strh  r1, [r0, #16]
 800019a:   2000        movs  r0, #0
 800019c:   bd10        pop   {r4, pc}

FUNCTION:   TODO_800019e
 800019e:   b510        push  {r4, lr}
 80001a0:   f000 fb45   bl 800082e <FlashStart+0x82e>
 80001a4:   78c1        ldrb  r1, [r0, #3]
 80001a6:   7940        ldrb  r0, [r0, #5]
 80001a8:   f8df 26f0   ldr.w r2, =0x20000828    ; { RAM (bss) } | [pc, #1776]   ; 800089c <FlashStart+0x89c>
 80001ac:   6812        ldr   r2, [r2, #0]
 80001ae:   6992        ldr   r2, [r2, #24]
 80001b0:   4790        blx   r2
 80001b2:   6821        ldr   r1, [r4, #0]
 80001b4:   7a8a        ldrb  r2, [r1, #10]
 80001b6:   2a00        cmp   r2, #0
 80001b8:   d007        beq.n 80001ca <FlashStart+0x1ca>
 80001ba:   2800        cmp   r0, #0
 80001bc:   d105        bne.n 80001ca <FlashStart+0x1ca>
 80001be:   7908        ldrb  r0, [r1, #4]
 80001c0:   2800        cmp   r0, #0
 80001c2:   d102        bne.n 80001ca <FlashStart+0x1ca>
 80001c4:   7888        ldrb  r0, [r1, #2]
 80001c6:   2800        cmp   r0, #0
 80001c8:   d001        beq.n 80001ce <FlashStart+0x1ce>
 80001ca:   2002        movs  r0, #2
 80001cc:   bd10        pop   {r4, pc}
 80001ce:   f000 f851   bl 8000274 <FlashStart+0x274>
 80001d2:   68c0        ldr   r0, [r0, #12]
 80001d4:   4780        blx   r0
 80001d6:   6820        ldr   r0, [r4, #0]
 80001d8:   7941        ldrb  r1, [r0, #5]
 80001da:   72c1        strb  r1, [r0, #11]
 80001dc:   6820        ldr   r0, [r4, #0]
 80001de:   78c1        ldrb  r1, [r0, #3]
 80001e0:   7301        strb  r1, [r0, #12]
 80001e2:   2000        movs  r0, #0
 80001e4:   bd10        pop   {r4, pc}
 80001e6:   0000        movs  r0, r0
 80001e8:   b510        push  {r4, lr}
 80001ea:   f8df 1648   ldr.w r1, =0x20000824    ; { RAM (bss) } | [pc, #1608]   ; 8000834 <FlashStart+0x834>
 80001ee:   6809        ldr   r1, [r1, #0]
 80001f0:   2800        cmp   r0, #0
 80001f2:   d102        bne.n 80001fa <FlashStart+0x1fa>
 80001f4:   2002        movs  r0, #2
 80001f6:   8208        strh  r0, [r1, #16]
 80001f8:   e037        b.n   800026a <FlashStart+0x26a>
 80001fa:   4c1d        ldr   r4, =0x20000870    ; { RAM (bss) } | [pc, #116] ; (8000270 <FlashStart+0x270>)
 80001fc:   2000        movs  r0, #0
 80001fe:   8020        strh  r0, [r4, #0]
 8000200:   7808        ldrb  r0, [r1, #0]
 8000202:   2200        movs  r2, #0
 8000204:   237f        movs  r3, #127 ; 0x7f
 8000206:   4218        tst   r0, r3
 8000208:   d114        bne.n 8000234 <FlashStart+0x234>
 800020a:   7a48        ldrb  r0, [r1, #9]
 800020c:   0681        lsls  r1, r0, #26
 800020e:   bf4c        ite   mi
 8000210:   f042 0102   orrmi.w  r1, r2, #2
 8000214:   2100        movpl r1, #0
 8000216:   7021        strb  r1, [r4, #0]
 8000218:   0640        lsls  r0, r0, #25
 800021a:   7820        ldrb  r0, [r4, #0]
 800021c:   bf54        ite   pl
 800021e:   f000 00fe   andpl.w  r0, r0, #254   ; 0xfe
 8000222:   f040 0001   orrmi.w  r0, r0, #1
 8000226:   7020        strb  r0, [r4, #0]
 8000228:   f000 f824   bl 8000274 <FlashStart+0x274>
 800022c:   6900        ldr   r0, [r0, #16]
 800022e:   4780        blx   r0
 8000230:   4620        mov   r0, r4
 8000232:   bd10        pop   {r4, pc}
 8000234:   f000 037f   and.w r3, r0, #127   ; 0x7f
 8000238:   2b01        cmp   r3, #1
 800023a:   d0f9        beq.n 8000230 <FlashStart+0x230>
 800023c:   f000 007f   and.w r0, r0, #127   ; 0x7f
 8000240:   2802        cmp   r0, #2
 8000242:   d112        bne.n 800026a <FlashStart+0x26a>
 8000244:   7948        ldrb  r0, [r1, #5]
 8000246:   f000 010f   and.w r1, r0, #15
 800024a:   f042 0201   orr.w r2, r2, #1
 800024e:   f000 fa8e   bl 800076e <FlashStart+0x76e>
 8000252:   d505        bpl.n 8000260 <FlashStart+0x260>
 8000254:   f000 0030   and.w r0, r0, #48 ; 0x30
 8000258:   2810        cmp   r0, #16
 800025a:   d1e5        bne.n 8000228 <FlashStart+0x228>
 800025c:   7022        strb  r2, [r4, #0]
 800025e:   e7e3        b.n   8000228 <FlashStart+0x228>
 8000260:   f400 5040   and.w r0, r0, #12288 ; 0x3000
 8000264:   f5b0 5f80   cmp.w r0, #4096   ; 0x1000
 8000268:   e7f7        b.n   800025a <FlashStart+0x25a>
 800026a:   2000        movs  r0, #0
 800026c:   bd10        pop   {r4, pc}
 800026e:   bf00        nop

.pool
 8000270:   20000870    RAM (bss)


FUNCTION:   TODO_8000274
 8000274:   4801        ldr   r0, =0x2000082c    ; { RAM (bss) } | [pc, #4]   ; (800027c <FlashStart+0x27c>)
 8000276:   6800        ldr   r0, [r0, #0]
 8000278:   4770        bx lr
 800027a:   bf00        nop

.pool
 800027c:   2000082c    RAM (bss)


FUNCTION:   TODO_8000280
 8000280:   b5f8        push  {r3, r4, r5, r6, r7, lr}
 8000282:   f000 f8a5   bl 80003d0 <FlashStart+0x3d0>
 8000286:   7801        ldrb  r1, [r0, #0]
 8000288:   f011 017f   ands.w   r1, r1, #127   ; 0x7f
 800028c:   d104        bne.n 8000298 <FlashStart+0x298>
 800028e:   7a41        ldrb  r1, [r0, #9]
 8000290:   f001 01df   and.w r1, r1, #223   ; 0xdf
 8000294:   7241        strb  r1, [r0, #9]
 8000296:   e052        b.n   800033e <FlashStart+0x33e>
 8000298:   2902        cmp   r1, #2
 800029a:   d105        bne.n 80002a8 <FlashStart+0x2a8>
 800029c:   8841        ldrh  r1, [r0, #2]
 800029e:   2900        cmp   r1, #0
 80002a0:   d102        bne.n 80002a8 <FlashStart+0x2a8>
 80002a2:   7901        ldrb  r1, [r0, #4]
 80002a4:   2900        cmp   r1, #0
 80002a6:   d001        beq.n 80002ac <FlashStart+0x2ac>
 80002a8:   2002        movs  r0, #2
 80002aa:   bdf2        pop   {r1, r4, r5, r6, r7, pc}
 80002ac:   7941        ldrb  r1, [r0, #5]
 80002ae:   f021 0480   bic.w r4, r1, #128   ; 0x80
 80002b2:   f8df 5640   ldr.w r5, =0x40005c00    ; { USB device FS registers } | [pc, #1600]   ; 80008f4 <FlashStart+0x8f4>
 80002b6:   060a        lsls  r2, r1, #24
 80002b8:   f855 2024   ldr.w r2, [r5, r4, lsl #2]
 80002bc:   bf4c        ite   mi
 80002be:   f002 0230   andmi.w  r2, r2, #48 ; 0x30
 80002c2:   f402 5240   andpl.w  r2, r2, #12288 ; 0x3000
 80002c6:   f8df 3628   ldr.w r3, =0x20000aec    ; { RAM (data) } | [pc, #1576]   ; 80008f0 <FlashStart+0x8f0>
 80002ca:   781b        ldrb  r3, [r3, #0]
 80002cc:   429c        cmp   r4, r3
 80002ce:   d2eb        bcs.n 80002a8 <FlashStart+0x2a8>
 80002d0:   2a00        cmp   r2, #0
 80002d2:   d0e9        beq.n 80002a8 <FlashStart+0x2a8>
 80002d4:   7a80        ldrb  r0, [r0, #10]
 80002d6:   2800        cmp   r0, #0
 80002d8:   d0e6        beq.n 80002a8 <FlashStart+0x2a8>
 80002da:   0608        lsls  r0, r1, #24
 80002dc:   f855 0024   ldr.w r0, [r5, r4, lsl #2]
 80002e0:   d50b        bpl.n 80002fa <FlashStart+0x2fa>
 80002e2:   f000 0030   and.w r0, r0, #48 ; 0x30
 80002e6:   2810        cmp   r0, #16
 80002e8:   d125        bne.n 8000336 <FlashStart+0x336>
 80002ea:   4620        mov   r0, r4
 80002ec:   f001 fd27   bl 8001d3e <FlashStart+0x1d3e>
 80002f0:   2130        movs  r1, #48  ; 0x30
 80002f2:   4620        mov   r0, r4
 80002f4:   f001 fcdc   bl 8001cb0 <FlashStart+0x1cb0>
 80002f8:   e01d        b.n   8000336 <FlashStart+0x336>
 80002fa:   f400 5040   and.w r0, r0, #12288 ; 0x3000
 80002fe:   f5b0 5f80   cmp.w r0, #4096   ; 0x1000
 8000302:   d118        bne.n 8000336 <FlashStart+0x336>
 8000304:   f248 0680   movw  r6, #32896  ; 0x8080
 8000308:   f64b 778f   movw  r7, #49039  ; 0xbf8f
 800030c:   b944        cbnz  r4, 8000320 <FlashStart+0x320>
 800030e:   f000 facb   bl 80008a8 <FlashStart+0x8a8>
 8000312:   6828        ldr   r0, [r5, #0]
 8000314:   4038        ands  r0, r7
 8000316:   f480 5040   eor.w r0, r0, #12288 ; 0x3000
 800031a:   4330        orrs  r0, r6
 800031c:   6028        str   r0, [r5, #0]
 800031e:   e00a        b.n   8000336 <FlashStart+0x336>
 8000320:   4620        mov   r0, r4
 8000322:   f001 fcfc   bl 8001d1e <FlashStart+0x1d1e>
 8000326:   f855 0024   ldr.w r0, [r5, r4, lsl #2]
 800032a:   4038        ands  r0, r7
 800032c:   f480 5040   eor.w r0, r0, #12288 ; 0x3000
 8000330:   4330        orrs  r0, r6
 8000332:   f845 0024   str.w r0, [r5, r4, lsl #2]
 8000336:   f7ff ff9d   bl 8000274 <FlashStart+0x274>
 800033a:   6940        ldr   r0, [r0, #20]
 800033c:   4780        blx   r0
 800033e:   2000        movs  r0, #0
 8000340:   bdf2        pop   {r1, r4, r5, r6, r7, pc}

FUNCTION:   TODO_8000342
 8000342:   b538        push  {r3, r4, r5, lr}
 8000344:   f8df 04ec   ldr.w r0, =0x20000824    ; { RAM (bss) } | [pc, #1260]   ; 8000834 <FlashStart+0x834>
 8000348:   6802        ldr   r2, [r0, #0]
 800034a:   7953        ldrb  r3, [r2, #5]
 800034c:   f023 0080   bic.w r0, r3, #128   ; 0x80
 8000350:   f8df 15a0   ldr.w r1, =0x40005c00    ; { USB device FS registers } | [pc, #1440]   ; 80008f4 <FlashStart+0x8f4>
 8000354:   061c        lsls  r4, r3, #24
 8000356:   f851 4020   ldr.w r4, [r1, r0, lsl #2]
 800035a:   bf4c        ite   mi
 800035c:   f004 0430   andmi.w  r4, r4, #48 ; 0x30
 8000360:   f404 5440   andpl.w  r4, r4, #12288 ; 0x3000
 8000364:   f8df 5588   ldr.w r5, =0x20000aec    ; { RAM (data) } | [pc, #1416]   ; 80008f0 <FlashStart+0x8f0>
 8000368:   782d        ldrb  r5, [r5, #0]
 800036a:   42a8        cmp   r0, r5
 800036c:   d207        bcs.n 800037e <FlashStart+0x37e>
 800036e:   8855        ldrh  r5, [r2, #2]
 8000370:   2d00        cmp   r5, #0
 8000372:   d104        bne.n 800037e <FlashStart+0x37e>
 8000374:   2c00        cmp   r4, #0
 8000376:   d002        beq.n 800037e <FlashStart+0x37e>
 8000378:   7a92        ldrb  r2, [r2, #10]
 800037a:   2a00        cmp   r2, #0
 800037c:   d101        bne.n 8000382 <FlashStart+0x382>
 800037e:   2002        movs  r0, #2
 8000380:   bd32        pop   {r1, r4, r5, pc}
 8000382:   f248 0280   movw  r2, #32896  ; 0x8080
 8000386:   061b        lsls  r3, r3, #24
 8000388:   f851 3020   ldr.w r3, [r1, r0, lsl #2]
 800038c:   d505        bpl.n 800039a <FlashStart+0x39a>
 800038e:   f648 74bf   movw  r4, #36799  ; 0x8fbf
 8000392:   4023        ands  r3, r4
 8000394:   f083 0310   eor.w r3, r3, #16
 8000398:   e004        b.n   80003a4 <FlashStart+0x3a4>
 800039a:   f64b 748f   movw  r4, #49039  ; 0xbf8f
 800039e:   4023        ands  r3, r4
 80003a0:   f483 5380   eor.w r3, r3, #4096  ; 0x1000
 80003a4:   431a        orrs  r2, r3
 80003a6:   f841 2020   str.w r2, [r1, r0, lsl #2]
 80003aa:   f7ff ff63   bl 8000274 <FlashStart+0x274>
 80003ae:   6980        ldr   r0, [r0, #24]
 80003b0:   4780        blx   r0
 80003b2:   2000        movs  r0, #0
 80003b4:   bd32        pop   {r1, r4, r5, pc}

FUNCTION:   TODO_80003b6
 80003b6:   b580        push  {r7, lr}
 80003b8:   f000 f80a   bl 80003d0 <FlashStart+0x3d0>
 80003bc:   7a41        ldrb  r1, [r0, #9]
 80003be:   f041 0120   orr.w r1, r1, #32
 80003c2:   7241        strb  r1, [r0, #9]
 80003c4:   f7ff ff56   bl 8000274 <FlashStart+0x274>
 80003c8:   69c0        ldr   r0, [r0, #28]
 80003ca:   4780        blx   r0
 80003cc:   2000        movs  r0, #0
 80003ce:   bd02        pop   {r1, pc}

FUNCTION:   TODO_80003d0
 80003d0:   f8df 0460   ldr.w r0, =0x20000824    ; { RAM (bss) } | [pc, #1120]   ; 8000834 <FlashStart+0x834>
 80003d4:   6800        ldr   r0, [r0, #0]
 80003d6:   4770        bx lr
 80003d8:   f8df 2458   ldr.w r2, =0x20000824    ; { RAM (bss) } | [pc, #1112]   ; 8000834 <FlashStart+0x834>
 80003dc:   6812        ldr   r2, [r2, #0]
 80003de:   8a53        ldrh  r3, [r2, #18]
 80003e0:   b920        cbnz  r0, 80003ec <FlashStart+0x3ec>
 80003e2:   8888        ldrh  r0, [r1, #4]
 80003e4:   1ac0        subs  r0, r0, r3
 80003e6:   8210        strh  r0, [r2, #16]
 80003e8:   2000        movs  r0, #0
 80003ea:   4770        bx lr
 80003ec:   6808        ldr   r0, [r1, #0]
 80003ee:   1818        adds  r0, r3, r0
 80003f0:   4770        bx lr

FUNCTION:   TODO_80003f2
 80003f2:   b5f8        push  {r3, r4, r5, r6, r7, lr}
 80003f4:   f8df 543c   ldr.w r5, =0x20000824    ; { RAM (bss) } | [pc, #1084]   ; 8000834 <FlashStart+0x834>
 80003f8:   6828        ldr   r0, [r5, #0]
 80003fa:   f100 0610   add.w r6, r0, #16
 80003fe:   8834        ldrh  r4, [r6, #0]
 8000400:   68b1        ldr   r1, [r6, #8]
 8000402:   0008        movs  r0, r1
 8000404:   d015        beq.n 8000432 <FlashStart+0x432>
 8000406:   b1a4        cbz   r4, 8000432 <FlashStart+0x432>
 8000408:   88b0        ldrh  r0, [r6, #4]
 800040a:   4284        cmp   r4, r0
 800040c:   d900        bls.n 8000410 <FlashStart+0x410>
 800040e:   4604        mov   r4, r0
 8000410:   4620        mov   r0, r4
 8000412:   4788        blx   r1
 8000414:   4607        mov   r7, r0
 8000416:   8830        ldrh  r0, [r6, #0]
 8000418:   1b00        subs  r0, r0, r4
 800041a:   8030        strh  r0, [r6, #0]
 800041c:   8870        ldrh  r0, [r6, #2]
 800041e:   1820        adds  r0, r4, r0
 8000420:   8070        strh  r0, [r6, #2]
 8000422:   2000        movs  r0, #0
 8000424:   f001 fc9c   bl 8001d60 <FlashStart+0x1d60>
 8000428:   4622        mov   r2, r4
 800042a:   4601        mov   r1, r0
 800042c:   4638        mov   r0, r7
 800042e:   f002 faee   bl 8002a0e <FlashStart+0x2a0e>
 8000432:   f8df 4470   ldr.w r4, =0x20000882    ; { RAM (bss) } | [pc, #1136]   ; 80008a4 <FlashStart+0x8a4>
 8000436:   8830        ldrh  r0, [r6, #0]
 8000438:   b138        cbz   r0, 800044a <FlashStart+0x44a>
 800043a:   f000 f993   bl 8000764 <FlashStart+0x764>
 800043e:   2100        movs  r1, #0
 8000440:   2000        movs  r0, #0
 8000442:   f001 fc94   bl 8001d6e <FlashStart+0x1d6e>
 8000446:   2030        movs  r0, #48  ; 0x30
 8000448:   8020        strh  r0, [r4, #0]
 800044a:   6828        ldr   r0, [r5, #0]
 800044c:   8831        ldrh  r1, [r6, #0]
 800044e:   88b2        ldrh  r2, [r6, #4]
 8000450:   4291        cmp   r1, r2
 8000452:   d302        bcc.n 800045a <FlashStart+0x45a>
 8000454:   2103        movs  r1, #3
 8000456:   7201        strb  r1, [r0, #8]
 8000458:   bdf1        pop   {r0, r4, r5, r6, r7, pc}
 800045a:   2900        cmp   r1, #0
 800045c:   d001        beq.n 8000462 <FlashStart+0x462>
 800045e:   2105        movs  r1, #5
 8000460:   e7f9        b.n   8000456 <FlashStart+0x456>
 8000462:   2106        movs  r1, #6
 8000464:   7201        strb  r1, [r0, #8]
 8000466:   f8df 037c   ldr.w r0, =0x40005c50    ; { USB device FS registers } | [pc, #892] ; 80007e4 <FlashStart+0x7e4>
 800046a:   6800        ldr   r0, [r0, #0]
 800046c:   b280        uxth  r0, r0
 800046e:   4958        ldr   r1, =0x40006004    ; { Shared USB/CAN SRAM 512 bytes } | [pc, #352] ; (80005d0 <FlashStart+0x5d0>)
 8000470:   2200        movs  r2, #0
 8000472:   f841 2010   str.w r2, [r1, r0, lsl #1]
 8000476:   2030        movs  r0, #48  ; 0x30
 8000478:   8020        strh  r0, [r4, #0]
 800047a:   bdf1        pop   {r0, r4, r5, r6, r7, pc}

FUNCTION:   TODO_800047c
 800047c:   e92d 43f8   stmdb sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000480:   f8df 93b0   ldr.w r9, =0x20000824    ; { RAM (bss) } | [pc, #944] ; 8000834 <FlashStart+0x834>
 8000484:   f8d9 0000   ldr.w r0, [r9]
 8000488:   f100 0410   add.w r4, r0, #16
 800048c:   8821        ldrh  r1, [r4, #0]
 800048e:   f8df 5414   ldr.w r5, =0x20000882    ; { RAM (bss) } | [pc, #1044]   ; 80008a4 <FlashStart+0x8a4>
 8000492:   b989        cbnz  r1, 80004b8 <FlashStart+0x4b8>
 8000494:   7a00        ldrb  r0, [r0, #8]
 8000496:   2804        cmp   r0, #4
 8000498:   d10e        bne.n 80004b8 <FlashStart+0x4b8>
 800049a:   48b1        ldr   r0, =0x2000088b    ; { RAM (bss) } | [pc, #708] ; (8000760 <FlashStart+0x760>)
 800049c:   7801        ldrb  r1, [r0, #0]
 800049e:   2901        cmp   r1, #1
 80004a0:   d106        bne.n 80004b0 <FlashStart+0x4b0>
 80004a2:   f000 f88d   bl 80005c0 <FlashStart+0x5c0>
 80004a6:   2130        movs  r1, #48  ; 0x30
 80004a8:   8029        strh  r1, [r5, #0]
 80004aa:   2604        movs  r6, #4
 80004ac:   7003        strb  r3, [r0, #0]
 80004ae:   e027        b.n   8000500 <FlashStart+0x500>
 80004b0:   2607        movs  r6, #7
 80004b2:   2010        movs  r0, #16
 80004b4:   8028        strh  r0, [r5, #0]
 80004b6:   e023        b.n   8000500 <FlashStart+0x500>
 80004b8:   88a7        ldrh  r7, [r4, #4]
 80004ba:   428f        cmp   r7, r1
 80004bc:   d305        bcc.n 80004ca <FlashStart+0x4ca>
 80004be:   2604        movs  r6, #4
 80004c0:   42b9        cmp   r1, r7
 80004c2:   d900        bls.n 80004c6 <FlashStart+0x4c6>
 80004c4:   4639        mov   r1, r7
 80004c6:   460f        mov   r7, r1
 80004c8:   e000        b.n   80004cc <FlashStart+0x4cc>
 80004ca:   2602        movs  r6, #2
 80004cc:   b2b8        uxth  r0, r7
 80004ce:   68a1        ldr   r1, [r4, #8]
 80004d0:   4788        blx   r1
 80004d2:   4680        mov   r8, r0
 80004d4:   2000        movs  r0, #0
 80004d6:   f001 fc42   bl 8001d5e <FlashStart+0x1d5e>
 80004da:   b2ba        uxth  r2, r7
 80004dc:   4601        mov   r1, r0
 80004de:   4640        mov   r0, r8
 80004e0:   f002 fa82   bl 80029e8 <FlashStart+0x29e8>
 80004e4:   b2b9        uxth  r1, r7
 80004e6:   2000        movs  r0, #0
 80004e8:   f001 fc41   bl 8001d6e <FlashStart+0x1d6e>
 80004ec:   8820        ldrh  r0, [r4, #0]
 80004ee:   1bc0        subs  r0, r0, r7
 80004f0:   8020        strh  r0, [r4, #0]
 80004f2:   8860        ldrh  r0, [r4, #2]
 80004f4:   1838        adds  r0, r7, r0
 80004f6:   8060        strh  r0, [r4, #2]
 80004f8:   2030        movs  r0, #48  ; 0x30
 80004fa:   8028        strh  r0, [r5, #0]
 80004fc:   f000 f932   bl 8000764 <FlashStart+0x764>
 8000500:   f8d9 0000   ldr.w r0, [r9]
 8000504:   7206        strb  r6, [r0, #8]
 8000506:   e8bd 83f1   ldmia.w  sp!, {r0, r4, r5, r6, r7, r8, r9, pc}

FUNCTION:   TODO_800050a
 800050a:   b538        push  {r3, r4, r5, lr}
 800050c:   f000 f98f   bl 800082e <FlashStart+0x82e>
 8000510:   7845        ldrb  r5, [r0, #1]
 8000512:   7801        ldrb  r1, [r0, #0]
 8000514:   227f        movs  r2, #127 ; 0x7f
 8000516:   4211        tst   r1, r2
 8000518:   d12c        bne.n 8000574 <FlashStart+0x574>
 800051a:   2d09        cmp   r5, #9
 800051c:   d102        bne.n 8000524 <FlashStart+0x524>
 800051e:   f7ff fe14   bl 800014a <FlashStart+0x14a>
 8000522:   e038        b.n   8000596 <FlashStart+0x596>
 8000524:   2d05        cmp   r5, #5
 8000526:   d10b        bne.n 8000540 <FlashStart+0x540>
 8000528:   78c1        ldrb  r1, [r0, #3]
 800052a:   2980        cmp   r1, #128 ; 0x80
 800052c:   d206        bcs.n 800053c <FlashStart+0x53c>
 800052e:   7881        ldrb  r1, [r0, #2]
 8000530:   b921        cbnz  r1, 800053c <FlashStart+0x53c>
 8000532:   8881        ldrh  r1, [r0, #4]
 8000534:   b911        cbnz  r1, 800053c <FlashStart+0x53c>
 8000536:   7a80        ldrb  r0, [r0, #10]
 8000538:   2800        cmp   r0, #0
 800053a:   d038        beq.n 80005ae <FlashStart+0x5ae>
 800053c:   2008        movs  r0, #8
 800053e:   e03c        b.n   80005ba <FlashStart+0x5ba>
 8000540:   2d03        cmp   r5, #3
 8000542:   d10a        bne.n 800055a <FlashStart+0x55a>
 8000544:   78c1        ldrb  r1, [r0, #3]
 8000546:   2901        cmp   r1, #1
 8000548:   d126        bne.n 8000598 <FlashStart+0x598>
 800054a:   8881        ldrh  r1, [r0, #4]
 800054c:   bb21        cbnz  r1, 8000598 <FlashStart+0x598>
 800054e:   7a40        ldrb  r0, [r0, #9]
 8000550:   0680        lsls  r0, r0, #26
 8000552:   d521        bpl.n 8000598 <FlashStart+0x598>
 8000554:   f7ff ff2f   bl 80003b6 <FlashStart+0x3b6>
 8000558:   e01d        b.n   8000596 <FlashStart+0x596>
 800055a:   2d01        cmp   r5, #1
 800055c:   d11c        bne.n 8000598 <FlashStart+0x598>
 800055e:   78c1        ldrb  r1, [r0, #3]
 8000560:   2901        cmp   r1, #1
 8000562:   d119        bne.n 8000598 <FlashStart+0x598>
 8000564:   8881        ldrh  r1, [r0, #4]
 8000566:   b9b9        cbnz  r1, 8000598 <FlashStart+0x598>
 8000568:   7a40        ldrb  r0, [r0, #9]
 800056a:   0680        lsls  r0, r0, #26
 800056c:   d514        bpl.n 8000598 <FlashStart+0x598>
 800056e:   f7ff fe87   bl 8000280 <FlashStart+0x280>
 8000572:   e010        b.n   8000596 <FlashStart+0x596>
 8000574:   f001 007f   and.w r0, r1, #127   ; 0x7f
 8000578:   2801        cmp   r0, #1
 800057a:   d104        bne.n 8000586 <FlashStart+0x586>
 800057c:   2d0b        cmp   r5, #11
 800057e:   d10b        bne.n 8000598 <FlashStart+0x598>
 8000580:   f7ff fe0d   bl 800019e <FlashStart+0x19e>
 8000584:   e007        b.n   8000596 <FlashStart+0x596>
 8000586:   2802        cmp   r0, #2
 8000588:   d106        bne.n 8000598 <FlashStart+0x598>
 800058a:   2d01        cmp   r5, #1
 800058c:   d0ef        beq.n 800056e <FlashStart+0x56e>
 800058e:   2d03        cmp   r5, #3
 8000590:   d102        bne.n 8000598 <FlashStart+0x598>
 8000592:   f7ff fed6   bl 8000342 <FlashStart+0x342>
 8000596:   b150        cbz   r0, 80005ae <FlashStart+0x5ae>
 8000598:   4628        mov   r0, r5
 800059a:   49c0        ldr   r1, =0x20000828    ; { RAM (bss) } | [pc, #768] ; (800089c <FlashStart+0x89c>)
 800059c:   6809        ldr   r1, [r1, #0]
 800059e:   6949        ldr   r1, [r1, #20]
 80005a0:   4788        blx   r1
 80005a2:   2803        cmp   r0, #3
 80005a4:   d101        bne.n 80005aa <FlashStart+0x5aa>
 80005a6:   2009        movs  r0, #9
 80005a8:   e007        b.n   80005ba <FlashStart+0x5ba>
 80005aa:   2800        cmp   r0, #0
 80005ac:   d1c6        bne.n 800053c <FlashStart+0x53c>
 80005ae:   2006        movs  r0, #6
 80005b0:   f000 f806   bl 80005c0 <FlashStart+0x5c0>
 80005b4:   49bb        ldr   r1, =0x20000882    ; { RAM (bss) } | [pc, #748] ; (80008a4 <FlashStart+0x8a4>)
 80005b6:   2230        movs  r2, #48  ; 0x30
 80005b8:   800a        strh  r2, [r1, #0]
 80005ba:   6821        ldr   r1, [r4, #0]
 80005bc:   7208        strb  r0, [r1, #8]
 80005be:   bd31        pop   {r0, r4, r5, pc}

FUNCTION:   TODO_80005c0
 80005c0:   4988        ldr   r1, =0x40005c50    ; { USB device FS registers } | [pc, #544] ; (80007e4 <FlashStart+0x7e4>)
 80005c2:   6809        ldr   r1, [r1, #0]
 80005c4:   b289        uxth  r1, r1
 80005c6:   4a02        ldr   r2, =0x40006004    ; { Shared USB/CAN SRAM 512 bytes } | [pc, #8]   ; (80005d0 <FlashStart+0x5d0>)
 80005c8:   2300        movs  r3, #0
 80005ca:   f842 3011   str.w r3, [r2, r1, lsl #1]
 80005ce:   4770        bx lr

.pool
 80005d0:   40006004    Shared USB/CAN SRAM 512 bytes


FUNCTION:   TODO_80005d4
 80005d4:   b538        push  {r3, r4, r5, lr}
 80005d6:   4d97        ldr   r5, =0x20000824    ; { RAM (bss) } | [pc, #604] ; (8000834 <FlashStart+0x834>)
 80005d8:   6828        ldr   r0, [r5, #0]
 80005da:   7841        ldrb  r1, [r0, #1]
 80005dc:   4caf        ldr   r4, =0x20000828    ; { RAM (bss) } | [pc, #700] ; (800089c <FlashStart+0x89c>)
 80005de:   6822        ldr   r2, [r4, #0]
 80005e0:   2906        cmp   r1, #6
 80005e2:   d114        bne.n 800060e <FlashStart+0x60e>
 80005e4:   7801        ldrb  r1, [r0, #0]
 80005e6:   237f        movs  r3, #127 ; 0x7f
 80005e8:   4219        tst   r1, r3
 80005ea:   d12e        bne.n 800064a <FlashStart+0x64a>
 80005ec:   7880        ldrb  r0, [r0, #2]
 80005ee:   2801        cmp   r0, #1
 80005f0:   d101        bne.n 80005f6 <FlashStart+0x5f6>
 80005f2:   6a11        ldr   r1, [r2, #32]
 80005f4:   e06f        b.n   80006d6 <FlashStart+0x6d6>
 80005f6:   2802        cmp   r0, #2
 80005f8:   d101        bne.n 80005fe <FlashStart+0x5fe>
 80005fa:   6a51        ldr   r1, [r2, #36]  ; 0x24
 80005fc:   e06b        b.n   80006d6 <FlashStart+0x6d6>
 80005fe:   2803        cmp   r0, #3
 8000600:   d101        bne.n 8000606 <FlashStart+0x606>
 8000602:   6a91        ldr   r1, [r2, #40]  ; 0x28
 8000604:   e067        b.n   80006d6 <FlashStart+0x6d6>
 8000606:   28c0        cmp   r0, #192 ; 0xc0
 8000608:   d11f        bne.n 800064a <FlashStart+0x64a>
 800060a:   69d1        ldr   r1, [r2, #28]
 800060c:   e063        b.n   80006d6 <FlashStart+0x6d6>
 800060e:   2900        cmp   r1, #0
 8000610:   d13f        bne.n 8000692 <FlashStart+0x692>
 8000612:   8841        ldrh  r1, [r0, #2]
 8000614:   b9c9        cbnz  r1, 800064a <FlashStart+0x64a>
 8000616:   88c1        ldrh  r1, [r0, #6]
 8000618:   2902        cmp   r1, #2
 800061a:   d116        bne.n 800064a <FlashStart+0x64a>
 800061c:   7901        ldrb  r1, [r0, #4]
 800061e:   b9a1        cbnz  r1, 800064a <FlashStart+0x64a>
 8000620:   7801        ldrb  r1, [r0, #0]
 8000622:   237f        movs  r3, #127 ; 0x7f
 8000624:   4219        tst   r1, r3
 8000626:   d103        bne.n 8000630 <FlashStart+0x630>
 8000628:   8883        ldrh  r3, [r0, #4]
 800062a:   b90b        cbnz  r3, 8000630 <FlashStart+0x630>
 800062c:   4949        ldr   r1, =0x80001e9    ; { Flash } | [pc, #292] ; (8000754 <FlashStart+0x754>)
 800062e:   e052        b.n   80006d6 <FlashStart+0x6d6>
 8000630:   f001 037f   and.w r3, r1, #127   ; 0x7f
 8000634:   2b01        cmp   r3, #1
 8000636:   d113        bne.n 8000660 <FlashStart+0x660>
 8000638:   2100        movs  r1, #0
 800063a:   7940        ldrb  r0, [r0, #5]
 800063c:   6992        ldr   r2, [r2, #24]
 800063e:   4790        blx   r2
 8000640:   b918        cbnz  r0, 800064a <FlashStart+0x64a>
 8000642:   6828        ldr   r0, [r5, #0]
 8000644:   7a80        ldrb  r0, [r0, #10]
 8000646:   2800        cmp   r0, #0
 8000648:   d1f0        bne.n 800062c <FlashStart+0x62c>
 800064a:   6828        ldr   r0, [r5, #0]
 800064c:   7840        ldrb  r0, [r0, #1]
 800064e:   6821        ldr   r1, [r4, #0]
 8000650:   6909        ldr   r1, [r1, #16]
 8000652:   4788        blx   r1
 8000654:   2803        cmp   r0, #3
 8000656:   d147        bne.n 80006e8 <FlashStart+0x6e8>
 8000658:   6828        ldr   r0, [r5, #0]
 800065a:   2109        movs  r1, #9
 800065c:   7201        strb  r1, [r0, #8]
 800065e:   bd31        pop   {r0, r4, r5, pc}
 8000660:   f001 017f   and.w r1, r1, #127   ; 0x7f
 8000664:   2902        cmp   r1, #2
 8000666:   d1f0        bne.n 800064a <FlashStart+0x64a>
 8000668:   7940        ldrb  r0, [r0, #5]
 800066a:   f000 010f   and.w r1, r0, #15
 800066e:   f000 0270   and.w r2, r0, #112   ; 0x70
 8000672:   f000 f87c   bl 800076e <FlashStart+0x76e>
 8000676:   bf4c        ite   mi
 8000678:   f000 0030   andmi.w  r0, r0, #48 ; 0x30
 800067c:   f400 5040   andpl.w  r0, r0, #12288 ; 0x3000
 8000680:   4b9b        ldr   r3, =0x20000aec    ; { RAM (data) } | [pc, #620] ; (80008f0 <FlashStart+0x8f0>)
 8000682:   781b        ldrb  r3, [r3, #0]
 8000684:   4299        cmp   r1, r3
 8000686:   d2e0        bcs.n 800064a <FlashStart+0x64a>
 8000688:   2a00        cmp   r2, #0
 800068a:   d1de        bne.n 800064a <FlashStart+0x64a>
 800068c:   2800        cmp   r0, #0
 800068e:   d1cd        bne.n 800062c <FlashStart+0x62c>
 8000690:   e7db        b.n   800064a <FlashStart+0x64a>
 8000692:   2908        cmp   r1, #8
 8000694:   d105        bne.n 80006a2 <FlashStart+0x6a2>
 8000696:   7800        ldrb  r0, [r0, #0]
 8000698:   217f        movs  r1, #127 ; 0x7f
 800069a:   4208        tst   r0, r1
 800069c:   d1d5        bne.n 800064a <FlashStart+0x64a>
 800069e:   492e        ldr   r1, =0x8000131    ; { Flash } | [pc, #184] ; (8000758 <FlashStart+0x758>)
 80006a0:   e019        b.n   80006d6 <FlashStart+0x6d6>
 80006a2:   290a        cmp   r1, #10
 80006a4:   d1d1        bne.n 800064a <FlashStart+0x64a>
 80006a6:   7801        ldrb  r1, [r0, #0]
 80006a8:   f001 017f   and.w r1, r1, #127   ; 0x7f
 80006ac:   2901        cmp   r1, #1
 80006ae:   d1cc        bne.n 800064a <FlashStart+0x64a>
 80006b0:   7a81        ldrb  r1, [r0, #10]
 80006b2:   2900        cmp   r1, #0
 80006b4:   d0c9        beq.n 800064a <FlashStart+0x64a>
 80006b6:   8841        ldrh  r1, [r0, #2]
 80006b8:   2900        cmp   r1, #0
 80006ba:   d1c6        bne.n 800064a <FlashStart+0x64a>
 80006bc:   7901        ldrb  r1, [r0, #4]
 80006be:   2900        cmp   r1, #0
 80006c0:   d1c3        bne.n 800064a <FlashStart+0x64a>
 80006c2:   88c1        ldrh  r1, [r0, #6]
 80006c4:   2901        cmp   r1, #1
 80006c6:   d1c0        bne.n 800064a <FlashStart+0x64a>
 80006c8:   2100        movs  r1, #0
 80006ca:   7940        ldrb  r0, [r0, #5]
 80006cc:   6992        ldr   r2, [r2, #24]
 80006ce:   4790        blx   r2
 80006d0:   2800        cmp   r0, #0
 80006d2:   d1ba        bne.n 800064a <FlashStart+0x64a>
 80006d4:   4921        ldr   r1, =0x800017b    ; { Flash } | [pc, #132] ; (800075c <FlashStart+0x75c>)
 80006d6:   0008        movs  r0, r1
 80006d8:   d0b7        beq.n 800064a <FlashStart+0x64a>
 80006da:   6828        ldr   r0, [r5, #0]
 80006dc:   2200        movs  r2, #0
 80006de:   8242        strh  r2, [r0, #18]
 80006e0:   6181        str   r1, [r0, #24]
 80006e2:   2000        movs  r0, #0
 80006e4:   4788        blx   r1
 80006e6:   2000        movs  r0, #0
 80006e8:   6829        ldr   r1, [r5, #0]
 80006ea:   8a0a        ldrh  r2, [r1, #16]
 80006ec:   f64f 73ff   movw  r3, #65535  ; 0xffff
 80006f0:   429a        cmp   r2, r3
 80006f2:   d102        bne.n 80006fa <FlashStart+0x6fa>
 80006f4:   2009        movs  r0, #9
 80006f6:   7208        strb  r0, [r1, #8]
 80006f8:   bd31        pop   {r0, r4, r5, pc}
 80006fa:   2802        cmp   r0, #2
 80006fc:   d001        beq.n 8000702 <FlashStart+0x702>
 80006fe:   2a00        cmp   r2, #0
 8000700:   d101        bne.n 8000706 <FlashStart+0x706>
 8000702:   2008        movs  r0, #8
 8000704:   e7f7        b.n   80006f6 <FlashStart+0x6f6>
 8000706:   7808        ldrb  r0, [r1, #0]
 8000708:   0600        lsls  r0, r0, #24
 800070a:   d51e        bpl.n 800074a <FlashStart+0x74a>
 800070c:   88c8        ldrh  r0, [r1, #6]
 800070e:   9000        str   r0, [sp, #0]
 8000710:   6823        ldr   r3, [r4, #0]
 8000712:   9c00        ldr   r4, [sp, #0]
 8000714:   4294        cmp   r4, r2
 8000716:   d202        bcs.n 800071e <FlashStart+0x71e>
 8000718:   9800        ldr   r0, [sp, #0]
 800071a:   8208        strh  r0, [r1, #16]
 800071c:   e00f        b.n   800073e <FlashStart+0x73e>
 800071e:   4282        cmp   r2, r0
 8000720:   d20d        bcs.n 800073e <FlashStart+0x73e>
 8000722:   f893 0030   ldrb.w   r0, [r3, #48]  ; 0x30
 8000726:   4c0e        ldr   r4, =0x2000088b    ; { RAM (bss) } | [pc, #56]  ; (8000760 <FlashStart+0x760>)
 8000728:   4282        cmp   r2, r0
 800072a:   d201        bcs.n 8000730 <FlashStart+0x730>
 800072c:   2000        movs  r0, #0
 800072e:   e005        b.n   800073c <FlashStart+0x73c>
 8000730:   fb92 f5f0   sdiv  r5, r2, r0
 8000734:   fb00 2015   mls   r0, r0, r5, r2
 8000738:   b908        cbnz  r0, 800073e <FlashStart+0x73e>
 800073a:   2001        movs  r0, #1
 800073c:   7020        strb  r0, [r4, #0]
 800073e:   f893 0030   ldrb.w   r0, [r3, #48]  ; 0x30
 8000742:   8288        strh  r0, [r1, #20]
 8000744:   e8bd 4031   ldmia.w  sp!, {r0, r4, r5, lr}
 8000748:   e698        b.n   800047c <FlashStart+0x47c>
 800074a:   2003        movs  r0, #3
 800074c:   7208        strb  r0, [r1, #8]
 800074e:   f000 f809   bl 8000764 <FlashStart+0x764>
 8000752:   bd31        pop   {r0, r4, r5, pc}

.pool
 8000754:   080001e9    Flash
 8000758:   08000131    Flash
 800075c:   0800017b    Flash
 8000760:   2000088b    RAM (bss)


FUNCTION:   TODO_8000764
 8000764:   484e        ldr   r0, =0x20000880    ; { RAM (bss) } | [pc, #312] ; (80008a0 <FlashStart+0x8a0>)
 8000766:   f44f 5140   mov.w r1, #12288  ; 0x3000
 800076a:   8001        strh  r1, [r0, #0]
 800076c:   4770        bx lr

FUNCTION:   TODO_800076e
 800076e:   4b61        ldr   r3, =0x40005c00    ; { USB device FS registers } | [pc, #388] ; (80008f4 <FlashStart+0x8f4>)
 8000770:   0600        lsls  r0, r0, #24
 8000772:   f853 0021   ldr.w r0, [r3, r1, lsl #2]
 8000776:   4770        bx lr

FUNCTION:   TODO_8000778
 8000778:   b538        push  {r3, r4, r5, lr}
 800077a:   4818        ldr   r0, =0x40006000    ; { Shared USB/CAN SRAM 512 bytes } | [pc, #96]  ; (80007dc <FlashStart+0x7dc>)
 800077c:   4919        ldr   r1, =0x40005c50    ; { USB device FS registers } | [pc, #100] ; (80007e4 <FlashStart+0x7e4>)
 800077e:   6809        ldr   r1, [r1, #0]
 8000780:   b289        uxth  r1, r1
 8000782:   4a17        ldr   r2, =0x40006008    ; { Shared USB/CAN SRAM 512 bytes } | [pc, #92]  ; (80007e0 <FlashStart+0x7e0>)
 8000784:   f832 1011   ldrh.w   r1, [r2, r1, lsl #1]
 8000788:   eb00 0041   add.w r0, r0, r1, lsl #1
 800078c:   4c29        ldr   r4, =0x20000824    ; { RAM (bss) } | [pc, #164] ; (8000834 <FlashStart+0x834>)
 800078e:   6821        ldr   r1, [r4, #0]
 8000790:   7a0a        ldrb  r2, [r1, #8]
 8000792:   2a09        cmp   r2, #9
 8000794:   d014        beq.n 80007c0 <FlashStart+0x7c0>
 8000796:   f810 2b01   ldrb.w   r2, [r0], #1
 800079a:   700a        strb  r2, [r1, #0]
 800079c:   6821        ldr   r1, [r4, #0]
 800079e:   f810 2b01   ldrb.w   r2, [r0], #1
 80007a2:   704a        strb  r2, [r1, #1]
 80007a4:   1c85        adds  r5, r0, #2
 80007a6:   f835 0b04   ldrh.w   r0, [r5], #4
 80007aa:   f001 fb1f   bl 8001dec <FlashStart+0x1dec>
 80007ae:   6821        ldr   r1, [r4, #0]
 80007b0:   8048        strh  r0, [r1, #2]
 80007b2:   8828        ldrh  r0, [r5, #0]
 80007b4:   f001 fb1a   bl 8001dec <FlashStart+0x1dec>
 80007b8:   6821        ldr   r1, [r4, #0]
 80007ba:   8088        strh  r0, [r1, #4]
 80007bc:   88a8        ldrh  r0, [r5, #4]
 80007be:   80c8        strh  r0, [r1, #6]
 80007c0:   6820        ldr   r0, [r4, #0]
 80007c2:   2101        movs  r1, #1
 80007c4:   7201        strb  r1, [r0, #8]
 80007c6:   6820        ldr   r0, [r4, #0]
 80007c8:   88c0        ldrh  r0, [r0, #6]
 80007ca:   b910        cbnz  r0, 80007d2 <FlashStart+0x7d2>
 80007cc:   f7ff fe9d   bl 800050a <FlashStart+0x50a>
 80007d0:   e001        b.n   80007d6 <FlashStart+0x7d6>
 80007d2:   f7ff feff   bl 80005d4 <FlashStart+0x5d4>
 80007d6:   e8bd 4031   ldmia.w  sp!, {r0, r4, r5, lr}
 80007da:   e049        b.n   8000870 <FlashStart+0x870>

.pool
 80007dc:   40006000    Shared USB/CAN SRAM 512 bytes
 80007e0:   40006008    Shared USB/CAN SRAM 512 bytes
 80007e4:   40005c50    USB device FS registers


FUNCTION:   TODO_80007e8
 80007e8:   b510        push  {r4, lr}
 80007ea:   f000 f820   bl 800082e <FlashStart+0x82e>
 80007ee:   7a01        ldrb  r1, [r0, #8]
 80007f0:   2902        cmp   r1, #2
 80007f2:   d001        beq.n 80007f8 <FlashStart+0x7f8>
 80007f4:   2904        cmp   r1, #4
 80007f6:   d104        bne.n 8000802 <FlashStart+0x802>
 80007f8:   f7ff fe40   bl 800047c <FlashStart+0x47c>
 80007fc:   6820        ldr   r0, [r4, #0]
 80007fe:   7a00        ldrb  r0, [r0, #8]
 8000800:   e014        b.n   800082c <FlashStart+0x82c>
 8000802:   2906        cmp   r1, #6
 8000804:   d111        bne.n 800082a <FlashStart+0x82a>
 8000806:   7841        ldrb  r1, [r0, #1]
 8000808:   2905        cmp   r1, #5
 800080a:   d10a        bne.n 8000822 <FlashStart+0x822>
 800080c:   7801        ldrb  r1, [r0, #0]
 800080e:   227f        movs  r2, #127 ; 0x7f
 8000810:   4211        tst   r1, r2
 8000812:   d106        bne.n 8000822 <FlashStart+0x822>
 8000814:   78c0        ldrb  r0, [r0, #3]
 8000816:   f000 f84f   bl 80008b8 <FlashStart+0x8b8>
 800081a:   f7ff fd2b   bl 8000274 <FlashStart+0x274>
 800081e:   6a00        ldr   r0, [r0, #32]
 8000820:   4780        blx   r0
 8000822:   481e        ldr   r0, =0x20000828    ; { RAM (bss) } | [pc, #120] ; (800089c <FlashStart+0x89c>)
 8000824:   6800        ldr   r0, [r0, #0]
 8000826:   6880        ldr   r0, [r0, #8]
 8000828:   4780        blx   r0
 800082a:   2008        movs  r0, #8
 800082c:   e01c        b.n   8000868 <FlashStart+0x868>

FUNCTION:   TODO_800082e
 800082e:   4c01        ldr   r4, =0x20000824    ; { RAM (bss) } | [pc, #4]   ; (8000834 <FlashStart+0x834>)
 8000830:   6820        ldr   r0, [r4, #0]
 8000832:   4770        bx lr

.pool
 8000834:   20000824    RAM (bss)


FUNCTION:   TODO_8000838
 8000838:   b510        push  {r4, lr}
 800083a:   f7ff fff8   bl 800082e <FlashStart+0x82e>
 800083e:   7a00        ldrb  r0, [r0, #8]
 8000840:   2802        cmp   r0, #2
 8000842:   d010        beq.n 8000866 <FlashStart+0x866>
 8000844:   2804        cmp   r0, #4
 8000846:   d00e        beq.n 8000866 <FlashStart+0x866>
 8000848:   2803        cmp   r0, #3
 800084a:   d001        beq.n 8000850 <FlashStart+0x850>
 800084c:   2805        cmp   r0, #5
 800084e:   d104        bne.n 800085a <FlashStart+0x85a>
 8000850:   f7ff fdcf   bl 80003f2 <FlashStart+0x3f2>
 8000854:   6820        ldr   r0, [r4, #0]
 8000856:   7a00        ldrb  r0, [r0, #8]
 8000858:   e006        b.n   8000868 <FlashStart+0x868>
 800085a:   2807        cmp   r0, #7
 800085c:   d103        bne.n 8000866 <FlashStart+0x866>
 800085e:   480f        ldr   r0, =0x20000828    ; { RAM (bss) } | [pc, #60]  ; (800089c <FlashStart+0x89c>)
 8000860:   6800        ldr   r0, [r0, #0]
 8000862:   68c0        ldr   r0, [r0, #12]
 8000864:   4780        blx   r0
 8000866:   2008        movs  r0, #8
 8000868:   6821        ldr   r1, [r4, #0]
 800086a:   7208        strb  r0, [r1, #8]
 800086c:   e8bd 4010   ldmia.w  sp!, {r4, lr}
 8000870:   b580        push  {r7, lr}
 8000872:   f000 f819   bl 80008a8 <FlashStart+0x8a8>
 8000876:   f7ff fdab   bl 80003d0 <FlashStart+0x3d0>
 800087a:   7a01        ldrb  r1, [r0, #8]
 800087c:   2908        cmp   r1, #8
 800087e:   d106        bne.n 800088e <FlashStart+0x88e>
 8000880:   4907        ldr   r1, =0x20000880    ; { RAM (bss) } | [pc, #28]  ; (80008a0 <FlashStart+0x8a0>)
 8000882:   f44f 5280   mov.w r2, #4096   ; 0x1000
 8000886:   800a        strh  r2, [r1, #0]
 8000888:   4906        ldr   r1, =0x20000882    ; { RAM (bss) } | [pc, #24]  ; (80008a4 <FlashStart+0x8a4>)
 800088a:   2210        movs  r2, #16
 800088c:   800a        strh  r2, [r1, #0]
 800088e:   7a00        ldrb  r0, [r0, #8]
 8000890:   2809        cmp   r0, #9
 8000892:   d101        bne.n 8000898 <FlashStart+0x898>
 8000894:   2001        movs  r0, #1
 8000896:   bd02        pop   {r1, pc}
 8000898:   2000        movs  r0, #0
 800089a:   bd02        pop   {r1, pc}

.pool
 800089c:   20000828    RAM (bss)
 80008a0:   20000880    RAM (bss)
 80008a4:   20000882    RAM (bss)


FUNCTION:   TODO_80008a8
 80008a8:   4802        ldr   r0, =0x200009a0    ; { RAM (data) } | [pc, #8]   ; (80008b4 <FlashStart+0x8b4>)
 80008aa:   f890 1030   ldrb.w   r1, [r0, #48]  ; 0x30
 80008ae:   2000        movs  r0, #0
 80008b0:   f001 ba64   b.w   8001d7c <FlashStart+0x1d7c>

.pool
 80008b4:   200009a0    RAM (data)


FUNCTION:   TODO_80008b8
 80008b8:   b570        push  {r4, r5, r6, lr}
 80008ba:   490d        ldr   r1, =0x20000aec    ; { RAM (data) } | [pc, #52]  ; (80008f0 <FlashStart+0x8f0>)
 80008bc:   7809        ldrb  r1, [r1, #0]
 80008be:   2200        movs  r2, #0
 80008c0:   4b0c        ldr   r3, =0x40005c00    ; { USB device FS registers } | [pc, #48]  ; (80008f4 <FlashStart+0x8f4>)
 80008c2:   e00c        b.n   80008de <FlashStart+0x8de>
 80008c4:   b2d4        uxtb  r4, r2
 80008c6:   f853 5024   ldr.w r5, [r3, r4, lsl #2]
 80008ca:   f648 768f   movw  r6, #36751  ; 0x8f8f
 80008ce:   4035        ands  r5, r6
 80008d0:   4325        orrs  r5, r4
 80008d2:   f248 0680   movw  r6, #32896  ; 0x8080
 80008d6:   4335        orrs  r5, r6
 80008d8:   f843 5024   str.w r5, [r3, r4, lsl #2]
 80008dc:   1c52        adds  r2, r2, #1
 80008de:   428a        cmp   r2, r1
 80008e0:   d3f0        bcc.n 80008c4 <FlashStart+0x8c4>
 80008e2:   f040 0080   orr.w r0, r0, #128   ; 0x80
 80008e6:   4901        ldr   r1, =0x40005c4c    ; { USB device FS registers } | [pc, #4]   ; (80008ec <FlashStart+0x8ec>)
 80008e8:   6008        str   r0, [r1, #0]
 80008ea:   bd70        pop   {r4, r5, r6, pc}

.pool
 80008ec:   40005c4c    USB device FS registers
 80008f0:   20000aec    RAM (data)
 80008f4:   40005c00    USB device FS registers

 80008f8:   4770        bx lr
 80008fa:   0000        movs  r0, r0
 80008fc:   b580        push  {r7, lr}
 80008fe:   f001 f997   bl 8001c30 <FlashStart+0x1c30>
 8000902:   f8df 03d4   ldr.w r0, =0x20000808    ; { RAM (bss) } | [pc, #980] ; 8000cd8 <FlashStart+0xcd8>
 8000906:   2100        movs  r1, #0
 8000908:   7281        strb  r1, [r0, #10]
 800090a:   f001 fd41   bl 8002390 <FlashStart+0x2390>
 800090e:   f002 f8ff   bl 8002b10 <FlashStart+0x2b10>
 8000912:   f001 f96e   bl 8001bf2 <FlashStart+0x1bf2>
 8000916:   482f        ldr   r0, =0x20000874    ; { RAM (bss) } | [pc, #188] ; (80009d4 <FlashStart+0x9d4>)
 8000918:   2100        movs  r1, #0
 800091a:   6001        str   r1, [r0, #0]
 800091c:   bd01        pop   {r0, pc}
 800091e:   0000        movs  r0, r0
 8000920:   b538        push  {r3, r4, r5, lr}
 8000922:   f8df 03b4   ldr.w r0, =0x20000808    ; { RAM (bss) } | [pc, #948] ; 8000cd8 <FlashStart+0xcd8>
 8000926:   2100        movs  r1, #0
 8000928:   7281        strb  r1, [r0, #10]
 800092a:   f8df 0448   ldr.w r0, =0x20000824    ; { RAM (bss) } | [pc, #1096]   ; 8000d74 <FlashStart+0xd74>
 800092e:   6800        ldr   r0, [r0, #0]
 8000930:   491d        ldr   r1, =0x20000a38    ; { RAM (data) } | [pc, #116] ; (80009a8 <FlashStart+0x9a8>)
 8000932:   79c9        ldrb  r1, [r1, #7]
 8000934:   7241        strb  r1, [r0, #9]
 8000936:   4c1d        ldr   r4, =0x40005c00    ; { USB device FS registers } | [pc, #116] ; (80009ac <FlashStart+0x9ac>)
 8000938:   2000        movs  r0, #0
 800093a:   6520        str   r0, [r4, #80]  ; 0x50
 800093c:   6820        ldr   r0, [r4, #0]
 800093e:   f648 118f   movw  r1, #35215  ; 0x898f
 8000942:   4008        ands  r0, r1
 8000944:   f44f 7100   mov.w r1, #512 ; 0x200
 8000948:   4308        orrs  r0, r1
 800094a:   6020        str   r0, [r4, #0]
 800094c:   6820        ldr   r0, [r4, #0]
 800094e:   f648 71bf   movw  r1, #36799  ; 0x8fbf
 8000952:   4008        ands  r0, r1
 8000954:   f080 0020   eor.w r0, r0, #32
 8000958:   f248 0180   movw  r1, #32896  ; 0x8080
 800095c:   4308        orrs  r0, r1
 800095e:   6020        str   r0, [r4, #0]
 8000960:   6d20        ldr   r0, [r4, #80]  ; 0x50
 8000962:   b280        uxth  r0, r0
 8000964:   4912        ldr   r1, =0x40006008    ; { Shared USB/CAN SRAM 512 bytes } | [pc, #72]  ; (80009b0 <FlashStart+0x9b0>)
 8000966:   2210        movs  r2, #16
 8000968:   f841 2010   str.w r2, [r1, r0, lsl #1]
 800096c:   4d11        ldr   r5, =0x200009a0    ; { RAM (data) } | [pc, #68]  ; (80009b4 <FlashStart+0x9b4>)
 800096e:   f895 1030   ldrb.w   r1, [r5, #48]  ; 0x30
 8000972:   2000        movs  r0, #0
 8000974:   f001 fa02   bl 8001d7c <FlashStart+0x1d7c>
 8000978:   6d20        ldr   r0, [r4, #80]  ; 0x50
 800097a:   b280        uxth  r0, r0
 800097c:   490e        ldr   r1, =0x40006000    ; { Shared USB/CAN SRAM 512 bytes } | [pc, #56]  ; (80009b8 <FlashStart+0x9b8>)
 800097e:   2250        movs  r2, #80  ; 0x50
 8000980:   f841 2010   str.w r2, [r1, r0, lsl #1]
 8000984:   f895 1030   ldrb.w   r1, [r5, #48]  ; 0x30
 8000988:   2000        movs  r0, #0
 800098a:   f001 f9f0   bl 8001d6e <FlashStart+0x1d6e>
 800098e:   2000        movs  r0, #0
 8000990:   f001 f9b6   bl 8001d00 <FlashStart+0x1d00>
 8000994:   2000        movs  r0, #0
 8000996:   f001 f9a7   bl 8001ce8 <FlashStart+0x1ce8>
 800099a:   2000        movs  r0, #0
 800099c:   f7ff ff8c   bl 80008b8 <FlashStart+0x8b8>
 80009a0:   480c        ldr   r0, =0x20000874    ; { RAM (bss) } | [pc, #48]  ; (80009d4 <FlashStart+0x9d4>)
 80009a2:   2101        movs  r1, #1
 80009a4:   6001        str   r1, [r0, #0]
 80009a6:   bd31        pop   {r0, r4, r5, pc}

.pool
 80009a8:   20000a38    RAM (data)
 80009ac:   40005c00    USB device FS registers
 80009b0:   40006008    Shared USB/CAN SRAM 512 bytes
 80009b4:   200009a0    RAM (data)
 80009b8:   40006000    Shared USB/CAN SRAM 512 bytes

 80009bc:   48c6        ldr   r0, =0x20000808    ; { RAM (bss) } | [pc, #792] ; (8000cd8 <FlashStart+0xcd8>)
 80009be:   7a80        ldrb  r0, [r0, #10]
 80009c0:   b110        cbz   r0, 80009c8 <FlashStart+0x9c8>
 80009c2:   4804        ldr   r0, =0x20000874    ; { RAM (bss) } | [pc, #16]  ; (80009d4 <FlashStart+0x9d4>)
 80009c4:   2105        movs  r1, #5
 80009c6:   6001        str   r1, [r0, #0]
 80009c8:   4770        bx lr
 80009ca:   4802        ldr   r0, =0x20000874    ; { RAM (bss) } | [pc, #8]   ; (80009d4 <FlashStart+0x9d4>)
 80009cc:   2104        movs  r1, #4
 80009ce:   6001        str   r1, [r0, #0]
 80009d0:   4770        bx lr
 80009d2:   0000        movs  r0, r0

.pool
 80009d4:   20000874    RAM (bss)

 80009d8:   4770        bx lr
 80009da:   b538        push  {r3, r4, r5, lr}
 80009dc:   48be        ldr   r0, =0x20000808    ; { RAM (bss) } | [pc, #760] ; (8000cd8 <FlashStart+0xcd8>)
 80009de:   7840        ldrb  r0, [r0, #1]
 80009e0:   2803        cmp   r0, #3
 80009e2:   d140        bne.n 8000a66 <FlashStart+0xa66>
 80009e4:   f8df 43c8   ldr.w r4, =0x20000838    ; { RAM (bss) } | [pc, #968] ; 8000db0 <FlashStart+0xdb0>
 80009e8:   7820        ldrb  r0, [r4, #0]
 80009ea:   2804        cmp   r0, #4
 80009ec:   d137        bne.n 8000a5e <FlashStart+0xa5e>
 80009ee:   f8df 558c   ldr.w r5, =0x20000930    ; { RAM (data) } | [pc, #1420]   ; 8000f7c <FlashStart+0xf7c>
 80009f2:   68e8        ldr   r0, [r5, #12]
 80009f4:   b108        cbz   r0, 80009fa <FlashStart+0x9fa>
 80009f6:   69e8        ldr   r0, [r5, #28]
 80009f8:   b1e0        cbz   r0, 8000a34 <FlashStart+0xa34>
 80009fa:   f000 f9db   bl 8000db4 <FlashStart+0xdb4>
 80009fe:   69e8        ldr   r0, [r5, #28]
 8000a00:   2800        cmp   r0, #0
 8000a02:   d121        bne.n 8000a48 <FlashStart+0xa48>
 8000a04:   68e8        ldr   r0, [r5, #12]
 8000a06:   b9a8        cbnz  r0, 8000a34 <FlashStart+0xa34>
 8000a08:   f8df 056c   ldr.w r0, =0x20000400    ; { RAM (bss) } | [pc, #1388]   ; 8000f78 <FlashStart+0xf78>
 8000a0c:   7801        ldrb  r1, [r0, #0]
 8000a0e:   2900        cmp   r1, #0
 8000a10:   d01a        beq.n 8000a48 <FlashStart+0xa48>
 8000a12:   692a        ldr   r2, [r5, #16]
 8000a14:   2921        cmp   r1, #33  ; 0x21
 8000a16:   d104        bne.n 8000a22 <FlashStart+0xa22>
 8000a18:   2a05        cmp   r2, #5
 8000a1a:   d115        bne.n 8000a48 <FlashStart+0xa48>
 8000a1c:   f000 f824   bl 8000a68 <FlashStart+0xa68>
 8000a20:   e012        b.n   8000a48 <FlashStart+0xa48>
 8000a22:   2941        cmp   r1, #65  ; 0x41
 8000a24:   d110        bne.n 8000a48 <FlashStart+0xa48>
 8000a26:   2a05        cmp   r2, #5
 8000a28:   d10e        bne.n 8000a48 <FlashStart+0xa48>
 8000a2a:   f000 f81d   bl 8000a68 <FlashStart+0xa68>
 8000a2e:   f001 fe41   bl 80026b4 <FlashStart+0x26b4>
 8000a32:   e009        b.n   8000a48 <FlashStart+0xa48>
 8000a34:   68e8        ldr   r0, [r5, #12]
 8000a36:   2802        cmp   r0, #2
 8000a38:   d306        bcc.n 8000a48 <FlashStart+0xa48>
 8000a3a:   6929        ldr   r1, [r5, #16]
 8000a3c:   1e80        subs  r0, r0, #2
 8000a3e:   69aa        ldr   r2, [r5, #24]
 8000a40:   eb02 2080   add.w r0, r2, r0, lsl #10
 8000a44:   f001 fe38   bl 80026b8 <FlashStart+0x26b8>
 8000a48:   2000        movs  r0, #0
 8000a4a:   6128        str   r0, [r5, #16]
 8000a4c:   60e8        str   r0, [r5, #12]
 8000a4e:   2003        movs  r0, #3
 8000a50:   7020        strb  r0, [r4, #0]
 8000a52:   f8df 0358   ldr.w r0, =0x20000830    ; { RAM (bss) } | [pc, #856] ; 8000dac <FlashStart+0xdac>
 8000a56:   2103        movs  r1, #3
 8000a58:   f000 f916   bl 8000c88 <FlashStart+0xc88>
 8000a5c:   bd31        pop   {r0, r4, r5, pc}
 8000a5e:   2807        cmp   r0, #7
 8000a60:   d101        bne.n 8000a66 <FlashStart+0xa66>
 8000a62:   f000 f989   bl 8000d78 <FlashStart+0xd78>
 8000a66:   bd31        pop   {r0, r4, r5, pc}

FUNCTION:   TODO_8000a68
 8000a68:   7841        ldrb  r1, [r0, #1]
 8000a6a:   7882        ldrb  r2, [r0, #2]
 8000a6c:   eb01 2102   add.w r1, r1, r2, lsl #8
 8000a70:   78c2        ldrb  r2, [r0, #3]
 8000a72:   eb01 4102   add.w r1, r1, r2, lsl #16
 8000a76:   7900        ldrb  r0, [r0, #4]
 8000a78:   eb01 6000   add.w r0, r1, r0, lsl #24
 8000a7c:   61a8        str   r0, [r5, #24]
 8000a7e:   4770        bx lr
 8000a80:   b580        push  {r7, lr}
 8000a82:   49bc        ldr   r1, =0x20000824    ; { RAM (bss) } | [pc, #752] ; (8000d74 <FlashStart+0xd74>)
 8000a84:   6809        ldr   r1, [r1, #0]
 8000a86:   780a        ldrb  r2, [r1, #0]
 8000a88:   f002 027f   and.w r2, r2, #127   ; 0x7f
 8000a8c:   2a21        cmp   r2, #33  ; 0x21
 8000a8e:   d11e        bne.n 8000ace <FlashStart+0xace>
 8000a90:   f8df 231c   ldr.w r2, =0x20000838    ; { RAM (bss) } | [pc, #796] ; 8000db0 <FlashStart+0xdb0>
 8000a94:   7813        ldrb  r3, [r2, #0]
 8000a96:   2802        cmp   r0, #2
 8000a98:   d107        bne.n 8000aaa <FlashStart+0xaaa>
 8000a9a:   2b02        cmp   r3, #2
 8000a9c:   d001        beq.n 8000aa2 <FlashStart+0xaa2>
 8000a9e:   2b09        cmp   r3, #9
 8000aa0:   d115        bne.n 8000ace <FlashStart+0xace>
 8000aa2:   4a0f        ldr   r2, =0x8000bf1    ; { Flash } | [pc, #60]  ; (8000ae0 <FlashStart+0xae0>)
 8000aa4:   0010        movs  r0, r2
 8000aa6:   d114        bne.n 8000ad2 <FlashStart+0xad2>
 8000aa8:   e011        b.n   8000ace <FlashStart+0xace>
 8000aaa:   2801        cmp   r0, #1
 8000aac:   d107        bne.n 8000abe <FlashStart+0xabe>
 8000aae:   2b02        cmp   r3, #2
 8000ab0:   d001        beq.n 8000ab6 <FlashStart+0xab6>
 8000ab2:   2b05        cmp   r3, #5
 8000ab4:   d10b        bne.n 8000ace <FlashStart+0xace>
 8000ab6:   2003        movs  r0, #3
 8000ab8:   7010        strb  r0, [r2, #0]
 8000aba:   4a0a        ldr   r2, =0x8000c95    ; { Flash } | [pc, #40]  ; (8000ae4 <FlashStart+0xae4>)
 8000abc:   e7f2        b.n   8000aa4 <FlashStart+0xaa4>
 8000abe:   2805        cmp   r0, #5
 8000ac0:   d101        bne.n 8000ac6 <FlashStart+0xac6>
 8000ac2:   4a09        ldr   r2, =0x8000cdd    ; { Flash } | [pc, #36]  ; (8000ae8 <FlashStart+0xae8>)
 8000ac4:   e7ee        b.n   8000aa4 <FlashStart+0xaa4>
 8000ac6:   2803        cmp   r0, #3
 8000ac8:   d101        bne.n 8000ace <FlashStart+0xace>
 8000aca:   4a08        ldr   r2, =0x8000cf1    ; { Flash } | [pc, #32]  ; (8000aec <FlashStart+0xaec>)
 8000acc:   e7ea        b.n   8000aa4 <FlashStart+0xaa4>
 8000ace:   2002        movs  r0, #2
 8000ad0:   bd02        pop   {r1, pc}
 8000ad2:   618a        str   r2, [r1, #24]
 8000ad4:   2000        movs  r0, #0
 8000ad6:   8248        strh  r0, [r1, #18]
 8000ad8:   4790        blx   r2
 8000ada:   2000        movs  r0, #0
 8000adc:   bd02        pop   {r1, pc}
 8000ade:   bf00        nop

.pool
 8000ae0:   08000bf1    Flash
 8000ae4:   08000c95    Flash
 8000ae8:   08000cdd    Flash
 8000aec:   08000cf1    Flash

 8000af0:   b510        push  {r4, lr}
 8000af2:   49a0        ldr   r1, =0x20000824    ; { RAM (bss) } | [pc, #640] ; (8000d74 <FlashStart+0xd74>)
 8000af4:   6809        ldr   r1, [r1, #0]
 8000af6:   7809        ldrb  r1, [r1, #0]
 8000af8:   f001 017f   and.w r1, r1, #127   ; 0x7f
 8000afc:   2921        cmp   r1, #33  ; 0x21
 8000afe:   d13e        bne.n 8000b7e <FlashStart+0xb7e>
 8000b00:   4bab        ldr   r3, =0x20000838    ; { RAM (bss) } | [pc, #684] ; (8000db0 <FlashStart+0xdb0>)
 8000b02:   781c        ldrb  r4, [r3, #0]
 8000b04:   f8df 2474   ldr.w r2, =0x20000930    ; { RAM (data) } | [pc, #1140]   ; 8000f7c <FlashStart+0xf7c>
 8000b08:   49a8        ldr   r1, =0x20000830    ; { RAM (bss) } | [pc, #672] ; (8000dac <FlashStart+0xdac>)
 8000b0a:   2801        cmp   r0, #1
 8000b0c:   d10a        bne.n 8000b24 <FlashStart+0xb24>
 8000b0e:   2c05        cmp   r4, #5
 8000b10:   d001        beq.n 8000b16 <FlashStart+0xb16>
 8000b12:   2c02        cmp   r4, #2
 8000b14:   d133        bne.n 8000b7e <FlashStart+0xb7e>
 8000b16:   6150        str   r0, [r2, #20]
 8000b18:   2006        movs  r0, #6
 8000b1a:   f000 f83b   bl 8000b94 <FlashStart+0xb94>
 8000b1e:   2006        movs  r0, #6
 8000b20:   7108        strb  r0, [r1, #4]
 8000b22:   e016        b.n   8000b52 <FlashStart+0xb52>
 8000b24:   2802        cmp   r0, #2
 8000b26:   d103        bne.n 8000b30 <FlashStart+0xb30>
 8000b28:   f000 f834   bl 8000b94 <FlashStart+0xb94>
 8000b2c:   2002        movs  r0, #2
 8000b2e:   e7f7        b.n   8000b20 <FlashStart+0xb20>
 8000b30:   2804        cmp   r0, #4
 8000b32:   d110        bne.n 8000b56 <FlashStart+0xb56>
 8000b34:   2c0a        cmp   r4, #10
 8000b36:   d102        bne.n 8000b3e <FlashStart+0xb3e>
 8000b38:   f000 f823   bl 8000b82 <FlashStart+0xb82>
 8000b3c:   e006        b.n   8000b4c <FlashStart+0xb4c>
 8000b3e:   200a        movs  r0, #10
 8000b40:   7018        strb  r0, [r3, #0]
 8000b42:   200e        movs  r0, #14
 8000b44:   7008        strb  r0, [r1, #0]
 8000b46:   f000 f826   bl 8000b96 <FlashStart+0xb96>
 8000b4a:   200a        movs  r0, #10
 8000b4c:   7108        strb  r0, [r1, #4]
 8000b4e:   2000        movs  r0, #0
 8000b50:   7148        strb  r0, [r1, #5]
 8000b52:   2000        movs  r0, #0
 8000b54:   bd10        pop   {r4, pc}
 8000b56:   2806        cmp   r0, #6
 8000b58:   d111        bne.n 8000b7e <FlashStart+0xb7e>
 8000b5a:   2c02        cmp   r4, #2
 8000b5c:   d007        beq.n 8000b6e <FlashStart+0xb6e>
 8000b5e:   2c03        cmp   r4, #3
 8000b60:   d005        beq.n 8000b6e <FlashStart+0xb6e>
 8000b62:   2c05        cmp   r4, #5
 8000b64:   d003        beq.n 8000b6e <FlashStart+0xb6e>
 8000b66:   2c06        cmp   r4, #6
 8000b68:   d001        beq.n 8000b6e <FlashStart+0xb6e>
 8000b6a:   2c09        cmp   r4, #9
 8000b6c:   d1f1        bne.n 8000b52 <FlashStart+0xb52>
 8000b6e:   f000 f808   bl 8000b82 <FlashStart+0xb82>
 8000b72:   7108        strb  r0, [r1, #4]
 8000b74:   2000        movs  r0, #0
 8000b76:   7148        strb  r0, [r1, #5]
 8000b78:   60d0        str   r0, [r2, #12]
 8000b7a:   6110        str   r0, [r2, #16]
 8000b7c:   e7e9        b.n   8000b52 <FlashStart+0xb52>
 8000b7e:   2002        movs  r0, #2
 8000b80:   bd10        pop   {r4, pc}

FUNCTION:   TODO_8000b82
 8000b82:   2002        movs  r0, #2
 8000b84:   7018        strb  r0, [r3, #0]
 8000b86:   2000        movs  r0, #0
 8000b88:   7008        strb  r0, [r1, #0]
 8000b8a:   7048        strb  r0, [r1, #1]
 8000b8c:   7088        strb  r0, [r1, #2]
 8000b8e:   70c8        strb  r0, [r1, #3]
 8000b90:   2002        movs  r0, #2
 8000b92:   4770        bx lr

FUNCTION:   TODO_8000b94
 8000b94:   7018        strb  r0, [r3, #0]

FUNCTION:   TODO_8000b96
 8000b96:   2000        movs  r0, #0
 8000b98:   7048        strb  r0, [r1, #1]
 8000b9a:   7088        strb  r0, [r1, #2]
 8000b9c:   70c8        strb  r0, [r1, #3]
 8000b9e:   4770        bx lr
 8000ba0:   4901        ldr   r1, =0x20000ad4    ; { RAM (data) } | [pc, #4]   ; (8000ba8 <FlashStart+0xba8>)
 8000ba2:   f7ff bc19   b.w   80003d8 <FlashStart+0x3d8>
 8000ba6:   bf00        nop

.pool
 8000ba8:   20000ad4    RAM (data)

 8000bac:   4901        ldr   r1, =0x20000adc    ; { RAM (data) } | [pc, #4]   ; (8000bb4 <FlashStart+0xbb4>)
 8000bae:   f7ff bc13   b.w   80003d8 <FlashStart+0x3d8>
 8000bb2:   bf00        nop

.pool
 8000bb4:   20000adc    RAM (data)

 8000bb8:   4901        ldr   r1, =0x20000950    ; { RAM (data) } | [pc, #4]   ; (8000bc0 <FlashStart+0xbc0>)
 8000bba:   f7ff bc0d   b.w   80003d8 <FlashStart+0x3d8>
 8000bbe:   bf00        nop

.pool
 8000bc0:   20000950    RAM (data)

 8000bc4:   496b        ldr   r1, =0x20000824    ; { RAM (bss) } | [pc, #428] ; (8000d74 <FlashStart+0xd74>)
 8000bc6:   6809        ldr   r1, [r1, #0]
 8000bc8:   78c9        ldrb  r1, [r1, #3]
 8000bca:   2909        cmp   r1, #9
 8000bcc:   db01        blt.n 8000bd2 <FlashStart+0xbd2>
 8000bce:   2000        movs  r0, #0
 8000bd0:   4770        bx lr
 8000bd2:   4a02        ldr   r2, =0x20000968    ; { RAM (data) } | [pc, #8]   ; (8000bdc <FlashStart+0xbdc>)
 8000bd4:   eb02 01c1   add.w r1, r2, r1, lsl #3
 8000bd8:   f7ff bbfe   b.w   80003d8 <FlashStart+0x3d8>

.pool
 8000bdc:   20000968    RAM (data)

 8000be0:   2904        cmp   r1, #4
 8000be2:   d301        bcc.n 8000be8 <FlashStart+0xbe8>
 8000be4:   2002        movs  r0, #2
 8000be6:   4770        bx lr
 8000be8:   2803        cmp   r0, #3
 8000bea:   d2fb        bcs.n 8000be4 <FlashStart+0xbe4>
 8000bec:   2000        movs  r0, #0
 8000bee:   4770        bx lr
 8000bf0:   b5f8        push  {r3, r4, r5, r6, r7, lr}
 8000bf2:   4604        mov   r4, r0
 8000bf4:   4838        ldr   r0, =0x20000808    ; { RAM (bss) } | [pc, #224] ; (8000cd8 <FlashStart+0xcd8>)
 8000bf6:   7881        ldrb  r1, [r0, #2]
 8000bf8:   78c2        ldrb  r2, [r0, #3]
 8000bfa:   eb02 2301   add.w r3, r2, r1, lsl #8
 8000bfe:   f8df 537c   ldr.w r5, =0x20000930    ; { RAM (data) } | [pc, #892] ; 8000f7c <FlashStart+0xf7c>
 8000c02:   60eb        str   r3, [r5, #12]
 8000c04:   79c1        ldrb  r1, [r0, #7]
 8000c06:   7980        ldrb  r0, [r0, #6]
 8000c08:   eb00 2101   add.w r1, r0, r1, lsl #8
 8000c0c:   6129        str   r1, [r5, #16]
 8000c0e:   4e59        ldr   r6, =0x20000824    ; { RAM (bss) } | [pc, #356] ; (8000d74 <FlashStart+0xd74>)
 8000c10:   6832        ldr   r2, [r6, #0]
 8000c12:   8a57        ldrh  r7, [r2, #18]
 8000c14:   4865        ldr   r0, =0x20000830    ; { RAM (bss) } | [pc, #404] ; (8000dac <FlashStart+0xdac>)
 8000c16:   f8df c198   ldr.w ip, =0x20000838    ; { RAM (bss) } | [pc, #408] ; 8000db0 <FlashStart+0xdb0>
 8000c1a:   b9b3        cbnz  r3, 8000c4a <FlashStart+0xc4a>
 8000c1c:   2904        cmp   r1, #4
 8000c1e:   bf2c        ite   cs
 8000c20:   2102        movcs r1, #2
 8000c22:   2109        movcc r1, #9
 8000c24:   f88c 1000   strb.w   r1, [ip]
 8000c28:   f89c 1000   ldrb.w   r1, [ip]
 8000c2c:   f000 f82c   bl 8000c88 <FlashStart+0xc88>
 8000c30:   f8df 0344   ldr.w r0, =0x20000400    ; { RAM (bss) } | [pc, #836] ; 8000f78 <FlashStart+0xf78>
 8000c34:   7001        strb  r1, [r0, #0]
 8000c36:   2121        movs  r1, #33  ; 0x21
 8000c38:   7041        strb  r1, [r0, #1]
 8000c3a:   2141        movs  r1, #65  ; 0x41
 8000c3c:   7081        strb  r1, [r0, #2]
 8000c3e:   2c00        cmp   r4, #0
 8000c40:   d121        bne.n 8000c86 <FlashStart+0xc86>
 8000c42:   2003        movs  r0, #3
 8000c44:   8210        strh  r0, [r2, #16]
 8000c46:   2000        movs  r0, #0
 8000c48:   bdf2        pop   {r1, r4, r5, r6, r7, pc}
 8000c4a:   2b02        cmp   r3, #2
 8000c4c:   d315        bcc.n 8000c7a <FlashStart+0xc7a>
 8000c4e:   2209        movs  r2, #9
 8000c50:   f88c 2000   strb.w   r2, [ip]
 8000c54:   7102        strb  r2, [r0, #4]
 8000c56:   2200        movs  r2, #0
 8000c58:   7042        strb  r2, [r0, #1]
 8000c5a:   7082        strb  r2, [r0, #2]
 8000c5c:   70c2        strb  r2, [r0, #3]
 8000c5e:   1e98        subs  r0, r3, #2
 8000c60:   69aa        ldr   r2, [r5, #24]
 8000c62:   eb02 2080   add.w r0, r2, r0, lsl #10
 8000c66:   f001 fd29   bl 80026bc <FlashStart+0x26bc>
 8000c6a:   b924        cbnz  r4, 8000c76 <FlashStart+0xc76>
 8000c6c:   6928        ldr   r0, [r5, #16]
 8000c6e:   1bc0        subs  r0, r0, r7
 8000c70:   6831        ldr   r1, [r6, #0]
 8000c72:   8208        strh  r0, [r1, #16]
 8000c74:   e7e7        b.n   8000c46 <FlashStart+0xc46>
 8000c76:   1838        adds  r0, r7, r0
 8000c78:   bdf2        pop   {r1, r4, r5, r6, r7, pc}
 8000c7a:   210f        movs  r1, #15
 8000c7c:   f88c 1000   strb.w   r1, [ip]
 8000c80:   f000 f802   bl 8000c88 <FlashStart+0xc88>
 8000c84:   2000        movs  r0, #0
 8000c86:   bdf2        pop   {r1, r4, r5, r6, r7, pc}

FUNCTION:   TODO_8000c88
 8000c88:   7101        strb  r1, [r0, #4]
 8000c8a:   2100        movs  r1, #0
 8000c8c:   7041        strb  r1, [r0, #1]
 8000c8e:   7081        strb  r1, [r0, #2]
 8000c90:   70c1        strb  r1, [r0, #3]
 8000c92:   4770        bx lr
 8000c94:   b570        push  {r4, r5, r6, lr}
 8000c96:   4910        ldr   r1, =0x20000808    ; { RAM (bss) } | [pc, #64]  ; (8000cd8 <FlashStart+0xcd8>)
 8000c98:   788a        ldrb  r2, [r1, #2]
 8000c9a:   78cb        ldrb  r3, [r1, #3]
 8000c9c:   eb03 2202   add.w r2, r3, r2, lsl #8
 8000ca0:   4bb6        ldr   r3, =0x20000930    ; { RAM (data) } | [pc, #728] ; (8000f7c <FlashStart+0xf7c>)
 8000ca2:   60da        str   r2, [r3, #12]
 8000ca4:   79cc        ldrb  r4, [r1, #7]
 8000ca6:   798d        ldrb  r5, [r1, #6]
 8000ca8:   eb05 2404   add.w r4, r5, r4, lsl #8
 8000cac:   611c        str   r4, [r3, #16]
 8000cae:   8a49        ldrh  r1, [r1, #18]
 8000cb0:   4d3f        ldr   r5, =0x20000838    ; { RAM (bss) } | [pc, #252] ; (8000db0 <FlashStart+0xdb0>)
 8000cb2:   2603        movs  r6, #3
 8000cb4:   702e        strb  r6, [r5, #0]
 8000cb6:   4d3d        ldr   r5, =0x20000830    ; { RAM (bss) } | [pc, #244] ; (8000dac <FlashStart+0xdac>)
 8000cb8:   712e        strb  r6, [r5, #4]
 8000cba:   b928        cbnz  r0, 8000cc8 <FlashStart+0xcc8>
 8000cbc:   1a60        subs  r0, r4, r1
 8000cbe:   492d        ldr   r1, =0x20000824    ; { RAM (bss) } | [pc, #180] ; (8000d74 <FlashStart+0xd74>)
 8000cc0:   6809        ldr   r1, [r1, #0]
 8000cc2:   8208        strh  r0, [r1, #16]
 8000cc4:   2000        movs  r0, #0
 8000cc6:   bd70        pop   {r4, r5, r6, pc}
 8000cc8:   b91a        cbnz  r2, 8000cd2 <FlashStart+0xcd2>
 8000cca:   29ff        cmp   r1, #255 ; 0xff
 8000ccc:   dd01        ble.n 8000cd2 <FlashStart+0xcd2>
 8000cce:   2001        movs  r0, #1
 8000cd0:   7218        strb  r0, [r3, #8]
 8000cd2:   48a9        ldr   r0, =0x20000400    ; { RAM (bss) } | [pc, #676] ; (8000f78 <FlashStart+0xf78>)
 8000cd4:   1808        adds  r0, r1, r0
 8000cd6:   bd70        pop   {r4, r5, r6, pc}

.pool
 8000cd8:   20000808    RAM (bss)

 8000cdc:   2800        cmp   r0, #0
 8000cde:   d105        bne.n 8000cec <FlashStart+0xcec>
 8000ce0:   4824        ldr   r0, =0x20000824    ; { RAM (bss) } | [pc, #144] ; (8000d74 <FlashStart+0xd74>)
 8000ce2:   6800        ldr   r0, [r0, #0]
 8000ce4:   2101        movs  r1, #1
 8000ce6:   8201        strh  r1, [r0, #16]
 8000ce8:   2000        movs  r0, #0
 8000cea:   4770        bx lr
 8000cec:   4830        ldr   r0, =0x20000838    ; { RAM (bss) } | [pc, #192] ; (8000db0 <FlashStart+0xdb0>)
 8000cee:   4770        bx lr
 8000cf0:   b538        push  {r3, r4, r5, lr}
 8000cf2:   4605        mov   r5, r0
 8000cf4:   4c2d        ldr   r4, =0x20000830    ; { RAM (bss) } | [pc, #180] ; (8000dac <FlashStart+0xdac>)
 8000cf6:   49a1        ldr   r1, =0x20000930    ; { RAM (data) } | [pc, #644] ; (8000f7c <FlashStart+0xf7c>)
 8000cf8:   482d        ldr   r0, =0x20000838    ; { RAM (bss) } | [pc, #180] ; (8000db0 <FlashStart+0xdb0>)
 8000cfa:   7802        ldrb  r2, [r0, #0]
 8000cfc:   2a03        cmp   r2, #3
 8000cfe:   d002        beq.n 8000d06 <FlashStart+0xd06>
 8000d00:   2a06        cmp   r2, #6
 8000d02:   d016        beq.n 8000d32 <FlashStart+0xd32>
 8000d04:   e02b        b.n   8000d5e <FlashStart+0xd5e>
 8000d06:   690a        ldr   r2, [r1, #16]
 8000d08:   b18a        cbz   r2, 8000d2e <FlashStart+0xd2e>
 8000d0a:   2204        movs  r2, #4
 8000d0c:   7002        strb  r2, [r0, #0]
 8000d0e:   7122        strb  r2, [r4, #4]
 8000d10:   6988        ldr   r0, [r1, #24]
 8000d12:   68c9        ldr   r1, [r1, #12]
 8000d14:   b941        cbnz  r1, 8000d28 <FlashStart+0xd28>
 8000d16:   4998        ldr   r1, =0x20000400    ; { RAM (bss) } | [pc, #608] ; (8000f78 <FlashStart+0xf78>)
 8000d18:   7809        ldrb  r1, [r1, #0]
 8000d1a:   2941        cmp   r1, #65  ; 0x41
 8000d1c:   d104        bne.n 8000d28 <FlashStart+0xd28>
 8000d1e:   4622        mov   r2, r4
 8000d20:   2100        movs  r1, #0
 8000d22:   f001 fcdb   bl 80026dc <FlashStart+0x26dc>
 8000d26:   e01a        b.n   8000d5e <FlashStart+0xd5e>
 8000d28:   4622        mov   r2, r4
 8000d2a:   2101        movs  r1, #1
 8000d2c:   e7f9        b.n   8000d22 <FlashStart+0xd22>
 8000d2e:   2105        movs  r1, #5
 8000d30:   e00f        b.n   8000d52 <FlashStart+0xd52>
 8000d32:   694a        ldr   r2, [r1, #20]
 8000d34:   2a01        cmp   r2, #1
 8000d36:   d106        bne.n 8000d46 <FlashStart+0xd46>
 8000d38:   2107        movs  r1, #7
 8000d3a:   7001        strb  r1, [r0, #0]
 8000d3c:   7121        strb  r1, [r4, #4]
 8000d3e:   2001        movs  r0, #1
 8000d40:   7060        strb  r0, [r4, #1]
 8000d42:   2000        movs  r0, #0
 8000d44:   e009        b.n   8000d5a <FlashStart+0xd5a>
 8000d46:   b952        cbnz  r2, 8000d5e <FlashStart+0xd5e>
 8000d48:   6a09        ldr   r1, [r1, #32]
 8000d4a:   7d09        ldrb  r1, [r1, #20]
 8000d4c:   0749        lsls  r1, r1, #29
 8000d4e:   d506        bpl.n 8000d5e <FlashStart+0xd5e>
 8000d50:   2102        movs  r1, #2
 8000d52:   7001        strb  r1, [r0, #0]
 8000d54:   7121        strb  r1, [r4, #4]
 8000d56:   2000        movs  r0, #0
 8000d58:   7060        strb  r0, [r4, #1]
 8000d5a:   70a0        strb  r0, [r4, #2]
 8000d5c:   70e0        strb  r0, [r4, #3]
 8000d5e:   2d00        cmp   r5, #0
 8000d60:   d105        bne.n 8000d6e <FlashStart+0xd6e>
 8000d62:   4804        ldr   r0, =0x20000824    ; { RAM (bss) } | [pc, #16]  ; (8000d74 <FlashStart+0xd74>)
 8000d64:   6800        ldr   r0, [r0, #0]
 8000d66:   2106        movs  r1, #6
 8000d68:   8201        strh  r1, [r0, #16]
 8000d6a:   2000        movs  r0, #0
 8000d6c:   bd32        pop   {r1, r4, r5, pc}
 8000d6e:   4620        mov   r0, r4
 8000d70:   bd32        pop   {r1, r4, r5, pc}
 8000d72:   0000        movs  r0, r0

.pool
 8000d74:   20000824    RAM (bss)


FUNCTION:   TODO_8000d78
 8000d78:   4980        ldr   r1, =0x20000930    ; { RAM (data) } | [pc, #512] ; (8000f7c <FlashStart+0xf7c>)
 8000d7a:   2000        movs  r0, #0
 8000d7c:   6148        str   r0, [r1, #20]
 8000d7e:   480b        ldr   r0, =0x20000830    ; { RAM (bss) } | [pc, #44]  ; (8000dac <FlashStart+0xdac>)
 8000d80:   4a0b        ldr   r2, =0x20000838    ; { RAM (bss) } | [pc, #44]  ; (8000db0 <FlashStart+0xdb0>)
 8000d82:   6a09        ldr   r1, [r1, #32]
 8000d84:   7d09        ldrb  r1, [r1, #20]
 8000d86:   0749        lsls  r1, r1, #29
 8000d88:   d507        bpl.n 8000d9a <FlashStart+0xd9a>
 8000d8a:   2106        movs  r1, #6
 8000d8c:   7011        strb  r1, [r2, #0]
 8000d8e:   7101        strb  r1, [r0, #4]
 8000d90:   2100        movs  r1, #0
 8000d92:   7041        strb  r1, [r0, #1]
 8000d94:   7081        strb  r1, [r0, #2]
 8000d96:   70c1        strb  r1, [r0, #3]
 8000d98:   4770        bx lr
 8000d9a:   2108        movs  r1, #8
 8000d9c:   7011        strb  r1, [r2, #0]
 8000d9e:   7101        strb  r1, [r0, #4]
 8000da0:   2100        movs  r1, #0
 8000da2:   7041        strb  r1, [r0, #1]
 8000da4:   7081        strb  r1, [r0, #2]
 8000da6:   70c1        strb  r1, [r0, #3]
 8000da8:   f000 bf34   b.w   8001c14 <FlashStart+0x1c14>

.pool
 8000dac:   20000830    RAM (bss)
 8000db0:   20000838    RAM (bss)


FUNCTION:   TODO_8000db4
 8000db4:   b570        push  {r4, r5, r6, lr}
 8000db6:   4d70        ldr   r5, =0x20000400    ; { RAM (bss) } | [pc, #448] ; (8000f78 <FlashStart+0xf78>)
 8000db8:   4e70        ldr   r6, =0x20000930    ; { RAM (data) } | [pc, #448] ; (8000f7c <FlashStart+0xf7c>)
 8000dba:   69f0        ldr   r0, [r6, #28]
 8000dbc:   bb48        cbnz  r0, 8000e12 <FlashStart+0xe12>
 8000dbe:   6930        ldr   r0, [r6, #16]
 8000dc0:   f5b0 7f8e   cmp.w r0, #284 ; 0x11c
 8000dc4:   d924        bls.n 8000e10 <FlashStart+0xe10>
 8000dc6:   2206        movs  r2, #6
 8000dc8:   4629        mov   r1, r5
 8000dca:   4868        ldr   r0, =0x8002bfc    ; { Flash } | [pc, #416] ; (8000f6c <FlashStart+0xf6c>)
 8000dcc:   f001 fd54   bl 8002878 <FlashStart+0x2878>
 8000dd0:   b9d8        cbnz  r0, 8000e0a <FlashStart+0xe0a>
 8000dd2:   2001        movs  r0, #1
 8000dd4:   61f0        str   r0, [r6, #28]
 8000dd6:   f895 0119   ldrb.w   r0, [r5, #281] ; 0x119
 8000dda:   7270        strb  r0, [r6, #9]
 8000ddc:   4c64        ldr   r4, =0x8003000    ; { Flash } | [pc, #400] ; (8000f70 <FlashStart+0xf70>)
 8000dde:   4620        mov   r0, r4
 8000de0:   f001 fc68   bl 80026b4 <FlashStart+0x26b4>
 8000de4:   f504 6400   add.w r4, r4, #2048  ; 0x800
 8000de8:   4862        ldr   r0, =0x803e800    ; { Flash } | [pc, #392] ; (8000f74 <FlashStart+0xf74>)
 8000dea:   4284        cmp   r4, r0
 8000dec:   d3f7        bcc.n 8000dde <FlashStart+0xdde>
 8000dee:   2000        movs  r0, #0
 8000df0:   7230        strb  r0, [r6, #8]
 8000df2:   6931        ldr   r1, [r6, #16]
 8000df4:   f2a1 111d   subw  r1, r1, #285   ; 0x11d
 8000df8:   e004        b.n   8000e04 <FlashStart+0xe04>
 8000dfa:   1942        adds  r2, r0, r5
 8000dfc:   f892 211d   ldrb.w   r2, [r2, #285] ; 0x11d
 8000e00:   5542        strb  r2, [r0, r5]
 8000e02:   1c40        adds  r0, r0, #1
 8000e04:   4288        cmp   r0, r1
 8000e06:   d3f8        bcc.n 8000dfa <FlashStart+0xdfa>
 8000e08:   6131        str   r1, [r6, #16]
 8000e0a:   69f0        ldr   r0, [r6, #28]
 8000e0c:   2800        cmp   r0, #0
 8000e0e:   d10e        bne.n 8000e2e <FlashStart+0xe2e>
 8000e10:   bd70        pop   {r4, r5, r6, pc}
 8000e12:   2000        movs  r0, #0
 8000e14:   7230        strb  r0, [r6, #8]
 8000e16:   e00a        b.n   8000e2e <FlashStart+0xe2e>
 8000e18:   180b        adds  r3, r1, r0
 8000e1a:   5d5b        ldrb  r3, [r3, r5]
 8000e1c:   5543        strb  r3, [r0, r5]
 8000e1e:   1c40        adds  r0, r0, #1
 8000e20:   4290        cmp   r0, r2
 8000e22:   d3f9        bcc.n 8000e18 <FlashStart+0xe18>
 8000e24:   6132        str   r2, [r6, #16]
 8000e26:   2000        movs  r0, #0
 8000e28:   6330        str   r0, [r6, #48]  ; 0x30
 8000e2a:   62f0        str   r0, [r6, #44]  ; 0x2c
 8000e2c:   72f0        strb  r0, [r6, #11]
 8000e2e:   6930        ldr   r0, [r6, #16]
 8000e30:   2800        cmp   r0, #0
 8000e32:   d072        beq.n 8000f1a <FlashStart+0xf1a>
 8000e34:   7ab2        ldrb  r2, [r6, #10]
 8000e36:   b1a2        cbz   r2, 8000e62 <FlashStart+0xe62>
 8000e38:   6930        ldr   r0, [r6, #16]
 8000e3a:   1811        adds  r1, r2, r0
 8000e3c:   1949        adds  r1, r1, r5
 8000e3e:   1943        adds  r3, r0, r5
 8000e40:   f813 3c01   ldrb.w   r3, [r3, #-1]
 8000e44:   f801 3c01   strb.w   r3, [r1, #-1]
 8000e48:   1e40        subs  r0, r0, #1
 8000e4a:   d1f6        bne.n 8000e3a <FlashStart+0xe3a>
 8000e4c:   f106 0134   add.w r1, r6, #52 ; 0x34
 8000e50:   4628        mov   r0, r5
 8000e52:   f001 febc   bl 8002bce <FlashStart+0x2bce>
 8000e56:   6930        ldr   r0, [r6, #16]
 8000e58:   7ab1        ldrb  r1, [r6, #10]
 8000e5a:   1808        adds  r0, r1, r0
 8000e5c:   6130        str   r0, [r6, #16]
 8000e5e:   2000        movs  r0, #0
 8000e60:   72b0        strb  r0, [r6, #10]
 8000e62:   6b30        ldr   r0, [r6, #48]  ; 0x30
 8000e64:   bbc8        cbnz  r0, 8000eda <FlashStart+0xeda>
 8000e66:   7af0        ldrb  r0, [r6, #11]
 8000e68:   2808        cmp   r0, #8
 8000e6a:   d218        bcs.n 8000e9e <FlashStart+0xe9e>
 8000e6c:   f1c0 0408   rsb   r4, r0, #8
 8000e70:   6931        ldr   r1, [r6, #16]
 8000e72:   42a1        cmp   r1, r4
 8000e74:   d200        bcs.n 8000e78 <FlashStart+0xe78>
 8000e76:   460c        mov   r4, r1
 8000e78:   4622        mov   r2, r4
 8000e7a:   4629        mov   r1, r5
 8000e7c:   1980        adds  r0, r0, r6
 8000e7e:   f001 fea6   bl 8002bce <FlashStart+0x2bce>
 8000e82:   7af0        ldrb  r0, [r6, #11]
 8000e84:   1820        adds  r0, r4, r0
 8000e86:   72f0        strb  r0, [r6, #11]
 8000e88:   2000        movs  r0, #0
 8000e8a:   6931        ldr   r1, [r6, #16]
 8000e8c:   1b09        subs  r1, r1, r4
 8000e8e:   e003        b.n   8000e98 <FlashStart+0xe98>
 8000e90:   1822        adds  r2, r4, r0
 8000e92:   5d52        ldrb  r2, [r2, r5]
 8000e94:   5542        strb  r2, [r0, r5]
 8000e96:   1c40        adds  r0, r0, #1
 8000e98:   4288        cmp   r0, r1
 8000e9a:   d3f9        bcc.n 8000e90 <FlashStart+0xe90>
 8000e9c:   6131        str   r1, [r6, #16]
 8000e9e:   7af0        ldrb  r0, [r6, #11]
 8000ea0:   2808        cmp   r0, #8
 8000ea2:   d11a        bne.n 8000eda <FlashStart+0xeda>
 8000ea4:   7830        ldrb  r0, [r6, #0]
 8000ea6:   7871        ldrb  r1, [r6, #1]
 8000ea8:   eb00 2001   add.w r0, r0, r1, lsl #8
 8000eac:   78b1        ldrb  r1, [r6, #2]
 8000eae:   eb00 4001   add.w r0, r0, r1, lsl #16
 8000eb2:   78f1        ldrb  r1, [r6, #3]
 8000eb4:   eb00 6001   add.w r0, r0, r1, lsl #24
 8000eb8:   62b0        str   r0, [r6, #40]  ; 0x28
 8000eba:   7930        ldrb  r0, [r6, #4]
 8000ebc:   7971        ldrb  r1, [r6, #5]
 8000ebe:   eb00 2001   add.w r0, r0, r1, lsl #8
 8000ec2:   79b1        ldrb  r1, [r6, #6]
 8000ec4:   eb00 4001   add.w r0, r0, r1, lsl #16
 8000ec8:   79f1        ldrb  r1, [r6, #7]
 8000eca:   eb00 6001   add.w r0, r0, r1, lsl #24
 8000ece:   6330        str   r0, [r6, #48]  ; 0x30
 8000ed0:   2000        movs  r0, #0
 8000ed2:   62f0        str   r0, [r6, #44]  ; 0x2c
 8000ed4:   7a70        ldrb  r0, [r6, #9]
 8000ed6:   30ff        adds  r0, #255 ; 0xff
 8000ed8:   7270        strb  r0, [r6, #9]
 8000eda:   6930        ldr   r0, [r6, #16]
 8000edc:   b1e8        cbz   r0, 8000f1a <FlashStart+0xf1a>
 8000ede:   6b31        ldr   r1, [r6, #48]  ; 0x30
 8000ee0:   2900        cmp   r1, #0
 8000ee2:   d0a7        beq.n 8000e34 <FlashStart+0xe34>
 8000ee4:   4288        cmp   r0, r1
 8000ee6:   d220        bcs.n 8000f2a <FlashStart+0xf2a>
 8000ee8:   f010 0203   ands.w   r2, r0, #3
 8000eec:   d009        beq.n 8000f02 <FlashStart+0xf02>
 8000eee:   72b2        strb  r2, [r6, #10]
 8000ef0:   f000 0103   and.w r1, r0, #3
 8000ef4:   1a40        subs  r0, r0, r1
 8000ef6:   6130        str   r0, [r6, #16]
 8000ef8:   1941        adds  r1, r0, r5
 8000efa:   f106 0034   add.w r0, r6, #52 ; 0x34
 8000efe:   f001 fe66   bl 8002bce <FlashStart+0x2bce>
 8000f02:   6931        ldr   r1, [r6, #16]
 8000f04:   f000 f83c   bl 8000f80 <FlashStart+0xf80>
 8000f08:   6930        ldr   r0, [r6, #16]
 8000f0a:   6af1        ldr   r1, [r6, #44]  ; 0x2c
 8000f0c:   1841        adds  r1, r0, r1
 8000f0e:   62f1        str   r1, [r6, #44]  ; 0x2c
 8000f10:   6b31        ldr   r1, [r6, #48]  ; 0x30
 8000f12:   1a08        subs  r0, r1, r0
 8000f14:   6330        str   r0, [r6, #48]  ; 0x30
 8000f16:   2000        movs  r0, #0
 8000f18:   6130        str   r0, [r6, #16]
 8000f1a:   6b30        ldr   r0, [r6, #48]  ; 0x30
 8000f1c:   2800        cmp   r0, #0
 8000f1e:   d103        bne.n 8000f28 <FlashStart+0xf28>
 8000f20:   7a70        ldrb  r0, [r6, #9]
 8000f22:   2800        cmp   r0, #0
 8000f24:   d100        bne.n 8000f28 <FlashStart+0xf28>
 8000f26:   61f0        str   r0, [r6, #28]
 8000f28:   bd70        pop   {r4, r5, r6, pc}
 8000f2a:   f011 0003   ands.w   r0, r1, #3
 8000f2e:   d007        beq.n 8000f40 <FlashStart+0xf40>
 8000f30:   2204        movs  r2, #4
 8000f32:   4240        negs  r0, r0
 8000f34:   1949        adds  r1, r1, r5
 8000f36:   1841        adds  r1, r0, r1
 8000f38:   f106 0034   add.w r0, r6, #52 ; 0x34
 8000f3c:   f001 fe47   bl 8002bce <FlashStart+0x2bce>
 8000f40:   6b31        ldr   r1, [r6, #48]  ; 0x30
 8000f42:   f000 f81d   bl 8000f80 <FlashStart+0xf80>
 8000f46:   6b30        ldr   r0, [r6, #48]  ; 0x30
 8000f48:   f010 0103   ands.w   r1, r0, #3
 8000f4c:   d009        beq.n 8000f62 <FlashStart+0xf62>
 8000f4e:   2204        movs  r2, #4
 8000f50:   f106 0134   add.w r1, r6, #52 ; 0x34
 8000f54:   f000 0303   and.w r3, r0, #3
 8000f58:   425b        negs  r3, r3
 8000f5a:   1940        adds  r0, r0, r5
 8000f5c:   1818        adds  r0, r3, r0
 8000f5e:   f001 fe36   bl 8002bce <FlashStart+0x2bce>
 8000f62:   2000        movs  r0, #0
 8000f64:   6b31        ldr   r1, [r6, #48]  ; 0x30
 8000f66:   6932        ldr   r2, [r6, #16]
 8000f68:   1a52        subs  r2, r2, r1
 8000f6a:   e759        b.n   8000e20 <FlashStart+0xe20>

.pool
 8000f6c:   08002bfc    Flash
 8000f70:   08003000    Flash
 8000f74:   0803e800    Flash
 8000f78:   20000400    RAM (bss)
 8000f7c:   20000930    RAM (data)


FUNCTION:   TODO_8000f80
 8000f80:   6ab0        ldr   r0, [r6, #40]  ; 0x28
 8000f82:   6af2        ldr   r2, [r6, #44]  ; 0x2c
 8000f84:   1810        adds  r0, r2, r0
 8000f86:   f001 bb97   b.w   80026b8 <FlashStart+0x26b8>
 8000f8a:   0000        movs  r0, r0
 8000f8c:   b51c        push  {r2, r3, r4, lr}
 8000f8e:   fb00 f300   mul.w r3, r0, r0
 8000f92:   f245 219e   movw  r1, #21150  ; 0x529e
 8000f96:   2278        movs  r2, #120 ; 0x78
 8000f98:   435a        muls  r2, r3
 8000f9a:   fb01 2100   mla   r1, r1, r0, r2
 8000f9e:   0c09        lsrs  r1, r1, #16
 8000fa0:   f244 4244   movw  r2, #17476  ; 0x4444
 8000fa4:   4342        muls  r2, r0
 8000fa6:   0c12        lsrs  r2, r2, #16
 8000fa8:   f647 541b   movw  r4, #32027  ; 0x7d1b
 8000fac:   4360        muls  r0, r4
 8000fae:   243c        movs  r4, #60  ; 0x3c
 8000fb0:   fb04 0013   mls   r0, r4, r3, r0
 8000fb4:   0c00        lsrs  r0, r0, #16
 8000fb6:   090b        lsrs  r3, r1, #4
 8000fb8:   f003 030f   and.w r3, r3, #15
 8000fbc:   f88d 3000   strb.w   r3, [sp]
 8000fc0:   ac00        add   r4, sp, #0
 8000fc2:   f001 010f   and.w r1, r1, #15
 8000fc6:   7061        strb  r1, [r4, #1]
 8000fc8:   0911        lsrs  r1, r2, #4
 8000fca:   f001 010f   and.w r1, r1, #15
 8000fce:   70a1        strb  r1, [r4, #2]
 8000fd0:   f002 010f   and.w r1, r2, #15
 8000fd4:   70e1        strb  r1, [r4, #3]
 8000fd6:   0901        lsrs  r1, r0, #4
 8000fd8:   f001 010f   and.w r1, r1, #15
 8000fdc:   7121        strb  r1, [r4, #4]
 8000fde:   f000 000f   and.w r0, r0, #15
 8000fe2:   f88d 0005   strb.w   r0, [sp, #5]
 8000fe6:   aa00        add   r2, sp, #0
 8000fe8:   2106        movs  r1, #6
 8000fea:   200e        movs  r0, #14
 8000fec:   f000 f90b   bl 8001206 <FlashStart+0x1206>
 8000ff0:   2006        movs  r0, #6
 8000ff2:   f000 f80a   bl 800100a <FlashStart+0x100a>
 8000ff6:   200f        movs  r0, #15
 8000ff8:   f000 f905   bl 8001206 <FlashStart+0x1206>
 8000ffc:   200a        movs  r0, #10
 8000ffe:   f000 f804   bl 800100a <FlashStart+0x100a>
 8001002:   201d        movs  r0, #29
 8001004:   f000 f8ff   bl 8001206 <FlashStart+0x1206>
 8001008:   bd13        pop   {r0, r1, r4, pc}

FUNCTION:   TODO_800100a
 800100a:   f88d 0000   strb.w   r0, [sp]
 800100e:   7060        strb  r0, [r4, #1]
 8001010:   70a0        strb  r0, [r4, #2]
 8001012:   aa00        add   r2, sp, #0
 8001014:   2103        movs  r1, #3
 8001016:   4770        bx lr

FUNCTION:   TODO_8001018
 8001018:   b580        push  {r7, lr}
 800101a:   210f        movs  r1, #15
 800101c:   201c        movs  r0, #28
 800101e:   f000 f8cf   bl 80011c0 <FlashStart+0x11c0>
 8001022:   2100        movs  r1, #0
 8001024:   201e        movs  r0, #30
 8001026:   f000 f8cb   bl 80011c0 <FlashStart+0x11c0>
 800102a:   208c        movs  r0, #140 ; 0x8c
 800102c:   e8bd 4002   ldmia.w  sp!, {r1, lr}
 8001030:   e7ac        b.n   8000f8c <FlashStart+0xf8c>
 8001032:   b538        push  {r3, r4, r5, lr}
 8001034:   f000 f913   bl 800125e <FlashStart+0x125e>
 8001038:   4dbb        ldr   r5, =0x40011400    ; { GPIO Port D } | [pc, #748] ; (8001328 <FlashStart+0x1328>)
 800103a:   2104        movs  r1, #4
 800103c:   4628        mov   r0, r5
 800103e:   f001 fa78   bl 8002532 <FlashStart+0x2532>
 8001042:   f24c 3450   movw  r4, #50000  ; 0xc350
 8001046:   9400        str   r4, [sp, #0]
 8001048:   f000 f85e   bl 8001108 <FlashStart+0x1108>
 800104c:   2104        movs  r1, #4
 800104e:   4628        mov   r0, r5
 8001050:   f001 fa6d   bl 800252e <FlashStart+0x252e>
 8001054:   9400        str   r4, [sp, #0]
 8001056:   f000 f857   bl 8001108 <FlashStart+0x1108>
 800105a:   f000 f807   bl 800106c <FlashStart+0x106c>
 800105e:   2101        movs  r1, #1
 8001060:   48b2        ldr   r0, =0x40010c00    ; { GPIO Port B } | [pc, #712] ; (800132c <FlashStart+0x132c>)
 8001062:   e8bd 4034   ldmia.w  sp!, {r2, r4, r5, lr}
 8001066:   f001 ba62   b.w   800252e <FlashStart+0x252e>
 800106a:   0000        movs  r0, r0

FUNCTION:   TODO_800106c
 800106c:   b5fe        push  {r1, r2, r3, r4, r5, r6, r7, lr}
 800106e:   4837        ldr   r0, =0x20000864    ; { RAM (bss) } | [pc, #220] ; (800114c <FlashStart+0x114c>)
 8001070:   6806        ldr   r6, [r0, #0]
 8001072:   6847        ldr   r7, [r0, #4]
 8001074:   2200        movs  r2, #0
 8001076:   2100        movs  r1, #0
 8001078:   2001        movs  r0, #1
 800107a:   f000 f8c4   bl 8001206 <FlashStart+0x1206>
 800107e:   f242 7010   movw  r0, #10000  ; 0x2710
 8001082:   9000        str   r0, [sp, #0]
 8001084:   f000 f840   bl 8001108 <FlashStart+0x1108>
 8001088:   2100        movs  r1, #0
 800108a:   2003        movs  r0, #3
 800108c:   f000 f898   bl 80011c0 <FlashStart+0x11c0>
 8001090:   a801        add   r0, sp, #4
 8001092:   491c        ldr   r1, =0x8002bf4    ; { Flash } | [pc, #112] ; (8001104 <FlashStart+0x1104>)
 8001094:   c90c        ldmia r1!, {r2, r3}
 8001096:   c00c        stmia r0!, {r2, r3}
 8001098:   aa01        add   r2, sp, #4
 800109a:   2108        movs  r1, #8
 800109c:   2007        movs  r0, #7
 800109e:   f000 f8b2   bl 8001206 <FlashStart+0x1206>
 80010a2:   2100        movs  r1, #0
 80010a4:   2005        movs  r0, #5
 80010a6:   f000 f88b   bl 80011c0 <FlashStart+0x11c0>
 80010aa:   2100        movs  r1, #0
 80010ac:   2006        movs  r0, #6
 80010ae:   f000 f887   bl 80011c0 <FlashStart+0x11c0>
 80010b2:   2102        movs  r1, #2
 80010b4:   2004        movs  r0, #4
 80010b6:   f000 f883   bl 80011c0 <FlashStart+0x11c0>
 80010ba:   2130        movs  r1, #48  ; 0x30
 80010bc:   201f        movs  r0, #31
 80010be:   f000 f87f   bl 80011c0 <FlashStart+0x11c0>
 80010c2:   2112        movs  r1, #18
 80010c4:   2030        movs  r0, #48  ; 0x30
 80010c6:   f000 f87b   bl 80011c0 <FlashStart+0x11c0>
 80010ca:   2002        movs  r0, #2
 80010cc:   f7ff ffa4   bl 8001018 <FlashStart+0x1018>
 80010d0:   2101        movs  r1, #1
 80010d2:   2008        movs  r0, #8
 80010d4:   f000 f874   bl 80011c0 <FlashStart+0x11c0>
 80010d8:   2500        movs  r5, #0
 80010da:   2400        movs  r4, #0
 80010dc:   462a        mov   r2, r5
 80010de:   4621        mov   r1, r4
 80010e0:   2000        movs  r0, #0
 80010e2:   f000 f835   bl 8001150 <FlashStart+0x1150>
 80010e6:   1c64        adds  r4, r4, #1
 80010e8:   2c80        cmp   r4, #128 ; 0x80
 80010ea:   dbf7        blt.n 80010dc <FlashStart+0x10dc>
 80010ec:   1c6d        adds  r5, r5, #1
 80010ee:   2da0        cmp   r5, #160 ; 0xa0
 80010f0:   dbf3        blt.n 80010da <FlashStart+0x10da>
 80010f2:   2101        movs  r1, #1
 80010f4:   2002        movs  r0, #2
 80010f6:   f000 f863   bl 80011c0 <FlashStart+0x11c0>
 80010fa:   4639        mov   r1, r7
 80010fc:   4630        mov   r0, r6
 80010fe:   f000 f809   bl 8001114 <FlashStart+0x1114>
 8001102:   bdf7        pop   {r0, r1, r2, r4, r5, r6, r7, pc}

.pool
 8001104:   08002bf4    Flash


FUNCTION:   TODO_8001108
 8001108:   9800        ldr   r0, [sp, #0]
 800110a:   1e41        subs  r1, r0, #1
 800110c:   9100        str   r1, [sp, #0]
 800110e:   2800        cmp   r0, #0
 8001110:   d1fa        bne.n 8001108 <FlashStart+0x1108>
 8001112:   4770        bx lr

FUNCTION:   TODO_8001114
 8001114:   b580        push  {r7, lr}
 8001116:   4a0d        ldr   r2, =0x20000864    ; { RAM (bss) } | [pc, #52]  ; (800114c <FlashStart+0x114c>)
 8001118:   6010        str   r0, [r2, #0]
 800111a:   6051        str   r1, [r2, #4]
 800111c:   0902        lsrs  r2, r0, #4
 800111e:   f002 020f   and.w r2, r2, #15
 8001122:   f88d 2000   strb.w   r2, [sp]
 8001126:   f000 000f   and.w r0, r0, #15
 800112a:   f88d 0001   strb.w   r0, [sp, #1]
 800112e:   0908        lsrs  r0, r1, #4
 8001130:   f000 000f   and.w r0, r0, #15
 8001134:   f88d 0002   strb.w   r0, [sp, #2]
 8001138:   f001 000f   and.w r0, r1, #15
 800113c:   f88d 0003   strb.w   r0, [sp, #3]
 8001140:   aa00        add   r2, sp, #0
 8001142:   2104        movs  r1, #4
 8001144:   200b        movs  r0, #11
 8001146:   f000 f85e   bl 8001206 <FlashStart+0x1206>
 800114a:   bd01        pop   {r0, pc}

.pool
 800114c:   20000864    RAM (bss)


FUNCTION:   TODO_8001150
 8001150:   b510        push  {r4, lr}
 8001152:   b084        sub   sp, #16
 8001154:   4604        mov   r4, r0
 8001156:   4819        ldr   r0, =0x2000085c    ; { RAM (bss) } | [pc, #100] ; (80011bc <FlashStart+0x11bc>)
 8001158:   6803        ldr   r3, [r0, #0]
 800115a:   1859        adds  r1, r3, r1
 800115c:   6840        ldr   r0, [r0, #4]
 800115e:   1880        adds  r0, r0, r2
 8001160:   2980        cmp   r1, #128 ; 0x80
 8001162:   d300        bcc.n 8001166 <FlashStart+0x1166>
 8001164:   3980        subs  r1, #128 ; 0x80
 8001166:   28a0        cmp   r0, #160 ; 0xa0
 8001168:   d300        bcc.n 800116c <FlashStart+0x116c>
 800116a:   38a0        subs  r0, #160 ; 0xa0
 800116c:   090a        lsrs  r2, r1, #4
 800116e:   f002 020f   and.w r2, r2, #15
 8001172:   f88d 2004   strb.w   r2, [sp, #4]
 8001176:   f001 010f   and.w r1, r1, #15
 800117a:   ab01        add   r3, sp, #4
 800117c:   7059        strb  r1, [r3, #1]
 800117e:   709a        strb  r2, [r3, #2]
 8001180:   f88d 1007   strb.w   r1, [sp, #7]
 8001184:   0901        lsrs  r1, r0, #4
 8001186:   f001 010f   and.w r1, r1, #15
 800118a:   7119        strb  r1, [r3, #4]
 800118c:   f000 000f   and.w r0, r0, #15
 8001190:   f88d 0009   strb.w   r0, [sp, #9]
 8001194:   f88d 100a   strb.w   r1, [sp, #10]
 8001198:   f88d 000b   strb.w   r0, [sp, #11]
 800119c:   aa01        add   r2, sp, #4
 800119e:   2108        movs  r1, #8
 80011a0:   200a        movs  r0, #10
 80011a2:   f000 f830   bl 8001206 <FlashStart+0x1206>
 80011a6:   0a20        lsrs  r0, r4, #8
 80011a8:   f88d 0000   strb.w   r0, [sp]
 80011ac:   f88d 4001   strb.w   r4, [sp, #1]
 80011b0:   aa00        add   r2, sp, #0
 80011b2:   2102        movs  r1, #2
 80011b4:   200c        movs  r0, #12
 80011b6:   f000 f826   bl 8001206 <FlashStart+0x1206>
 80011ba:   bd1f        pop   {r0, r1, r2, r3, r4, pc}

.pool
 80011bc:   2000085c    RAM (bss)


FUNCTION:   TODO_80011c0
 80011c0:   b5f8        push  {r3, r4, r5, r6, r7, lr}
 80011c2:   4604        mov   r4, r0
 80011c4:   460d        mov   r5, r1
 80011c6:   4e5a        ldr   r6, =0x40010800    ; { GPIO Port A } | [pc, #360] ; (8001330 <FlashStart+0x1330>)
 80011c8:   2110        movs  r1, #16
 80011ca:   4630        mov   r0, r6
 80011cc:   f001 f9b1   bl 8002532 <FlashStart+0x2532>
 80011d0:   4f54        ldr   r7, =0x40011000    ; { GPIO Port C } | [pc, #336] ; (8001324 <FlashStart+0x1324>)
 80011d2:   f44f 6180   mov.w r1, #1024   ; 0x400
 80011d6:   4638        mov   r0, r7
 80011d8:   f001 f9ab   bl 8002532 <FlashStart+0x2532>
 80011dc:   4620        mov   r0, r4
 80011de:   f000 f8b6   bl 800134e <FlashStart+0x134e>
 80011e2:   f000 f8c3   bl 800136c <FlashStart+0x136c>
 80011e6:   f44f 6180   mov.w r1, #1024   ; 0x400
 80011ea:   4638        mov   r0, r7
 80011ec:   f001 f99f   bl 800252e <FlashStart+0x252e>
 80011f0:   4628        mov   r0, r5
 80011f2:   f000 f8ac   bl 800134e <FlashStart+0x134e>
 80011f6:   f000 f8b9   bl 800136c <FlashStart+0x136c>
 80011fa:   2110        movs  r1, #16
 80011fc:   4630        mov   r0, r6
 80011fe:   e8bd 40f4   ldmia.w  sp!, {r2, r4, r5, r6, r7, lr}
 8001202:   f001 b994   b.w   800252e <FlashStart+0x252e>

FUNCTION:   TODO_8001206
 8001206:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
 800120a:   4606        mov   r6, r0
 800120c:   460d        mov   r5, r1
 800120e:   4614        mov   r4, r2
 8001210:   4f47        ldr   r7, =0x40010800    ; { GPIO Port A } | [pc, #284] ; (8001330 <FlashStart+0x1330>)
 8001212:   2110        movs  r1, #16
 8001214:   4638        mov   r0, r7
 8001216:   f001 f98c   bl 8002532 <FlashStart+0x2532>
 800121a:   f8df 8108   ldr.w r8, =0x40011000    ; { GPIO Port C } | [pc, #264] ; 8001324 <FlashStart+0x1324>
 800121e:   f44f 6180   mov.w r1, #1024   ; 0x400
 8001222:   4640        mov   r0, r8
 8001224:   f001 f985   bl 8002532 <FlashStart+0x2532>
 8001228:   4630        mov   r0, r6
 800122a:   f000 f890   bl 800134e <FlashStart+0x134e>
 800122e:   f000 f89d   bl 800136c <FlashStart+0x136c>
 8001232:   f44f 6180   mov.w r1, #1024   ; 0x400
 8001236:   4640        mov   r0, r8
 8001238:   f001 f979   bl 800252e <FlashStart+0x252e>
 800123c:   2d01        cmp   r5, #1
 800123e:   db08        blt.n 8001252 <FlashStart+0x1252>
 8001240:   e003        b.n   800124a <FlashStart+0x124a>
 8001242:   f814 0b01   ldrb.w   r0, [r4], #1
 8001246:   f000 f882   bl 800134e <FlashStart+0x134e>
 800124a:   1e6d        subs  r5, r5, #1
 800124c:   daf9        bge.n 8001242 <FlashStart+0x1242>
 800124e:   f000 f88d   bl 800136c <FlashStart+0x136c>
 8001252:   2110        movs  r1, #16
 8001254:   4638        mov   r0, r7
 8001256:   e8bd 41f0   ldmia.w  sp!, {r4, r5, r6, r7, r8, lr}
 800125a:   f001 b968   b.w   800252e <FlashStart+0x252e>

FUNCTION:   TODO_800125e
 800125e:   b510        push  {r4, lr}
 8001260:   b086        sub   sp, #24
 8001262:   f44f 6080   mov.w r0, #1024   ; 0x400
 8001266:   f000 f869   bl 800133c <FlashStart+0x133c>
 800126a:   4c2e        ldr   r4, =0x40011000    ; { GPIO Port C } | [pc, #184] ; (8001324 <FlashStart+0x1324>)
 800126c:   f000 f862   bl 8001334 <FlashStart+0x1334>
 8001270:   f44f 6180   mov.w r1, #1024   ; 0x400
 8001274:   4620        mov   r0, r4
 8001276:   f001 f95a   bl 800252e <FlashStart+0x252e>
 800127a:   2004        movs  r0, #4
 800127c:   f000 f85e   bl 800133c <FlashStart+0x133c>
 8001280:   4c29        ldr   r4, =0x40011400    ; { GPIO Port D } | [pc, #164] ; (8001328 <FlashStart+0x1328>)
 8001282:   f000 f857   bl 8001334 <FlashStart+0x1334>
 8001286:   2104        movs  r1, #4
 8001288:   4620        mov   r0, r4
 800128a:   f001 f950   bl 800252e <FlashStart+0x252e>
 800128e:   2001        movs  r0, #1
 8001290:   f000 f854   bl 800133c <FlashStart+0x133c>
 8001294:   4c25        ldr   r4, =0x40010c00    ; { GPIO Port B } | [pc, #148] ; (800132c <FlashStart+0x132c>)
 8001296:   f000 f84d   bl 8001334 <FlashStart+0x1334>
 800129a:   2101        movs  r1, #1
 800129c:   4620        mov   r0, r4
 800129e:   f001 f948   bl 8002532 <FlashStart+0x2532>
 80012a2:   2101        movs  r1, #1
 80012a4:   f44f 5080   mov.w r0, #4096   ; 0x1000
 80012a8:   f000 fc18   bl 8001adc <FlashStart+0x1adc>
 80012ac:   2101        movs  r1, #1
 80012ae:   2004        movs  r0, #4
 80012b0:   f000 fc14   bl 8001adc <FlashStart+0x1adc>
 80012b4:   20a0        movs  r0, #160 ; 0xa0
 80012b6:   f8ad 0000   strh.w   r0, [sp]
 80012ba:   2018        movs  r0, #24
 80012bc:   f000 f841   bl 8001342 <FlashStart+0x1342>
 80012c0:   4c1b        ldr   r4, =0x40010800    ; { GPIO Port A } | [pc, #108] ; (8001330 <FlashStart+0x1330>)
 80012c2:   f000 f837   bl 8001334 <FlashStart+0x1334>
 80012c6:   2010        movs  r0, #16
 80012c8:   f8ad 0000   strh.w   r0, [sp]
 80012cc:   f88d 0003   strb.w   r0, [sp, #3]
 80012d0:   f000 f830   bl 8001334 <FlashStart+0x1334>
 80012d4:   2110        movs  r1, #16
 80012d6:   4620        mov   r0, r4
 80012d8:   f001 f929   bl 800252e <FlashStart+0x252e>
 80012dc:   f44f 4040   mov.w r0, #49152  ; 0xc000
 80012e0:   f8ad 0004   strh.w   r0, [sp, #4]
 80012e4:   f44f 7082   mov.w r0, #260 ; 0x104
 80012e8:   f8ad 0006   strh.w   r0, [sp, #6]
 80012ec:   2000        movs  r0, #0
 80012ee:   9002        str   r0, [sp, #8]
 80012f0:   f8ad 000c   strh.w   r0, [sp, #12]
 80012f4:   f44f 7000   mov.w r0, #512 ; 0x200
 80012f8:   f8ad 000e   strh.w   r0, [sp, #14]
 80012fc:   2008        movs  r0, #8
 80012fe:   f8ad 0010   strh.w   r0, [sp, #16]
 8001302:   2000        movs  r0, #0
 8001304:   f8ad 0012   strh.w   r0, [sp, #18]
 8001308:   2007        movs  r0, #7
 800130a:   f8ad 0014   strh.w   r0, [sp, #20]
 800130e:   4c1f        ldr   r4, =0x40013000    ; { SPI1 } | [pc, #124] ; (800138c <FlashStart+0x138c>)
 8001310:   a901        add   r1, sp, #4
 8001312:   4620        mov   r0, r4
 8001314:   f001 fae2   bl 80028dc <FlashStart+0x28dc>
 8001318:   2101        movs  r1, #1
 800131a:   4620        mov   r0, r4
 800131c:   f001 fafa   bl 8002914 <FlashStart+0x2914>
 8001320:   b006        add   sp, #24
 8001322:   bd10        pop   {r4, pc}

.pool
 8001324:   40011000    GPIO Port C
 8001328:   40011400    GPIO Port D
 800132c:   40010c00    GPIO Port B
 8001330:   40010800    GPIO Port A


FUNCTION:   TODO_8001334
 8001334:   a900        add   r1, sp, #0
 8001336:   4620        mov   r0, r4
 8001338:   f001 b894   b.w   8002464 <FlashStart+0x2464>

FUNCTION:   TODO_800133c
 800133c:   f8ad 0000   strh.w   r0, [sp]
 8001340:   2010        movs  r0, #16

FUNCTION:   TODO_8001342
 8001342:   f88d 0003   strb.w   r0, [sp, #3]
 8001346:   2003        movs  r0, #3
 8001348:   f88d 0002   strb.w   r0, [sp, #2]
 800134c:   4770        bx lr

FUNCTION:   TODO_800134e
 800134e:   b538        push  {r3, r4, r5, lr}
 8001350:   4604        mov   r4, r0
 8001352:   4d0e        ldr   r5, =0x40013000    ; { SPI1 } | [pc, #56]  ; (800138c <FlashStart+0x138c>)
 8001354:   2102        movs  r1, #2
 8001356:   4628        mov   r0, r5
 8001358:   f001 fae8   bl 800292c <FlashStart+0x292c>
 800135c:   2800        cmp   r0, #0
 800135e:   d0f9        beq.n 8001354 <FlashStart+0x1354>
 8001360:   4621        mov   r1, r4
 8001362:   4628        mov   r0, r5
 8001364:   e8bd 4034   ldmia.w  sp!, {r2, r4, r5, lr}
 8001368:   f001 bade   b.w   8002928 <FlashStart+0x2928>

FUNCTION:   TODO_800136c
 800136c:   b510        push  {r4, lr}
 800136e:   4c07        ldr   r4, =0x40013000    ; { SPI1 } | [pc, #28]  ; (800138c <FlashStart+0x138c>)
 8001370:   2102        movs  r1, #2
 8001372:   4620        mov   r0, r4
 8001374:   f001 fada   bl 800292c <FlashStart+0x292c>
 8001378:   2800        cmp   r0, #0
 800137a:   d0f9        beq.n 8001370 <FlashStart+0x1370>
 800137c:   2180        movs  r1, #128 ; 0x80
 800137e:   4620        mov   r0, r4
 8001380:   f001 fad4   bl 800292c <FlashStart+0x292c>
 8001384:   2801        cmp   r0, #1
 8001386:   d0f9        beq.n 800137c <FlashStart+0x137c>
 8001388:   bd10        pop   {r4, pc}
 800138a:   0000        movs  r0, r0

.pool
 800138c:   40013000    SPI1


FUNCTION:   TODO_8001390
 8001390:   b510        push  {r4, lr}
 8001392:   b086        sub   sp, #24
 8001394:   20c0        movs  r0, #192 ; 0xc0
 8001396:   f8ad 0000   strh.w   r0, [sp]
 800139a:   2003        movs  r0, #3
 800139c:   f88d 0002   strb.w   r0, [sp, #2]
 80013a0:   201c        movs  r0, #28
 80013a2:   f88d 0003   strb.w   r0, [sp, #3]
 80013a6:   a900        add   r1, sp, #0
 80013a8:   4816        ldr   r0, =0x40010c00    ; { GPIO Port B } | [pc, #88]  ; (8001404 <FlashStart+0x1404>)
 80013aa:   f001 f85b   bl 8002464 <FlashStart+0x2464>
 80013ae:   2101        movs  r1, #1
 80013b0:   f44f 1000   mov.w r0, #2097152   ; 0x200000
 80013b4:   f000 fb9e   bl 8001af4 <FlashStart+0x1af4>
 80013b8:   4c77        ldr   r4, =0x40005400    ; { I2C1 } | [pc, #476] ; (8001598 <FlashStart+0x1598>)
 80013ba:   2101        movs  r1, #1
 80013bc:   4620        mov   r0, r4
 80013be:   f000 fa83   bl 80018c8 <FlashStart+0x18c8>
 80013c2:   4620        mov   r0, r4
 80013c4:   f000 fa0a   bl 80017dc <FlashStart+0x17dc>
 80013c8:   2000        movs  r0, #0
 80013ca:   f8ad 0008   strh.w   r0, [sp, #8]
 80013ce:   f64b 70ff   movw  r0, #49151  ; 0xbfff
 80013d2:   f8ad 000a   strh.w   r0, [sp, #10]
 80013d6:   2030        movs  r0, #48  ; 0x30
 80013d8:   f8ad 000c   strh.w   r0, [sp, #12]
 80013dc:   f44f 6080   mov.w r0, #1024   ; 0x400
 80013e0:   f8ad 000e   strh.w   r0, [sp, #14]
 80013e4:   f44f 4080   mov.w r0, #16384  ; 0x4000
 80013e8:   f8ad 0010   strh.w   r0, [sp, #16]
 80013ec:   f24c 3050   movw  r0, #50000  ; 0xc350
 80013f0:   9001        str   r0, [sp, #4]
 80013f2:   a901        add   r1, sp, #4
 80013f4:   4620        mov   r0, r4
 80013f6:   f000 fa0d   bl 8001814 <FlashStart+0x1814>
 80013fa:   4866        ldr   r0, =0x2000088a    ; { RAM (bss) } | [pc, #408] ; (8001594 <FlashStart+0x1594>)
 80013fc:   2101        movs  r1, #1
 80013fe:   7001        strb  r1, [r0, #0]
 8001400:   b006        add   sp, #24
 8001402:   bd10        pop   {r4, pc}

.pool
 8001404:   40010c00    GPIO Port B


FUNCTION:   TODO_8001408
 8001408:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
 800140c:   4605        mov   r5, r0
 800140e:   460e        mov   r6, r1
 8001410:   4617        mov   r7, r2
 8001412:   4860        ldr   r0, =0x2000088a    ; { RAM (bss) } | [pc, #384] ; (8001594 <FlashStart+0x1594>)
 8001414:   7800        ldrb  r0, [r0, #0]
 8001416:   b908        cbnz  r0, 800141c <FlashStart+0x141c>
 8001418:   f7ff ffba   bl 8001390 <FlashStart+0x1390>
 800141c:   f8df 8178   ldr.w r8, =0x40005400    ; { I2C1 } | [pc, #376] ; 8001598 <FlashStart+0x1598>
 8001420:   f44f 3100   mov.w r1, #131072 ; 0x20000
 8001424:   4640        mov   r0, r8
 8001426:   f000 fa99   bl 800195c <FlashStart+0x195c>
 800142a:   2800        cmp   r0, #0
 800142c:   d1f6        bne.n 800141c <FlashStart+0x141c>
 800142e:   4c27        ldr   r4, =0x10000040    ; [pc, #156] ; (80014cc <FlashStart+0x14cc>)
 8001430:   4621        mov   r1, r4
 8001432:   4640        mov   r0, r8
 8001434:   f000 fa92   bl 800195c <FlashStart+0x195c>
 8001438:   b138        cbz   r0, 800144a <FlashStart+0x144a>
 800143a:   4640        mov   r0, r8
 800143c:   f000 fa70   bl 8001920 <FlashStart+0x1920>
 8001440:   4621        mov   r1, r4
 8001442:   4640        mov   r0, r8
 8001444:   f000 faa4   bl 8001990 <FlashStart+0x1990>
 8001448:   e7f1        b.n   800142e <FlashStart+0x142e>
 800144a:   2101        movs  r1, #1
 800144c:   4640        mov   r0, r8
 800144e:   f000 fa5b   bl 8001908 <FlashStart+0x1908>
 8001452:   2101        movs  r1, #1
 8001454:   4640        mov   r0, r8
 8001456:   f000 fa41   bl 80018dc <FlashStart+0x18dc>
 800145a:   4950        ldr   r1, =0x30001    ; [pc, #320] ; (800159c <FlashStart+0x159c>)
 800145c:   f000 f83d   bl 80014da <FlashStart+0x14da>
 8001460:   2800        cmp   r0, #0
 8001462:   d0fa        beq.n 800145a <FlashStart+0x145a>
 8001464:   2200        movs  r2, #0
 8001466:   0079        lsls  r1, r7, #1
 8001468:   b2c9        uxtb  r1, r1
 800146a:   4640        mov   r0, r8
 800146c:   f000 fa5b   bl 8001926 <FlashStart+0x1926>
 8001470:   4917        ldr   r1, =0x70082    ; [pc, #92]  ; (80014d0 <FlashStart+0x14d0>)
 8001472:   f000 f832   bl 80014da <FlashStart+0x14da>
 8001476:   2800        cmp   r0, #0
 8001478:   d0fa        beq.n 8001470 <FlashStart+0x1470>
 800147a:   2100        movs  r1, #0
 800147c:   4640        mov   r0, r8
 800147e:   f000 fa4d   bl 800191c <FlashStart+0x191c>
 8001482:   4c14        ldr   r4, =0x70084    ; [pc, #80]  ; (80014d4 <FlashStart+0x14d4>)
 8001484:   f000 f828   bl 80014d8 <FlashStart+0x14d8>
 8001488:   2800        cmp   r0, #0
 800148a:   d0fb        beq.n 8001484 <FlashStart+0x1484>
 800148c:   2700        movs  r7, #0
 800148e:   e014        b.n   80014ba <FlashStart+0x14ba>
 8001490:   f835 0017   ldrh.w   r0, [r5, r7, lsl #1]
 8001494:   0a01        lsrs  r1, r0, #8
 8001496:   4640        mov   r0, r8
 8001498:   f000 fa40   bl 800191c <FlashStart+0x191c>
 800149c:   f000 f81c   bl 80014d8 <FlashStart+0x14d8>
 80014a0:   2800        cmp   r0, #0
 80014a2:   d0fb        beq.n 800149c <FlashStart+0x149c>
 80014a4:   f835 1017   ldrh.w   r1, [r5, r7, lsl #1]
 80014a8:   b2c9        uxtb  r1, r1
 80014aa:   4640        mov   r0, r8
 80014ac:   f000 fa36   bl 800191c <FlashStart+0x191c>
 80014b0:   f000 f812   bl 80014d8 <FlashStart+0x14d8>
 80014b4:   2800        cmp   r0, #0
 80014b6:   d0fb        beq.n 80014b0 <FlashStart+0x14b0>
 80014b8:   1c7f        adds  r7, r7, #1
 80014ba:   42b7        cmp   r7, r6
 80014bc:   dbe8        blt.n 8001490 <FlashStart+0x1490>
 80014be:   2101        movs  r1, #1
 80014c0:   4640        mov   r0, r8
 80014c2:   f000 fa16   bl 80018f2 <FlashStart+0x18f2>
 80014c6:   2001        movs  r0, #1
 80014c8:   e8bd 81f0   ldmia.w  sp!, {r4, r5, r6, r7, r8, pc}

.pool
 80014cc:   10000040
 80014d0:   00070082
 80014d4:   00070084


FUNCTION:   TODO_80014d8
 80014d8:   4621        mov   r1, r4

FUNCTION:   TODO_80014da
 80014da:   4640        mov   r0, r8
 80014dc:   f000 ba32   b.w   8001944 <FlashStart+0x1944>
 80014e0:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
 80014e4:   b082        sub   sp, #8
 80014e6:   4680        mov   r8, r0
 80014e8:   460e        mov   r6, r1
 80014ea:   4614        mov   r4, r2
 80014ec:   4829        ldr   r0, =0x2000088a    ; { RAM (bss) } | [pc, #164] ; (8001594 <FlashStart+0x1594>)
 80014ee:   7800        ldrb  r0, [r0, #0]
 80014f0:   b908        cbnz  r0, 80014f6 <FlashStart+0x14f6>
 80014f2:   f7ff ff4d   bl 8001390 <FlashStart+0x1390>
 80014f6:   4f28        ldr   r7, =0x40005400    ; { I2C1 } | [pc, #160] ; (8001598 <FlashStart+0x1598>)
 80014f8:   2101        movs  r1, #1
 80014fa:   4638        mov   r0, r7
 80014fc:   f000 f9ee   bl 80018dc <FlashStart+0x18dc>
 8001500:   4926        ldr   r1, =0x30001    ; [pc, #152] ; (800159c <FlashStart+0x159c>)
 8001502:   f000 f855   bl 80015b0 <FlashStart+0x15b0>
 8001506:   2800        cmp   r0, #0
 8001508:   d0fa        beq.n 8001500 <FlashStart+0x1500>
 800150a:   2201        movs  r2, #1
 800150c:   0061        lsls  r1, r4, #1
 800150e:   b2c9        uxtb  r1, r1
 8001510:   4638        mov   r0, r7
 8001512:   f000 fa08   bl 8001926 <FlashStart+0x1926>
 8001516:   f640 4001   movw  r0, #3073   ; 0xc01
 800151a:   8038        strh  r0, [r7, #0]
 800151c:   491b        ldr   r1, =0x10000002    ; [pc, #108] ; (800158c <FlashStart+0x158c>)
 800151e:   4638        mov   r0, r7
 8001520:   f000 fa1c   bl 800195c <FlashStart+0x195c>
 8001524:   2800        cmp   r0, #0
 8001526:   d0f9        beq.n 800151c <FlashStart+0x151c>
 8001528:   8b38        ldrh  r0, [r7, #24]
 800152a:   9000        str   r0, [sp, #0]
 800152c:   2500        movs  r5, #0
 800152e:   2e02        cmp   r6, #2
 8001530:   d312        bcc.n 8001558 <FlashStart+0x1558>
 8001532:   4c17        ldr   r4, =0x30040    ; [pc, #92]  ; (8001590 <FlashStart+0x1590>)
 8001534:   f000 f83b   bl 80015ae <FlashStart+0x15ae>
 8001538:   2800        cmp   r0, #0
 800153a:   d0fa        beq.n 8001532 <FlashStart+0x1532>
 800153c:   8a38        ldrh  r0, [r7, #16]
 800153e:   0200        lsls  r0, r0, #8
 8001540:   f828 0015   strh.w   r0, [r8, r5, lsl #1]
 8001544:   f000 f833   bl 80015ae <FlashStart+0x15ae>
 8001548:   2800        cmp   r0, #0
 800154a:   d0fb        beq.n 8001544 <FlashStart+0x1544>
 800154c:   f000 f828   bl 80015a0 <FlashStart+0x15a0>
 8001550:   1c6d        adds  r5, r5, #1
 8001552:   1e70        subs  r0, r6, #1
 8001554:   4285        cmp   r5, r0
 8001556:   d3ec        bcc.n 8001532 <FlashStart+0x1532>
 8001558:   2100        movs  r1, #0
 800155a:   4638        mov   r0, r7
 800155c:   f000 f9d4   bl 8001908 <FlashStart+0x1908>
 8001560:   4638        mov   r0, r7
 8001562:   f000 f9e8   bl 8001936 <FlashStart+0x1936>
 8001566:   0740        lsls  r0, r0, #29
 8001568:   d5fa        bpl.n 8001560 <FlashStart+0x1560>
 800156a:   2101        movs  r1, #1
 800156c:   4638        mov   r0, r7
 800156e:   f000 f9c0   bl 80018f2 <FlashStart+0x18f2>
 8001572:   8a38        ldrh  r0, [r7, #16]
 8001574:   0200        lsls  r0, r0, #8
 8001576:   f828 0015   strh.w   r0, [r8, r5, lsl #1]
 800157a:   f000 f811   bl 80015a0 <FlashStart+0x15a0>
 800157e:   f240 4001   movw  r0, #1025   ; 0x401
 8001582:   8038        strh  r0, [r7, #0]
 8001584:   2001        movs  r0, #1
 8001586:   e8bd 81f6   ldmia.w  sp!, {r1, r2, r4, r5, r6, r7, r8, pc}
 800158a:   bf00        nop

.pool
 800158c:   10000002
 8001590:   00030040
 8001594:   2000088a    RAM (bss)
 8001598:   40005400    I2C1
 800159c:   00030001


FUNCTION:   TODO_80015a0
 80015a0:   f838 0015   ldrh.w   r0, [r8, r5, lsl #1]
 80015a4:   8a39        ldrh  r1, [r7, #16]
 80015a6:   4308        orrs  r0, r1
 80015a8:   f828 0015   strh.w   r0, [r8, r5, lsl #1]
 80015ac:   4770        bx lr

FUNCTION:   TODO_80015ae
 80015ae:   4621        mov   r1, r4

FUNCTION:   TODO_80015b0
 80015b0:   4638        mov   r0, r7
 80015b2:   f000 b9c7   b.w   8001944 <FlashStart+0x1944>
 80015b6:   0000        movs  r0, r0

FUNCTION:   TODO_80015b8
 80015b8:   e92d 4ff0   stmdb sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015bc:   b083        sub   sp, #12                    ; 18 bytes of local variables
 80015be:   2501        movs  r5, #1
 80015c0:   2101        movs  r1, #1
 80015c2:   201c        movs  r0, #28
 80015c4:   f000 fa8a   bl 8001adc <FlashStart+0x1adc>   ; Enable_APB2_Peripherals -> enable I/O port A, B, C

Set PC13 as input (floating)

 80015c8:   f44f 5000   mov.w r0, #8192   ; 0x2000
 80015cc:   f8ad 0004   strh.w   r0, [sp, #4]            ; 16-bit local variable @sp+4 = 0x2000
 80015d0:   2004        movs  r0, #4
 80015d2:   f000 f8ed   bl 80017b0 <FlashStart+0x17b0>   ; Initialise Setup_GPIO_t -> sp+7 = LSB(r0), sp+6=0x03
 80015d6:   f8df 91ac   ldr.w r9, =0x40011000    ; { GPIO Port C } | [pc, #428] ; 8001784 <FlashStart+0x1784>
 80015da:   a901        add   r1, sp, #4
 80015dc:   4648        mov   r0, r9
 80015de:   f000 ff41   bl 8002464 <FlashStart+0x2464>   ; Set_GPIO_Configuration

Set PA10 as output (push-pull) and output high

 80015e2:   f44f 6080   mov.w r0, #1024   ; 0x400
 80015e6:   f8ad 0004   strh.w   r0, [sp, #4]
 80015ea:   f000 f8e0   bl 80017ae <FlashStart+0x17ae>
 80015ee:   f8df b198   ldr.w fp, =0x40010800    ; { GPIO Port A } | [pc, #408] ; 8001788 <FlashStart+0x1788>
 80015f2:   a901        add   r1, sp, #4
 80015f4:   4658        mov   r0, fp
 80015f6:   f000 ff35   bl 8002464 <FlashStart+0x2464>   ; Set_GPIO_Configuration

 80015fa:   f44f 6180   mov.w r1, #1024   ; 0x400
 80015fe:   4658        mov   r0, fp
 8001600:   f000 ff95   bl 800252e <FlashStart+0x252e>   ; Write_BSRR

Set PA6 as input with pull-up
 
 8001604:   2040        movs  r0, #64  ; 0x40
 8001606:   f000 f8dd   bl 80017c4 <FlashStart+0x17c4>   ; setup for input with pull-up and jump to Set_GPIO_Configuration



 800160a:   4e60        ldr   r6, =0x20000830    ; { RAM (bss) } | [pc, #384] ; (800178c <FlashStart+0x178c>)
 800160c:   207e        movs  r0, #126 ; 0x7e
 800160e:   f000 fa89   bl 8001b24 <FlashStart+0x1b24>   ; Read_RCC_Control_Register_Bit - Read WWDGRSTF: Window watchdog reset flag
 8001612:   b920        cbnz  r0, 800161e <FlashStart+0x161e>
 8001614:   207d        movs  r0, #125 ; 0x7d
 8001616:   f000 fa85   bl 8001b24 <FlashStart+0x1b24>   ; Read_RCC_Control_Register_Bit - Read IWDGRSTF: Independent watchdog reset flag
 800161a:   2800        cmp   r0, #0
 800161c:   d03c        beq.n 8001698 <FlashStart+0x1698> ; Jump if result 0
 
; The following code is executed if the CPU was reset by a watchdog (either window or independent)
 
 800161e:   485c        ldr   r0, =0x8003000    ; { Flash } | [pc, #368] ; (8001790 <FlashStart+0x1790>)
 8001620:   6801        ldr   r1, [r0, #0]
 8001622:   4a5c        ldr   r2, =0x2ffe0000    ; [pc, #368] ; (8001794 <FlashStart+0x1794>)
 8001624:   4011        ands  r1, r2
 8001626:   f1b1 5f00   cmp.w r1, #536870912 ; 0x20000000
 800162a:   d107        bne.n 800163c <FlashStart+0x163c>
 800162c:   6841        ldr   r1, [r0, #4]
 800162e:   6131        str   r1, [r6, #16]
 8001630:   60f1        str   r1, [r6, #12]
 8001632:   6800        ldr   r0, [r0, #0]
 8001634:   f001 fae6   bl 8002c04 <FlashStart+0x2c04>
 8001638:   68f0        ldr   r0, [r6, #12]
 800163a:   4780        blx   r0
 800163c:   2002        movs  r0, #2
 800163e:   7230        strb  r0, [r6, #8]
 8001640:   2000        movs  r0, #0
 8001642:   7030        strb  r0, [r6, #0]
 8001644:   2002        movs  r0, #2
 8001646:   7130        strb  r0, [r6, #4]
 8001648:   f000 fa82   bl 8001b50 <FlashStart+0x1b50>
 800164c:   f000 fab2   bl 8001bb4 <FlashStart+0x1bb4>
 8001650:   f000 f8a8   bl 80017a4 <FlashStart+0x17a4>
 8001654:   f001 fa2e   bl 8002ab4 <FlashStart+0x2ab4>
 8001658:   b115        cbz   r5, 8001660 <FlashStart+0x1660>
 800165a:   f001 f96f   bl 800293c <FlashStart+0x293c>
 800165e:   2500        movs  r5, #0
 8001660:   4f4d        ldr   r7, =0x800219c    ; { Flash } | [pc, #308] ; (8001798 <FlashStart+0x1798>)
 8001662:   9700        str   r7, [sp, #0]
 8001664:   234e        movs  r3, #78  ; 0x4e
 8001666:   2219        movs  r2, #25
 8001668:   2119        movs  r1, #25
 800166a:   200f        movs  r0, #15
 800166c:   f001 f968   bl 8002940 <FlashStart+0x2940>
 8001670:   f107 00f4   add.w r0, r7, #244   ; 0xf4
 8001674:   9000        str   r0, [sp, #0]
 8001676:   230b        movs  r3, #11
 8001678:   221b        movs  r2, #27
 800167a:   212d        movs  r1, #45  ; 0x2d
 800167c:   2041        movs  r0, #65  ; 0x41
 800167e:   f001 f95f   bl 8002940 <FlashStart+0x2940>
 8001682:   f000 f89b   bl 80017bc <FlashStart+0x17bc>
 8001686:   2800        cmp   r0, #0
 8001688:   d0fb        beq.n 8001682 <FlashStart+0x1682>
 800168a:   f000 f88b   bl 80017a4 <FlashStart+0x17a4>
 800168e:   f000 f895   bl 80017bc <FlashStart+0x17bc>
 8001692:   2800        cmp   r0, #0
 8001694:   d1fb        bne.n 800168e <FlashStart+0x168e>
 8001696:   e7d1        b.n   800163c <FlashStart+0x163c>

; Rejoin here if there was no previous watchdog reset

 8001698:   f000 f890   bl 80017bc <FlashStart+0x17bc>
 800169c:   2800        cmp   r0, #0
 800169e:   d1be        bne.n 800161e <FlashStart+0x161e>
 80016a0:   f000 f885   bl 80017ae <FlashStart+0x17ae>
 80016a4:   2002        movs  r0, #2
 80016a6:   f8ad 0004   strh.w   r0, [sp, #4]
 80016aa:   a901        add   r1, sp, #4
 80016ac:   4658        mov   r0, fp
 80016ae:   f000 fed9   bl 8002464 <FlashStart+0x2464>
 80016b2:   2020        movs  r0, #32
 80016b4:   f8ad 0004   strh.w   r0, [sp, #4]
 80016b8:   f8df a0e4   ldr.w sl, =0x40010c00    ; { GPIO Port B } | [pc, #228] ; 80017a0 <FlashStart+0x17a0>
 80016bc:   a901        add   r1, sp, #4
 80016be:   4650        mov   r0, sl
 80016c0:   f000 fed0   bl 8002464 <FlashStart+0x2464>
 80016c4:   2002        movs  r0, #2
 80016c6:   f000 f87d   bl 80017c4 <FlashStart+0x17c4>
 80016ca:   f7ff fe61   bl 8001390 <FlashStart+0x1390>
 80016ce:   4833        ldr   r0, =0x20000844    ; { RAM (bss) } | [pc, #204] ; (800179c <FlashStart+0x179c>)
 80016d0:   2100        movs  r1, #0
 80016d2:   8001        strh  r1, [r0, #0]
 80016d4:   2700        movs  r7, #0
 80016d6:   4688        mov   r8, r1
 80016d8:   460c        mov   r4, r1
 80016da:   e002        b.n   80016e2 <FlashStart+0x16e2>
 80016dc:   2700        movs  r7, #0
 80016de:   46b8        mov   r8, r7
 80016e0:   2400        movs  r4, #0
 80016e2:   2102        movs  r1, #2
 80016e4:   4648        mov   r0, r9
 80016e6:   f000 ff1a   bl 800251e <FlashStart+0x251e>
 80016ea:   b940        cbnz  r0, 80016fe <FlashStart+0x16fe>
 80016ec:   2102        movs  r1, #2
 80016ee:   4658        mov   r0, fp
 80016f0:   f000 ff1f   bl 8002532 <FlashStart+0x2532>
 80016f4:   2120        movs  r1, #32
 80016f6:   4650        mov   r0, sl
 80016f8:   f000 ff19   bl 800252e <FlashStart+0x252e>
 80016fc:   e007        b.n   800170e <FlashStart+0x170e>
 80016fe:   2102        movs  r1, #2
 8001700:   4658        mov   r0, fp
 8001702:   f000 ff14   bl 800252e <FlashStart+0x252e>
 8001706:   2120        movs  r1, #32
 8001708:   4650        mov   r0, sl
 800170a:   f000 ff12   bl 8002532 <FlashStart+0x2532>
 800170e:   f000 f855   bl 80017bc <FlashStart+0x17bc>
 8001712:   b110        cbz   r0, 800171a <FlashStart+0x171a>
 8001714:   f001 f995   bl 8002a42 <FlashStart+0x2a42>
 8001718:   e7fe        b.n   8001718 <FlashStart+0x1718>
 800171a:   f44f 5100   mov.w r1, #8192   ; 0x2000
 800171e:   4648        mov   r0, r9
 8001720:   f000 fefd   bl 800251e <FlashStart+0x251e>
 8001724:   b128        cbz   r0, 8001732 <FlashStart+0x1732>
 8001726:   b904        cbnz  r4, 800172a <FlashStart+0x172a>
 8001728:   2401        movs  r4, #1
 800172a:   f001 f995   bl 8002a58 <FlashStart+0x2a58>
 800172e:   f001 f991   bl 8002a54 <FlashStart+0x2a54>
 8001732:   2c00        cmp   r4, #0
 8001734:   d0d5        beq.n 80016e2 <FlashStart+0x16e2>
 8001736:   1c64        adds  r4, r4, #1
 8001738:   4818        ldr   r0, =0x20000844    ; { RAM (bss) } | [pc, #96]  ; (800179c <FlashStart+0x179c>)
 800173a:   8800        ldrh  r0, [r0, #0]
 800173c:   0681        lsls  r1, r0, #26
 800173e:   d501        bpl.n 8001744 <FlashStart+0x1744>
 8001740:   1c7f        adds  r7, r7, #1
 8001742:   2401        movs  r4, #1
 8001744:   06c0        lsls  r0, r0, #27
 8001746:   d502        bpl.n 800174e <FlashStart+0x174e>
 8001748:   f108 0801   add.w r8, r8, #1
 800174c:   2401        movs  r4, #1
 800174e:   f242 7010   movw  r0, #10000  ; 0x2710
 8001752:   9000        str   r0, [sp, #0]
 8001754:   9800        ldr   r0, [sp, #0]
 8001756:   1e41        subs  r1, r0, #1
 8001758:   9100        str   r1, [sp, #0]
 800175a:   2800        cmp   r0, #0
 800175c:   d1fa        bne.n 8001754 <FlashStart+0x1754>
 800175e:   2c0b        cmp   r4, #11
 8001760:   d2bc        bcs.n 80016dc <FlashStart+0x16dc>
 8001762:   2f15        cmp   r7, #21
 8001764:   d3bd        bcc.n 80016e2 <FlashStart+0x16e2>
 8001766:   45b8        cmp   r8, r7
 8001768:   d204        bcs.n 8001774 <FlashStart+0x1774>
 800176a:   eba7 0008   sub.w r0, r7, r8
 800176e:   2806        cmp   r0, #6
 8001770:   f4bf af55   bcs.w 800161e <FlashStart+0x161e>
 8001774:   f5b7 7f96   cmp.w r7, #300 ; 0x12c
 8001778:   d9b3        bls.n 80016e2 <FlashStart+0x16e2>
 800177a:   f5b8 7f96   cmp.w r8, #300 ; 0x12c
 800177e:   d9b0        bls.n 80016e2 <FlashStart+0x16e2>
 8001780:   e75c        b.n   800163c <FlashStart+0x163c>
 8001782:   bf00        nop

.pool
 8001784:   40011000    GPIO Port C
 8001788:   40010800    GPIO Port A
 800178c:   20000830    RAM (bss)
 8001790:   08003000    Flash
 8001794:   2ffe0000
 8001798:   0800219c    Flash
 800179c:   20000844    RAM (bss)
 80017a0:   40010c00    GPIO Port B


FUNCTION:   TODO_80017a4
 80017a4:   f44f 6180   mov.w r1, #1024   ; 0x400
 80017a8:   4658        mov   r0, fp
 80017aa:   f000 bec2   b.w   8002532 <FlashStart+0x2532>

FUNCTION:   Initialise GPIO_Setup_t mode and mode_2 for output, push-pull, 50MHz
 80017ae:   2010        movs  r0, #16

FUNCTION:   Initialise GPIO_Setup_t mode as specified in LSB(r0), mode_2 as #3
 80017b0:   f88d 0007   strb.w   r0, [sp, #7]
 80017b4:   2003        movs  r0, #3
 80017b6:   f88d 0006   strb.w   r0, [sp, #6]
 80017ba:   4770        bx lr

FUNCTION:   TODO_80017bc
 80017bc:   2140        movs  r1, #64  ; 0x40
 80017be:   4648        mov   r0, r9
 80017c0:   f000 bead   b.w   800251e <FlashStart+0x251e>

FUNCTION:   Setup GPIO as input with pull-up
 80017c4:   f8ad 0004   strh.w   r0, [sp, #4]
 80017c8:   2048        movs  r0, #72  ; 0x48
 80017ca:   f88d 0007   strb.w   r0, [sp, #7]
 80017ce:   2003        movs  r0, #3
 80017d0:   f88d 0006   strb.w   r0, [sp, #6]
 80017d4:   a901        add   r1, sp, #4
 80017d6:   4648        mov   r0, r9
 80017d8:   f000 be44   b.w   8002464 <FlashStart+0x2464>

FUNCTION:   TODO_80017dc
 80017dc:   b580        push  {r7, lr}
 80017de:   490c        ldr   r1, =0x40005400    ; { I2C1 } | [pc, #48]  ; (8001810 <FlashStart+0x1810>)
 80017e0:   4288        cmp   r0, r1
 80017e2:   d108        bne.n 80017f6 <FlashStart+0x17f6>
 80017e4:   2101        movs  r1, #1
 80017e6:   f44f 1000   mov.w r0, #2097152   ; 0x200000
 80017ea:   f000 f98f   bl 8001b0c <FlashStart+0x1b0c>
 80017ee:   2100        movs  r1, #0
 80017f0:   f44f 1000   mov.w r0, #2097152   ; 0x200000
 80017f4:   e007        b.n   8001806 <FlashStart+0x1806>
 80017f6:   2101        movs  r1, #1
 80017f8:   f44f 0080   mov.w r0, #4194304   ; 0x400000
 80017fc:   f000 f986   bl 8001b0c <FlashStart+0x1b0c>
 8001800:   2100        movs  r1, #0
 8001802:   f44f 0080   mov.w r0, #4194304   ; 0x400000
 8001806:   e8bd 4004   ldmia.w  sp!, {r2, lr}
 800180a:   f000 b97f   b.w   8001b0c <FlashStart+0x1b0c>
 800180e:   bf00        nop

.pool
 8001810:   40005400    I2C1


FUNCTION:   TODO_8001814
 8001814:   b570        push  {r4, r5, r6, lr}
 8001816:   b086        sub   sp, #24
 8001818:   4605        mov   r5, r0
 800181a:   460c        mov   r4, r1
 800181c:   88ae        ldrh  r6, [r5, #4]
 800181e:   a800        add   r0, sp, #0
 8001820:   f000 f90a   bl 8001a38 <FlashStart+0x1a38>
 8001824:   9902        ldr   r1, [sp, #8]
 8001826:   4826        ldr   r0, =0xf4240    ; [pc, #152] ; (80018c0 <FlashStart+0x18c0>)
 8001828:   fbb1 f0f0   udiv  r0, r1, r0
 800182c:   b280        uxth  r0, r0
 800182e:   f64f 72c0   movw  r2, #65472  ; 0xffc0
 8001832:   4032        ands  r2, r6
 8001834:   4302        orrs  r2, r0
 8001836:   80aa        strh  r2, [r5, #4]
 8001838:   882a        ldrh  r2, [r5, #0]
 800183a:   f64f 73fe   movw  r3, #65534  ; 0xfffe
 800183e:   401a        ands  r2, r3
 8001840:   802a        strh  r2, [r5, #0]
 8001842:   6822        ldr   r2, [r4, #0]
 8001844:   4b1f        ldr   r3, =0x186a1    ; [pc, #124] ; (80018c4 <FlashStart+0x18c4>)
 8001846:   429a        cmp   r2, r3
 8001848:   d207        bcs.n 800185a <FlashStart+0x185a>
 800184a:   0052        lsls  r2, r2, #1
 800184c:   fbb1 f1f2   udiv  r1, r1, r2
 8001850:   b289        uxth  r1, r1
 8001852:   2904        cmp   r1, #4
 8001854:   d21e        bcs.n 8001894 <FlashStart+0x1894>
 8001856:   2104        movs  r1, #4
 8001858:   e01c        b.n   8001894 <FlashStart+0x1894>
 800185a:   88e3        ldrh  r3, [r4, #6]
 800185c:   f64b 76ff   movw  r6, #49151  ; 0xbfff
 8001860:   42b3        cmp   r3, r6
 8001862:   d104        bne.n 800186e <FlashStart+0x186e>
 8001864:   eb02 0242   add.w r2, r2, r2, lsl #1
 8001868:   fbb1 f1f2   udiv  r1, r1, r2
 800186c:   e005        b.n   800187a <FlashStart+0x187a>
 800186e:   2319        movs  r3, #25
 8001870:   435a        muls  r2, r3
 8001872:   fbb1 f1f2   udiv  r1, r1, r2
 8001876:   f441 4180   orr.w r1, r1, #16384 ; 0x4000
 800187a:   050a        lsls  r2, r1, #20
 800187c:   d101        bne.n 8001882 <FlashStart+0x1882>
 800187e:   f041 0101   orr.w r1, r1, #1
 8001882:   f441 4100   orr.w r1, r1, #32768 ; 0x8000
 8001886:   f44f 7296   mov.w r2, #300 ; 0x12c
 800188a:   4350        muls  r0, r2
 800188c:   f44f 727a   mov.w r2, #1000   ; 0x3e8
 8001890:   fb90 f0f2   sdiv  r0, r0, r2
 8001894:   1c40        adds  r0, r0, #1
 8001896:   8428        strh  r0, [r5, #32]
 8001898:   83a9        strh  r1, [r5, #28]
 800189a:   8828        ldrh  r0, [r5, #0]
 800189c:   f040 0001   orr.w r0, r0, #1
 80018a0:   8028        strh  r0, [r5, #0]
 80018a2:   8828        ldrh  r0, [r5, #0]
 80018a4:   f64f 31f5   movw  r1, #64501  ; 0xfbf5
 80018a8:   4008        ands  r0, r1
 80018aa:   88a1        ldrh  r1, [r4, #4]
 80018ac:   4308        orrs  r0, r1
 80018ae:   8961        ldrh  r1, [r4, #10]
 80018b0:   4308        orrs  r0, r1
 80018b2:   8028        strh  r0, [r5, #0]
 80018b4:   89a0        ldrh  r0, [r4, #12]
 80018b6:   8921        ldrh  r1, [r4, #8]
 80018b8:   4308        orrs  r0, r1
 80018ba:   8128        strh  r0, [r5, #8]
 80018bc:   b006        add   sp, #24
 80018be:   bd70        pop   {r4, r5, r6, pc}

.pool
 80018c0:   000f4240
 80018c4:   000186a1


FUNCTION:   TODO_80018c8
 80018c8:   2900        cmp   r1, #0
 80018ca:   8801        ldrh  r1, [r0, #0]
 80018cc:   bf12        itee  ne
 80018ce:   f041 0101   orrne.w  r1, r1, #1
 80018d2:   f64f 72fe   movweq   r2, #65534  ; 0xfffe
 80018d6:   4011        andeq r1, r2
 80018d8:   8001        strh  r1, [r0, #0]
 80018da:   4770        bx lr

FUNCTION:   TODO_80018dc
 80018dc:   2900        cmp   r1, #0
 80018de:   8801        ldrh  r1, [r0, #0]
 80018e0:   bf19        ittee ne
 80018e2:   f44f 7280   movne.w  r2, #256 ; 0x100
 80018e6:   4311        orrne r1, r2
 80018e8:   f64f 62ff   movweq   r2, #65279  ; 0xfeff
 80018ec:   4011        andeq r1, r2
 80018ee:   8001        strh  r1, [r0, #0]
 80018f0:   4770        bx lr

FUNCTION:   TODO_80018f2
 80018f2:   2900        cmp   r1, #0
 80018f4:   8801        ldrh  r1, [r0, #0]
 80018f6:   bf19        ittee ne
 80018f8:   f44f 7200   movne.w  r2, #512 ; 0x200
 80018fc:   4311        orrne r1, r2
 80018fe:   f64f 52ff   movweq   r2, #65023  ; 0xfdff
 8001902:   4011        andeq r1, r2
 8001904:   8001        strh  r1, [r0, #0]
 8001906:   4770        bx lr

FUNCTION:   TODO_8001908
 8001908:   2900        cmp   r1, #0
 800190a:   8801        ldrh  r1, [r0, #0]
 800190c:   bf12        itee  ne
 800190e:   f441 6180   orrne.w  r1, r1, #1024  ; 0x400
 8001912:   f64f 32ff   movweq   r2, #64511  ; 0xfbff
 8001916:   4011        andeq r1, r2
 8001918:   8001        strh  r1, [r0, #0]
 800191a:   4770        bx lr

FUNCTION:   TODO_800191c
 800191c:   8201        strh  r1, [r0, #16]
 800191e:   4770        bx lr

FUNCTION:   TODO_8001920
 8001920:   8a00        ldrh  r0, [r0, #16]
 8001922:   b2c0        uxtb  r0, r0
 8001924:   4770        bx lr

FUNCTION:   TODO_8001926
 8001926:   2a00        cmp   r2, #0
 8001928:   bf14        ite   ne
 800192a:   f041 0101   orrne.w  r1, r1, #1
 800192e:   f001 01fe   andeq.w  r1, r1, #254   ; 0xfe
 8001932:   8201        strh  r1, [r0, #16]
 8001934:   4770        bx lr

FUNCTION:   TODO_8001936
 8001936:   8a81        ldrh  r1, [r0, #20]
 8001938:   8b00        ldrh  r0, [r0, #24]
 800193a:   ea41 4000   orr.w r0, r1, r0, lsl #16
 800193e:   0200        lsls  r0, r0, #8
 8001940:   0a00        lsrs  r0, r0, #8
 8001942:   4770        bx lr
 8001944:   8a82        ldrh  r2, [r0, #20]
 8001946:   8b00        ldrh  r0, [r0, #24]
 8001948:   ea42 4000   orr.w r0, r2, r0, lsl #16
 800194c:   0200        lsls  r0, r0, #8
 800194e:   0a00        lsrs  r0, r0, #8
 8001950:   4288        cmp   r0, r1
 8001952:   d101        bne.n 8001958 <FlashStart+0x1958>
 8001954:   2001        movs  r0, #1
 8001956:   4770        bx lr
 8001958:   2000        movs  r0, #0
 800195a:   4770        bx lr

FUNCTION:   TODO_800195c
 800195c:   b082        sub   sp, #8
 800195e:   2200        movs  r2, #0
 8001960:   9201        str   r2, [sp, #4]
 8001962:   9200        str   r2, [sp, #0]
 8001964:   9000        str   r0, [sp, #0]
 8001966:   0f08        lsrs  r0, r1, #28
 8001968:   9001        str   r0, [sp, #4]
 800196a:   0208        lsls  r0, r1, #8
 800196c:   0a00        lsrs  r0, r0, #8
 800196e:   9901        ldr   r1, [sp, #4]
 8001970:   b111        cbz   r1, 8001978 <FlashStart+0x1978>
 8001972:   9900        ldr   r1, [sp, #0]
 8001974:   3114        adds  r1, #20
 8001976:   e002        b.n   800197e <FlashStart+0x197e>
 8001978:   0c00        lsrs  r0, r0, #16
 800197a:   9900        ldr   r1, [sp, #0]
 800197c:   3118        adds  r1, #24
 800197e:   9100        str   r1, [sp, #0]
 8001980:   9900        ldr   r1, [sp, #0]
 8001982:   6809        ldr   r1, [r1, #0]
 8001984:   4008        ands  r0, r1
 8001986:   d000        beq.n 800198a <FlashStart+0x198a>
 8001988:   2001        movs  r0, #1
 800198a:   b2c0        uxtb  r0, r0
 800198c:   b002        add   sp, #8
 800198e:   4770        bx lr

FUNCTION:   TODO_8001990
 8001990:   e7ff        b.n   8001992 <FlashStart+0x1992>
 8001992:   43c9        mvns  r1, r1
 8001994:   8281        strh  r1, [r0, #20]
 8001996:   4770        bx lr

FUNCTION:   TODO_8001998
 8001998:   486c        ldr   r0, =0x40021000    ; { Reset and clock control RCC } | [pc, #432] ; (8001b4c <FlashStart+0x1b4c>)
 800199a:   6801        ldr   r1, [r0, #0]
 800199c:   f041 0101   orr.w r1, r1, #1
 80019a0:   6001        str   r1, [r0, #0]
 80019a2:   6841        ldr   r1, [r0, #4]
 80019a4:   4a09        ldr   r2, =0xf8ff0000    ; [pc, #36]  ; (80019cc <FlashStart+0x19cc>)
 80019a6:   4011        ands  r1, r2
 80019a8:   6041        str   r1, [r0, #4]
 80019aa:   6801        ldr   r1, [r0, #0]
 80019ac:   4a08        ldr   r2, =0xfef6ffff    ; [pc, #32]  ; (80019d0 <FlashStart+0x19d0>)
 80019ae:   4011        ands  r1, r2
 80019b0:   6001        str   r1, [r0, #0]
 80019b2:   6801        ldr   r1, [r0, #0]
 80019b4:   f421 2180   bic.w r1, r1, #262144   ; 0x40000
 80019b8:   6001        str   r1, [r0, #0]
 80019ba:   6841        ldr   r1, [r0, #4]
 80019bc:   f421 01fe   bic.w r1, r1, #8323072  ; 0x7f0000
 80019c0:   6041        str   r1, [r0, #4]
 80019c2:   f44f 011f   mov.w r1, #10420224  ; 0x9f0000
 80019c6:   6081        str   r1, [r0, #8]
 80019c8:   4770        bx lr
 80019ca:   bf00        nop

.pool
 80019cc:   f8ff0000
 80019d0:   fef6ffff


FUNCTION:   TODO_80019d4
 80019d4:   4a3a        ; <UNDEFINED> instruction
 80019d6:   6813        ldr   r3, [r2, #0]
 80019d8:   f423 137c   bic.w r3, r3, #4128768  ; 0x3f0000
 80019dc:   4318        orrs  r0, r3
 80019de:   4308        orrs  r0, r1
 80019e0:   6010        str   r0, [r2, #0]
 80019e2:   4770        bx lr

FUNCTION:   TODO_80019e4
 80019e4:   4901        ldr   r1, =0x42420060    ; [pc, #4]   ; (80019ec <FlashStart+0x19ec>)
 80019e6:   6008        str   r0, [r1, #0]
 80019e8:   4770        bx lr
 80019ea:   bf00        nop

.pool
 80019ec:   42420060


FUNCTION:   TODO_80019f0
 80019f0:   4933        ldr   r1, =0x40021004    ; { Reset and clock control RCC } | [pc, #204] ; (8001ac0 <FlashStart+0x1ac0>)
 80019f2:   680a        ldr   r2, [r1, #0]
 80019f4:   0892        lsrs  r2, r2, #2
 80019f6:   0092        lsls  r2, r2, #2
 80019f8:   e008        b.n   8001a0c <FlashStart+0x1a0c>

FUNCTION:   TODO_80019fa
 80019fa:   4831        ldr   r0, =0x40021004    ; { Reset and clock control RCC } | [pc, #196] ; (8001ac0 <FlashStart+0x1ac0>)
 80019fc:   6800        ldr   r0, [r0, #0]
 80019fe:   f000 000c   and.w r0, r0, #12
 8001a02:   4770        bx lr

FUNCTION:   TODO_8001a04
 8001a04:   492e        ldr   r1, =0x40021004    ; { Reset and clock control RCC } | [pc, #184] ; (8001ac0 <FlashStart+0x1ac0>)
 8001a06:   680a        ldr   r2, [r1, #0]
 8001a08:   f022 02f0   bic.w r2, r2, #240   ; 0xf0
 8001a0c:   4310        orrs  r0, r2
 8001a0e:   6008        str   r0, [r1, #0]
 8001a10:   4770        bx lr

FUNCTION:   TODO_8001a12
 8001a12:   492b        ldr   r1, =0x40021004    ; { Reset and clock control RCC } | [pc, #172] ; (8001ac0 <FlashStart+0x1ac0>)
 8001a14:   680a        ldr   r2, [r1, #0]
 8001a16:   f422 62e0   bic.w r2, r2, #1792  ; 0x700
 8001a1a:   e7f7        b.n   8001a0c <FlashStart+0x1a0c>

FUNCTION:   TODO_8001a1c
 8001a1c:   4928        ldr   r1, =0x40021004    ; { Reset and clock control RCC } | [pc, #160] ; (8001ac0 <FlashStart+0x1ac0>)
 8001a1e:   680a        ldr   r2, [r1, #0]
 8001a20:   f422 5260   bic.w r2, r2, #14336 ; 0x3800
 8001a24:   ea42 00c0   orr.w r0, r2, r0, lsl #3
 8001a28:   6008        str   r0, [r1, #0]
 8001a2a:   4770        bx lr

FUNCTION:   TODO_8001a2c
 8001a2c:   4901        ldr   r1, =0x424200d8    ; [pc, #4]   ; (8001a34 <FlashStart+0x1a34>)
 8001a2e:   6008        str   r0, [r1, #0]
 8001a30:   4770        bx lr
 8001a32:   bf00        nop

.pool
 8001a34:   424200d8


FUNCTION:   TODO_8001a38
 8001a38:   b530        push  {r4, r5, lr}
 8001a3a:   4921        ldr   r1, =0x40021004    ; { Reset and clock control RCC } | [pc, #132] ; (8001ac0 <FlashStart+0x1ac0>)
 8001a3c:   680b        ldr   r3, [r1, #0]
 8001a3e:   4a1d        ldr   r2, =0x7a1200    ; [pc, #116] ; (8001ab4 <FlashStart+0x1ab4>)
 8001a40:   f003 030c   and.w r3, r3, #12
 8001a44:   2b08        cmp   r3, #8
 8001a46:   d10f        bne.n 8001a68 <FlashStart+0x1a68>
 8001a48:   680b        ldr   r3, [r1, #0]
 8001a4a:   680c        ldr   r4, [r1, #0]
 8001a4c:   f403 1370   and.w r3, r3, #3932160  ; 0x3c0000
 8001a50:   0c9b        lsrs  r3, r3, #18
 8001a52:   1c9b        adds  r3, r3, #2
 8001a54:   4d18        ldr   r5, =0x3d0900    ; [pc, #96]  ; (8001ab8 <FlashStart+0x1ab8>)
 8001a56:   435d        muls  r5, r3
 8001a58:   03e4        lsls  r4, r4, #15
 8001a5a:   d401        bmi.n 8001a60 <FlashStart+0x1a60>
 8001a5c:   462a        mov   r2, r5
 8001a5e:   e003        b.n   8001a68 <FlashStart+0x1a68>
 8001a60:   680c        ldr   r4, [r1, #0]
 8001a62:   03a4        lsls  r4, r4, #14
 8001a64:   d4fa        bmi.n 8001a5c <FlashStart+0x1a5c>
 8001a66:   435a        muls  r2, r3
 8001a68:   6002        str   r2, [r0, #0]
 8001a6a:   680b        ldr   r3, [r1, #0]
 8001a6c:   4a13        ldr   r2, =0x20000a8c    ; { RAM (data) } | [pc, #76]  ; (8001abc <FlashStart+0x1abc>)
 8001a6e:   6804        ldr   r4, [r0, #0]
 8001a70:   f003 03f0   and.w r3, r3, #240   ; 0xf0
 8001a74:   091b        lsrs  r3, r3, #4
 8001a76:   5c9b        ldrb  r3, [r3, r2]
 8001a78:   fa24 f303   lsr.w r3, r4, r3
 8001a7c:   6043        str   r3, [r0, #4]
 8001a7e:   680c        ldr   r4, [r1, #0]
 8001a80:   f404 64e0   and.w r4, r4, #1792  ; 0x700
 8001a84:   0a24        lsrs  r4, r4, #8
 8001a86:   5ca4        ldrb  r4, [r4, r2]
 8001a88:   40e3        lsrs  r3, r4
 8001a8a:   6083        str   r3, [r0, #8]
 8001a8c:   680b        ldr   r3, [r1, #0]
 8001a8e:   6844        ldr   r4, [r0, #4]
 8001a90:   f403 5360   and.w r3, r3, #14336 ; 0x3800
 8001a94:   0adb        lsrs  r3, r3, #11
 8001a96:   5c9b        ldrb  r3, [r3, r2]
 8001a98:   fa24 f303   lsr.w r3, r4, r3
 8001a9c:   60c3        str   r3, [r0, #12]
 8001a9e:   6809        ldr   r1, [r1, #0]
 8001aa0:   f401 4140   and.w r1, r1, #49152 ; 0xc000
 8001aa4:   eb02 3191   add.w r1, r2, r1, lsr #14
 8001aa8:   7c09        ldrb  r1, [r1, #16]
 8001aaa:   fbb3 f1f1   udiv  r1, r3, r1
 8001aae:   6101        str   r1, [r0, #16]
 8001ab0:   bd30        pop   {r4, r5, pc}
 8001ab2:   bf00        nop

.pool
 8001ab4:   007a1200
 8001ab8:   003d0900
 8001abc:   20000a8c    RAM (data)
 8001ac0:   40021004    Reset and clock control RCC


FUNCTION:   TODO_8001ac4
 8001ac4:   4a04        ldr   r2, =0x40021014    ; { Reset and clock control RCC } | [pc, #16]  ; (8001ad8 <FlashStart+0x1ad8>)
 8001ac6:   2900        cmp   r1, #0
 8001ac8:   6811        ldr   r1, [r2, #0]
 8001aca:   bf14        ite   ne
 8001acc:   4308        orrne r0, r1
 8001ace:   ea21 0000   biceq.w  r0, r1, r0
 8001ad2:   6010        str   r0, [r2, #0]
 8001ad4:   4770        bx lr
 8001ad6:   bf00        nop

.pool
 8001ad8:   40021014    Reset and clock control RCC


FUNCTION:   Enable_APB2_Peripherals

# If r1 == 0, then r0 is a mask of bits to clear in the APB2 peripheral enable register
# If r1 != 0, then r0 is a mask of bits to set.

 8001adc:   4a04        ldr   r2, =0x40021018    ; { Reset and clock control RCC } | [pc, #16]  ; (8001af0 <FlashStart+0x1af0>)
 8001ade:   2900        cmp   r1, #0
 8001ae0:   6811        ldr   r1, [r2, #0]
 8001ae2:   bf14        ite   ne
 8001ae4:   4308        orrne r0, r1
 8001ae6:   ea21 0000   biceq.w  r0, r1, r0
 8001aea:   6010        str   r0, [r2, #0]
 8001aec:   4770        bx lr
 8001aee:   bf00        nop

.pool
 8001af0:   40021018    Reset and clock control RCC


FUNCTION:   Enable_APB1_Peripherals

# If r1 == 0, then r0 is a mask of bits to clear in the APB1 peripheral enable register
# If r1 != 0, then r0 is a mask of bits to set.

 8001af4:   4a04        ldr   r2, =0x4002101c    ; { Reset and clock control RCC } | [pc, #16]  ; (8001b08 <FlashStart+0x1b08>)
 8001af6:   2900        cmp   r1, #0
 8001af8:   6811        ldr   r1, [r2, #0]
 8001afa:   bf14        ite   ne
 8001afc:   4308        orrne r0, r1
 8001afe:   ea21 0000   biceq.w  r0, r1, r0
 8001b02:   6010        str   r0, [r2, #0]
 8001b04:   4770        bx lr
 8001b06:   bf00        nop

.pool
 8001b08:   4002101c    Reset and clock control RCC


FUNCTION:   Reset_APB1_Peripherals

# If r1 == 0, then r0 is a mask of bits to clear in the APB1 peripheral reset register
# If r1 != 0, then r0 is a mask of bits to set.
# Not sure why you'd ever want to "clear" bits, because writing 0 bits in this register has no effect

 8001b0c:   4a04        ldr   r2, =0x40021010    ; { Reset and clock control RCC } | [pc, #16]  ; (8001b20 <FlashStart+0x1b20>)
 8001b0e:   2900        cmp   r1, #0
 8001b10:   6811        ldr   r1, [r2, #0]
 8001b12:   bf14        ite   ne
 8001b14:   4308        orrne r0, r1
 8001b16:   ea21 0000   biceq.w  r0, r1, r0
 8001b1a:   6010        str   r0, [r2, #0]
 8001b1c:   4770        bx lr
 8001b1e:   bf00        nop

.pool
 8001b20:   40021010    Reset and clock control RCC


FUNCTION:   Read_RCC_Control_Register_Bit
 8001b24:   0941        lsrs  r1, r0, #5           ; Get bits 5 and 6 of r0 into r1
 8001b26:   4a09        ldr   r2, =0x40021000      ; { Reset and clock control RCC } | [pc, #36]  ; (8001b4c <FlashStart+0x1b4c>)
 8001b28:   2901        cmp   r1, #1               
 8001b2a:   d101        bne.n 8001b30 <FlashStart+0x1b30>
 8001b2c:   6811        ldr   r1, [r2, #0]
 8001b2e:   e003        b.n   8001b38 <FlashStart+0x1b38>
 8001b30:   2902        cmp   r1, #2
 8001b32:   bf0c        ite   eq
 8001b34:   6a11        ldreq r1, [r2, #32]
 8001b36:   6a51        ldrne r1, [r2, #36]  ; 0x24

; At this point, r1 holds one of the following values, based on the supplied value in r0 shifted right 5 bits:
; if r0>>5 == 1 then r1 has Clock Control Register (RCC_CR)
; if r0>>5 == 2 then r1 has Backup Domain Control Register (RCC_BDCR)
; any other value: r1 has Control/Status register (RCC_CSR)

 8001b38:   2201        movs  r2, #1
 8001b3a:   f000 001f   and.w r0, r0, #31
 8001b3e:   fa02 f000   lsl.w r0, r2, r0           ; r0 = 1<<(supplied r0 value & 0x1f)
 8001b42:   4008        ands  r0, r1               ; test the control register value in r1 against the bit
 8001b44:   d000        beq.n 8001b48 <FlashStart+0x1b48>
 8001b46:   2001        movs  r0, #1               ; if the bit was set, return 1 else return 0.
 8001b48:   b2c0        uxtb  r0, r0
 8001b4a:   4770        bx lr

.pool
 8001b4c:   40021000    Reset and clock control RCC


FUNCTION:   TODO_8001b50
 8001b50:   b580        push  {r7, lr}
 8001b52:   f000 faa1   bl 8002098 <FlashStart+0x2098>
 8001b56:   f7ff ff1f   bl 8001998 <FlashStart+0x1998>
 8001b5a:   2010        movs  r0, #16
 8001b5c:   f000 fa91   bl 8002082 <FlashStart+0x2082>
 8001b60:   2002        movs  r0, #2
 8001b62:   f000 fa89   bl 8002078 <FlashStart+0x2078>
 8001b66:   2000        movs  r0, #0
 8001b68:   f7ff ff4c   bl 8001a04 <FlashStart+0x1a04>
 8001b6c:   2000        movs  r0, #0
 8001b6e:   f7ff ff55   bl 8001a1c <FlashStart+0x1a1c>
 8001b72:   f44f 6080   mov.w r0, #1024   ; 0x400
 8001b76:   f7ff ff4c   bl 8001a12 <FlashStart+0x1a12>
 8001b7a:   f44f 1120   mov.w r1, #2621440   ; 0x280000
 8001b7e:   2000        movs  r0, #0
 8001b80:   f7ff ff28   bl 80019d4 <FlashStart+0x19d4>
 8001b84:   2001        movs  r0, #1
 8001b86:   f7ff ff2d   bl 80019e4 <FlashStart+0x19e4>
 8001b8a:   2039        movs  r0, #57  ; 0x39
 8001b8c:   f7ff ffca   bl 8001b24 <FlashStart+0x1b24>
 8001b90:   2800        cmp   r0, #0
 8001b92:   d0fa        beq.n 8001b8a <FlashStart+0x1b8a>
 8001b94:   2002        movs  r0, #2
 8001b96:   f7ff ff2b   bl 80019f0 <FlashStart+0x19f0>
 8001b9a:   f7ff ff2e   bl 80019fa <FlashStart+0x19fa>
 8001b9e:   2808        cmp   r0, #8
 8001ba0:   d1fb        bne.n 8001b9a <FlashStart+0x1b9a>
 8001ba2:   2101        movs  r1, #1
 8001ba4:   f44f 7080   mov.w r0, #256 ; 0x100
 8001ba8:   f7ff ff8c   bl 8001ac4 <FlashStart+0x1ac4>
 8001bac:   e8bd 4001   ldmia.w  sp!, {r0, lr}
 8001bb0:   f000 bd72   b.w   8002698 <FlashStart+0x2698>

FUNCTION:   TODO_8001bb4
 8001bb4:   b580        push  {r7, lr}
 8001bb6:   2001        movs  r0, #1
 8001bb8:   f7ff ff38   bl 8001a2c <FlashStart+0x1a2c>
 8001bbc:   2101        movs  r1, #1
 8001bbe:   f44f 0000   mov.w r0, #8388608   ; 0x800000
 8001bc2:   e8bd 4004   ldmia.w  sp!, {r2, lr}
 8001bc6:   f7ff bf95   b.w   8001af4 <FlashStart+0x1af4>
 8001bca:   4808        ldr   r0, =0x20000874    ; { RAM (bss) } | [pc, #32]  ; (8001bec <FlashStart+0x1bec>)
 8001bcc:   2103        movs  r1, #3
 8001bce:   6001        str   r1, [r0, #0]
 8001bd0:   4770        bx lr
 8001bd2:   0000        movs  r0, r0

FUNCTION:   TODO_8001bd4
 8001bd4:   4805        ldr   r0, =0x20000874    ; { RAM (bss) } | [pc, #20]  ; (8001bec <FlashStart+0x1bec>)
 8001bd6:   4904        ldr   r1, =0x20000808    ; { RAM (bss) } | [pc, #16]  ; (8001be8 <FlashStart+0x1be8>)
 8001bd8:   7a89        ldrb  r1, [r1, #10]
 8001bda:   2900        cmp   r1, #0
 8001bdc:   bf14        ite   ne
 8001bde:   2105        movne r1, #5
 8001be0:   2101        moveq r1, #1
 8001be2:   6001        str   r1, [r0, #0]
 8001be4:   4770        bx lr
 8001be6:   bf00        nop

.pool
 8001be8:   20000808    RAM (bss)
 8001bec:   20000874    RAM (bss)


FUNCTION:   TODO_8001bf0
 8001bf0:   4770        bx lr

FUNCTION:   TODO_8001bf2
 8001bf2:   b580        push  {r7, lr}
 8001bf4:   2014        movs  r0, #20
 8001bf6:   f88d 0000   strb.w   r0, [sp]
 8001bfa:   2000        movs  r0, #0
 8001bfc:   f88d 0001   strb.w   r0, [sp, #1]
 8001c00:   f88d 0002   strb.w   r0, [sp, #2]
 8001c04:   2001        movs  r0, #1
 8001c06:   f88d 0003   strb.w   r0, [sp, #3]
 8001c0a:   a800        add   r0, sp, #0
 8001c0c:   f000 fdcc   bl 80027a8 <FlashStart+0x27a8>
 8001c10:   bd01        pop   {r0, pc}
 8001c12:   0000        movs  r0, r0
 8001c14:   4804        ldr   r0, =0xe000ed0c    ; { Cortex-M3 SCS } | [pc, #16]  ; (8001c28 <FlashStart+0x1c28>)
 8001c16:   6801        ldr   r1, [r0, #0]
 8001c18:   f401 61e0   and.w r1, r1, #1792  ; 0x700
 8001c1c:   4a03        ldr   r2, =0x5fa0004    ; [pc, #12]  ; (8001c2c <FlashStart+0x1c2c>)
 8001c1e:   4311        orrs  r1, r2
 8001c20:   6001        str   r1, [r0, #0]
 8001c22:   f3bf 8f4f   dsb   sy
 8001c26:   e7fe        b.n   8001c26 <FlashStart+0x1c26>

.pool
 8001c28:   e000ed0c    Cortex-M3 SCS
 8001c2c:   05fa0004


FUNCTION:   TODO_8001c30
 8001c30:   b510        push  {r4, lr}
 8001c32:   4819        ldr   r0, =0x803e800    ; { Flash } | [pc, #100] ; (8001c98 <FlashStart+0x1c98>)
 8001c34:   7801        ldrb  r1, [r0, #0]
 8001c36:   2942        cmp   r1, #66  ; 0x42
 8001c38:   d109        bne.n 8001c4e <FlashStart+0x1c4e>
 8001c3a:   2100        movs  r1, #0
 8001c3c:   4a17        ldr   r2, =0x20000a18    ; { RAM (data) } | [pc, #92]  ; (8001c9c <FlashStart+0x1c9c>)
 8001c3e:   eb02 0341   add.w r3, r2, r1, lsl #1
 8001c42:   180c        adds  r4, r1, r0
 8001c44:   7f24        ldrb  r4, [r4, #28]
 8001c46:   709c        strb  r4, [r3, #2]
 8001c48:   1c49        adds  r1, r1, #1
 8001c4a:   290f        cmp   r1, #15
 8001c4c:   dbf7        blt.n 8001c3e <FlashStart+0x1c3e>
 8001c4e:   4814        ldr   r0, =0x8004000    ; { Flash } | [pc, #80]  ; (8001ca0 <FlashStart+0x1ca0>)
 8001c50:   7801        ldrb  r1, [r0, #0]
 8001c52:   2953        cmp   r1, #83  ; 0x53
 8001c54:   d11f        bne.n 8001c96 <FlashStart+0x1c96>
 8001c56:   2100        movs  r1, #0
 8001c58:   4a12        ldr   r2, =0x20000ab4    ; { RAM (data) } | [pc, #72]  ; (8001ca4 <FlashStart+0x1ca4>)
 8001c5a:   eb02 0341   add.w r3, r2, r1, lsl #1
 8001c5e:   180c        adds  r4, r1, r0
 8001c60:   7964        ldrb  r4, [r4, #5]
 8001c62:   709c        strb  r4, [r3, #2]
 8001c64:   1c49        adds  r1, r1, #1
 8001c66:   2909        cmp   r1, #9
 8001c68:   dbf7        blt.n 8001c5a <FlashStart+0x1c5a>
 8001c6a:   2100        movs  r1, #0
 8001c6c:   4a0e        ldr   r2, =0x200008f0    ; { RAM (data) } | [pc, #56]  ; (8001ca8 <FlashStart+0x1ca8>)
 8001c6e:   eb02 0341   add.w r3, r2, r1, lsl #1
 8001c72:   180c        adds  r4, r1, r0
 8001c74:   7ce4        ldrb  r4, [r4, #19]
 8001c76:   709c        strb  r4, [r3, #2]
 8001c78:   2400        movs  r4, #0
 8001c7a:   70dc        strb  r4, [r3, #3]
 8001c7c:   1c49        adds  r1, r1, #1
 8001c7e:   2916        cmp   r1, #22
 8001c80:   da03        bge.n 8001c8a <FlashStart+0x1c8a>
 8001c82:   180b        adds  r3, r1, r0
 8001c84:   7cdb        ldrb  r3, [r3, #19]
 8001c86:   2b00        cmp   r3, #0
 8001c88:   d1f1        bne.n 8001c6e <FlashStart+0x1c6e>
 8001c8a:   0048        lsls  r0, r1, #1
 8001c8c:   1c80        adds  r0, r0, #2
 8001c8e:   7010        strb  r0, [r2, #0]
 8001c90:   4806        ldr   r0, =0x20000968    ; { RAM (data) } | [pc, #24]  ; (8001cac <FlashStart+0x1cac>)
 8001c92:   7811        ldrb  r1, [r2, #0]
 8001c94:   8681        strh  r1, [r0, #52]  ; 0x34
 8001c96:   bd10        pop   {r4, pc}

.pool
 8001c98:   0803e800    Flash
 8001c9c:   20000a18    RAM (data)
 8001ca0:   08004000    Flash
 8001ca4:   20000ab4    RAM (data)
 8001ca8:   200008f0    RAM (data)
 8001cac:   20000968    RAM (data)


FUNCTION:   TODO_8001cb0
 8001cb0:   b510        push  {r4, lr}
 8001cb2:   f000 f814   bl 8001cde <FlashStart+0x1cde>
 8001cb6:   f648 74bf   movw  r4, #36799  ; 0x8fbf
 8001cba:   4023        ands  r3, r4
 8001cbc:   06cc        lsls  r4, r1, #27
 8001cbe:   d501        bpl.n 8001cc4 <FlashStart+0x1cc4>
 8001cc0:   f083 0310   eor.w r3, r3, #16
 8001cc4:   0689        lsls  r1, r1, #26
 8001cc6:   d502        bpl.n 8001cce <FlashStart+0x1cce>
 8001cc8:   f083 0320   eor.w r3, r3, #32
 8001ccc:   b29b        uxth  r3, r3
 8001cce:   e7ff        b.n   8001cd0 <FlashStart+0x1cd0>
 8001cd0:   f248 0180   movw  r1, #32896  ; 0x8080
 8001cd4:   4319        orrs  r1, r3
 8001cd6:   b289        uxth  r1, r1
 8001cd8:   f842 1020   str.w r1, [r2, r0, lsl #2]
 8001cdc:   bd10        pop   {r4, pc}

FUNCTION:   TODO_8001cde
 8001cde:   f8df 2108   ldr.w r2, =0x40005c00    ; { USB device FS registers } | [pc, #264] ; 8001de8 <FlashStart+0x1de8>
 8001ce2:   f852 3020   ldr.w r3, [r2, r0, lsl #2]
 8001ce6:   4770        bx lr

FUNCTION:   TODO_8001ce8
 8001ce8:   f8df 10fc   ldr.w r1, =0x40005c00    ; { USB device FS registers } | [pc, #252] ; 8001de8 <FlashStart+0x1de8>
 8001cec:   f851 2020   ldr.w r2, [r1, r0, lsl #2]
 8001cf0:   f64b 738f   movw  r3, #49039  ; 0xbf8f
 8001cf4:   401a        ands  r2, r3
 8001cf6:   f482 5240   eor.w r2, r2, #12288 ; 0x3000
 8001cfa:   f248 0380   movw  r3, #32896  ; 0x8080
 8001cfe:   e00a        b.n   8001d16 <FlashStart+0x1d16>

FUNCTION:   TODO_8001d00
 8001d00:   f8df 10e4   ldr.w r1, =0x40005c00    ; { USB device FS registers } | [pc, #228] ; 8001de8 <FlashStart+0x1de8>
 8001d04:   f851 2020   ldr.w r2, [r1, r0, lsl #2]
 8001d08:   f648 638f   movw  r3, #36495  ; 0x8e8f
 8001d0c:   401a        ands  r2, r3
 8001d0e:   f248 0380   movw  r3, #32896  ; 0x8080
 8001d12:   e000        b.n   8001d16 <FlashStart+0x1d16>
 8001d14:   0000        movs  r0, r0
 8001d16:   431a        orrs  r2, r3
 8001d18:   f841 2020   str.w r2, [r1, r0, lsl #2]
 8001d1c:   4770        bx lr

FUNCTION:   TODO_8001d1e
 8001d1e:   4932        ldr   r1, =0x40005c00    ; { USB device FS registers } | [pc, #200] ; (8001de8 <FlashStart+0x1de8>)
 8001d20:   f851 2020   ldr.w r2, [r1, r0, lsl #2]
 8001d24:   0452        lsls  r2, r2, #17
 8001d26:   d509        bpl.n 8001d3c <FlashStart+0x1d3c>
 8001d28:   f851 2020   ldr.w r2, [r1, r0, lsl #2]
 8001d2c:   f648 738f   movw  r3, #36751  ; 0x8f8f
 8001d30:   401a        ands  r2, r3
 8001d32:   f24c 0380   movw  r3, #49280  ; 0xc080
 8001d36:   431a        orrs  r2, r3
 8001d38:   f841 2020   str.w r2, [r1, r0, lsl #2]
 8001d3c:   4770        bx lr

FUNCTION:   TODO_8001d3e
 8001d3e:   492a        ldr   r1, =0x40005c00    ; { USB device FS registers } | [pc, #168] ; (8001de8 <FlashStart+0x1de8>)
 8001d40:   f851 2020   ldr.w r2, [r1, r0, lsl #2]
 8001d44:   0652        lsls  r2, r2, #25
 8001d46:   d509        bpl.n 8001d5c <FlashStart+0x1d5c>
 8001d48:   f851 2020   ldr.w r2, [r1, r0, lsl #2]
 8001d4c:   f648 738f   movw  r3, #36751  ; 0x8f8f
 8001d50:   401a        ands  r2, r3
 8001d52:   f248 03c0   movw  r3, #32960  ; 0x80c0
 8001d56:   431a        orrs  r2, r3
 8001d58:   f841 2020   str.w r2, [r1, r0, lsl #2]
 8001d5c:   4770        bx lr

FUNCTION:   TODO_8001d5e
 8001d5e:   e02e        b.n   8001dbe <FlashStart+0x1dbe>

FUNCTION:   TODO_8001d60
 8001d60:   491e        ldr   r1, =0x40005c50    ; { USB device FS registers } | [pc, #120] ; (8001ddc <FlashStart+0x1ddc>)
 8001d62:   6809        ldr   r1, [r1, #0]
 8001d64:   b289        uxth  r1, r1
 8001d66:   eb01 00c0   add.w r0, r1, r0, lsl #3
 8001d6a:   491b        ldr   r1, =0x40006008    ; { Shared USB/CAN SRAM 512 bytes } | [pc, #108] ; (8001dd8 <FlashStart+0x1dd8>)
 8001d6c:   e02d        b.n   8001dca <FlashStart+0x1dca>

FUNCTION:   TODO_8001d6e
 8001d6e:   4a1b        ldr   r2, =0x40005c50    ; { USB device FS registers } | [pc, #108] ; (8001ddc <FlashStart+0x1ddc>)
 8001d70:   6812        ldr   r2, [r2, #0]
 8001d72:   b292        uxth  r2, r2
 8001d74:   eb02 00c0   add.w r0, r2, r0, lsl #3
 8001d78:   4a1a        ldr   r2, =0x40006004    ; { Shared USB/CAN SRAM 512 bytes } | [pc, #104] ; (8001de4 <FlashStart+0x1de4>)
 8001d7a:   e01d        b.n   8001db8 <FlashStart+0x1db8>

FUNCTION:   TODO_8001d7c
 8001d7c:   4a17        ldr   r2, =0x40005c50    ; { USB device FS registers } | [pc, #92]  ; (8001ddc <FlashStart+0x1ddc>)
 8001d7e:   6812        ldr   r2, [r2, #0]
 8001d80:   b292        uxth  r2, r2
 8001d82:   eb02 00c0   add.w r0, r2, r0, lsl #3
 8001d86:   4a16        ldr   r2, =0x4000600c    ; { Shared USB/CAN SRAM 512 bytes } | [pc, #88]  ; (8001de0 <FlashStart+0x1de0>)
 8001d88:   eb02 0040   add.w r0, r2, r0, lsl #1
 8001d8c:   293f        cmp   r1, #63  ; 0x3f
 8001d8e:   d309        bcc.n 8001da4 <FlashStart+0x1da4>
 8001d90:   094a        lsrs  r2, r1, #5
 8001d92:   231f        movs  r3, #31
 8001d94:   4219        tst   r1, r3
 8001d96:   d101        bne.n 8001d9c <FlashStart+0x1d9c>
 8001d98:   1e52        subs  r2, r2, #1
 8001d9a:   b292        uxth  r2, r2
 8001d9c:   0291        lsls  r1, r2, #10
 8001d9e:   f441 4100   orr.w r1, r1, #32768 ; 0x8000
 8001da2:   e005        b.n   8001db0 <FlashStart+0x1db0>
 8001da4:   084a        lsrs  r2, r1, #1
 8001da6:   07c9        lsls  r1, r1, #31
 8001da8:   d501        bpl.n 8001dae <FlashStart+0x1dae>
 8001daa:   1c52        adds  r2, r2, #1
 8001dac:   b292        uxth  r2, r2
 8001dae:   0291        lsls  r1, r2, #10
 8001db0:   6001        str   r1, [r0, #0]
 8001db2:   4770        bx lr
 8001db4:   0849        lsrs  r1, r1, #1
 8001db6:   0049        lsls  r1, r1, #1
 8001db8:   f842 1010   str.w r1, [r2, r0, lsl #1]
 8001dbc:   4770        bx lr
 8001dbe:   4907        ldr   r1, =0x40005c50    ; { USB device FS registers } | [pc, #28]  ; (8001ddc <FlashStart+0x1ddc>)
 8001dc0:   6809        ldr   r1, [r1, #0]
 8001dc2:   b289        uxth  r1, r1
 8001dc4:   eb01 00c0   add.w r0, r1, r0, lsl #3
 8001dc8:   4902        ldr   r1, =0x40006000    ; { Shared USB/CAN SRAM 512 bytes } | [pc, #8]   ; (8001dd4 <FlashStart+0x1dd4>)
 8001dca:   f851 0010   ldr.w r0, [r1, r0, lsl #1]
 8001dce:   b280        uxth  r0, r0
 8001dd0:   4770        bx lr
 8001dd2:   0000        movs  r0, r0

.pool
 8001dd4:   40006000    Shared USB/CAN SRAM 512 bytes
 8001dd8:   40006008    Shared USB/CAN SRAM 512 bytes
 8001ddc:   40005c50    USB device FS registers
 8001de0:   4000600c    Shared USB/CAN SRAM 512 bytes
 8001de4:   40006004    Shared USB/CAN SRAM 512 bytes
 8001de8:   40005c00    USB device FS registers


FUNCTION:   TODO_8001dec
 8001dec:   0601        lsls  r1, r0, #24
 8001dee:   0c09        lsrs  r1, r1, #16
 8001df0:   ea41 2010   orr.w r0, r1, r0, lsr #8
 8001df4:   4770        bx lr
 8001df6:   0000        movs  r0, r0

FUNCTION:   TODO_8001df8
 8001df8:   b570        push  {r4, r5, r6, lr}
 8001dfa:   b096        sub   sp, #88  ; 0x58
 8001dfc:   2101        movs  r1, #1
 8001dfe:   f44f 70f0   mov.w r0, #480 ; 0x1e0
 8001e02:   f7ff fe6b   bl 8001adc <FlashStart+0x1adc>
 8001e06:   f24c 7003   movw  r0, #50947  ; 0xc703
 8001e0a:   f8ad 0000   strh.w   r0, [sp]
 8001e0e:   2018        movs  r0, #24
 8001e10:   f88d 0003   strb.w   r0, [sp, #3]
 8001e14:   2003        movs  r0, #3
 8001e16:   f88d 0002   strb.w   r0, [sp, #2]
 8001e1a:   4c46        ldr   r4, =0x40011400    ; { GPIO Port D } | [pc, #280] ; (8001f34 <FlashStart+0x1f34>)
 8001e1c:   a900        add   r1, sp, #0
 8001e1e:   4620        mov   r0, r4
 8001e20:   f000 fb20   bl 8002464 <FlashStart+0x2464>
 8001e24:   f64f 7080   movw  r0, #65408  ; 0xff80
 8001e28:   f8ad 0000   strh.w   r0, [sp]
 8001e2c:   4d2b        ldr   r5, =0x40011800    ; { GPIO Port E } | [pc, #172] ; (8001edc <FlashStart+0x1edc>)
 8001e2e:   a900        add   r1, sp, #0
 8001e30:   4628        mov   r0, r5
 8001e32:   f000 fb17   bl 8002464 <FlashStart+0x2464>
 8001e36:   f24f 003f   movw  r0, #61503  ; 0xf03f
 8001e3a:   f8ad 0000   strh.w   r0, [sp]
 8001e3e:   a900        add   r1, sp, #0
 8001e40:   4827        ldr   r0, =0x40011c00    ; { GPIO Port F } | [pc, #156] ; (8001ee0 <FlashStart+0x1ee0>)
 8001e42:   f000 fb0f   bl 8002464 <FlashStart+0x2464>
 8001e46:   203f        movs  r0, #63  ; 0x3f
 8001e48:   f8ad 0000   strh.w   r0, [sp]
 8001e4c:   4e25        ldr   r6, =0x40012000    ; { GPIO Port G } | [pc, #148] ; (8001ee4 <FlashStart+0x1ee4>)
 8001e4e:   a900        add   r1, sp, #0
 8001e50:   4630        mov   r0, r6
 8001e52:   f000 fb07   bl 8002464 <FlashStart+0x2464>
 8001e56:   f44f 5060   mov.w r0, #14336  ; 0x3800
 8001e5a:   f000 f845   bl 8001ee8 <FlashStart+0x1ee8>
 8001e5e:   2078        movs  r0, #120 ; 0x78
 8001e60:   f8ad 0000   strh.w   r0, [sp]
 8001e64:   a900        add   r1, sp, #0
 8001e66:   4628        mov   r0, r5
 8001e68:   f000 fafc   bl 8002464 <FlashStart+0x2464>
 8001e6c:   2030        movs  r0, #48  ; 0x30
 8001e6e:   f000 f83b   bl 8001ee8 <FlashStart+0x1ee8>
 8001e72:   f44f 7000   mov.w r0, #512 ; 0x200
 8001e76:   f8ad 0000   strh.w   r0, [sp]
 8001e7a:   a900        add   r1, sp, #0
 8001e7c:   4630        mov   r0, r6
 8001e7e:   f000 faf1   bl 8002464 <FlashStart+0x2464>
 8001e82:   2002        movs  r0, #2
 8001e84:   9001        str   r0, [sp, #4]
 8001e86:   2000        movs  r0, #0
 8001e88:   9002        str   r0, [sp, #8]
 8001e8a:   2005        movs  r0, #5
 8001e8c:   9003        str   r0, [sp, #12]
 8001e8e:   2000        movs  r0, #0
 8001e90:   9004        str   r0, [sp, #16]
 8001e92:   9005        str   r0, [sp, #20]
 8001e94:   9006        str   r0, [sp, #24]
 8001e96:   f04f 5080   mov.w r0, #268435456 ; 0x10000000
 8001e9a:   9007        str   r0, [sp, #28]
 8001e9c:   2002        movs  r0, #2
 8001e9e:   9008        str   r0, [sp, #32]
 8001ea0:   2000        movs  r0, #0
 8001ea2:   9009        str   r0, [sp, #36]  ; 0x24
 8001ea4:   2008        movs  r0, #8
 8001ea6:   900a        str   r0, [sp, #40]  ; 0x28
 8001ea8:   2010        movs  r0, #16
 8001eaa:   900b        str   r0, [sp, #44]  ; 0x2c
 8001eac:   2000        movs  r0, #0
 8001eae:   900c        str   r0, [sp, #48]  ; 0x30
 8001eb0:   900d        str   r0, [sp, #52]  ; 0x34
 8001eb2:   900e        str   r0, [sp, #56]  ; 0x38
 8001eb4:   900f        str   r0, [sp, #60]  ; 0x3c
 8001eb6:   f44f 5080   mov.w r0, #4096   ; 0x1000
 8001eba:   9010        str   r0, [sp, #64]  ; 0x40
 8001ebc:   2000        movs  r0, #0
 8001ebe:   9011        str   r0, [sp, #68]  ; 0x44
 8001ec0:   9012        str   r0, [sp, #72]  ; 0x48
 8001ec2:   9013        str   r0, [sp, #76]  ; 0x4c
 8001ec4:   a801        add   r0, sp, #4
 8001ec6:   9014        str   r0, [sp, #80]  ; 0x50
 8001ec8:   9015        str   r0, [sp, #84]  ; 0x54
 8001eca:   a808        add   r0, sp, #32
 8001ecc:   f000 f9f4   bl 80022b8 <FlashStart+0x22b8>
 8001ed0:   2101        movs  r1, #1
 8001ed2:   2002        movs  r0, #2
 8001ed4:   f000 fa4c   bl 8002370 <FlashStart+0x2370>
 8001ed8:   b016        add   sp, #88  ; 0x58
 8001eda:   bd70        pop   {r4, r5, r6, pc}

.pool
 8001edc:   40011800    GPIO Port E
 8001ee0:   40011c00    GPIO Port F
 8001ee4:   40012000    GPIO Port G


FUNCTION:   TODO_8001ee8
 8001ee8:   f8ad 0000   strh.w   r0, [sp]
 8001eec:   a900        add   r1, sp, #0
 8001eee:   4620        mov   r0, r4
 8001ef0:   f000 bab8   b.w   8002464 <FlashStart+0x2464>

FUNCTION:   TODO_8001ef4
 8001ef4:   490d        ldr   r1, =0x64000aaa    ; [pc, #52]  ; (8001f2c <FlashStart+0x1f2c>)
 8001ef6:   22aa        movs  r2, #170 ; 0xaa
 8001ef8:   800a        strh  r2, [r1, #0]
 8001efa:   4a0d        ldr   r2, =0x64000554    ; [pc, #52]  ; (8001f30 <FlashStart+0x1f30>)
 8001efc:   2355        movs  r3, #85  ; 0x55
 8001efe:   8013        strh  r3, [r2, #0]
 8001f00:   2290        movs  r2, #144 ; 0x90
 8001f02:   800a        strh  r2, [r1, #0]
 8001f04:   f04f 41c8   mov.w r1, #1677721600   ; 0x64000000
 8001f08:   880a        ldrh  r2, [r1, #0]
 8001f0a:   8002        strh  r2, [r0, #0]
 8001f0c:   884a        ldrh  r2, [r1, #2]
 8001f0e:   8042        strh  r2, [r0, #2]
 8001f10:   8b8a        ldrh  r2, [r1, #28]
 8001f12:   8082        strh  r2, [r0, #4]
 8001f14:   8bc9        ldrh  r1, [r1, #30]
 8001f16:   80c1        strh  r1, [r0, #6]
 8001f18:   4770        bx lr

FUNCTION:   TODO_8001f1a
 8001f1a:   e7ff        b.n   8001f1c <FlashStart+0x1f1c>
 8001f1c:   f04f 40c8   mov.w r0, #1677721600   ; 0x64000000
 8001f20:   21f0        movs  r1, #240 ; 0xf0
 8001f22:   8001        strh  r1, [r0, #0]
 8001f24:   2000        movs  r0, #0
 8001f26:   4770        bx lr
 8001f28:   0000        movs  r0, r0
 8001f2a:   0000        movs  r0, r0

.pool
 8001f2c:   64000aaa
 8001f30:   64000554
 8001f34:   40011400    GPIO Port D


FUNCTION:   TODO_8001f38
 8001f38:   e92d 4ff8   stmdb sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f3c:   2000        movs  r0, #0
 8001f3e:   f8ad 0000   strh.w   r0, [sp]
 8001f42:   f248 0480   movw  r4, #32896  ; 0x8080
 8001f46:   4d46        ldr   r5, =0x20000880    ; { RAM (bss) } | [pc, #280] ; (8002060 <FlashStart+0x2060>)
 8001f48:   f648 7b0f   movw  fp, #36623  ; 0x8f0f
 8001f4c:   f640 7a8f   movw  sl, #3983   ; 0xf8f
 8001f50:   4f46        ldr   r7, =0x40005c00    ; { USB device FS registers } | [pc, #280] ; (800206c <FlashStart+0x206c>)
 8001f52:   f8df 811c   ldr.w r8, =0x2000088c    ; { RAM (bss) } | [pc, #284] ; 8002070 <FlashStart+0x2070>
 8001f56:   f8df 911c   ldr.w r9, =0x20000886    ; { RAM (bss) } | [pc, #284] ; 8002074 <FlashStart+0x2074>
 8001f5a:   f64b 76bf   movw  r6, #49087  ; 0xbfbf
 8001f5e:   e025        b.n   8001fac <FlashStart+0x1fac>
 8001f60:   f857 1020   ldr.w r1, [r7, r0, lsl #2]
 8001f64:   f8ad 1000   strh.w   r1, [sp]
 8001f68:   f8bd 1000   ldrh.w   r1, [sp]
 8001f6c:   0409        lsls  r1, r1, #16
 8001f6e:   d50b        bpl.n 8001f88 <FlashStart+0x1f88>
 8001f70:   f857 1020   ldr.w r1, [r7, r0, lsl #2]
 8001f74:   ea0a 0101   and.w r1, sl, r1
 8001f78:   f847 1020   str.w r1, [r7, r0, lsl #2]
 8001f7c:   493a        ldr   r1, =0x20000a70    ; { RAM (data) } | [pc, #232] ; (8002068 <FlashStart+0x2068>)
 8001f7e:   eb01 0080   add.w r0, r1, r0, lsl #2
 8001f82:   f850 0c04   ldr.w r0, [r0, #-4]
 8001f86:   4780        blx   r0
 8001f88:   f8bd 0000   ldrh.w   r0, [sp]
 8001f8c:   0600        lsls  r0, r0, #24
 8001f8e:   d50d        bpl.n 8001fac <FlashStart+0x1fac>
 8001f90:   f898 0000   ldrb.w   r0, [r8]
 8001f94:   f857 1020   ldr.w r1, [r7, r0, lsl #2]
 8001f98:   ea0b 0101   and.w r1, fp, r1
 8001f9c:   f847 1020   str.w r1, [r7, r0, lsl #2]
 8001fa0:   4930        ldr   r1, =0x20000a54    ; { RAM (data) } | [pc, #192] ; (8002064 <FlashStart+0x2064>)
 8001fa2:   eb01 0080   add.w r0, r1, r0, lsl #2
 8001fa6:   f850 0c04   ldr.w r0, [r0, #-4]
 8001faa:   4780        blx   r0
 8001fac:   6c78        ldr   r0, [r7, #68]  ; 0x44
 8001fae:   f8a9 0000   strh.w   r0, [r9]
 8001fb2:   0400        lsls  r0, r0, #16
 8001fb4:   d552        bpl.n 800205c <FlashStart+0x205c>
 8001fb6:   f8b9 0000   ldrh.w   r0, [r9]
 8001fba:   f010 000f   ands.w   r0, r0, #15
 8001fbe:   f888 0000   strb.w   r0, [r8]
 8001fc2:   d1cd        bne.n 8001f60 <FlashStart+0x1f60>
 8001fc4:   6838        ldr   r0, [r7, #0]
 8001fc6:   8028        strh  r0, [r5, #0]
 8001fc8:   8828        ldrh  r0, [r5, #0]
 8001fca:   f000 0030   and.w r0, r0, #48 ; 0x30
 8001fce:   8068        strh  r0, [r5, #2]
 8001fd0:   8828        ldrh  r0, [r5, #0]
 8001fd2:   f400 5040   and.w r0, r0, #12288 ; 0x3000
 8001fd6:   8028        strh  r0, [r5, #0]
 8001fd8:   6838        ldr   r0, [r7, #0]
 8001fda:   4030        ands  r0, r6
 8001fdc:   f242 0120   movw  r1, #8224   ; 0x2020
 8001fe0:   4048        eors  r0, r1
 8001fe2:   4320        orrs  r0, r4
 8001fe4:   6038        str   r0, [r7, #0]
 8001fe6:   f8b9 0000   ldrh.w   r0, [r9]
 8001fea:   06c0        lsls  r0, r0, #27
 8001fec:   6838        ldr   r0, [r7, #0]
 8001fee:   d405        bmi.n 8001ffc <FlashStart+0x1ffc>
 8001ff0:   ea0b 0000   and.w r0, fp, r0
 8001ff4:   6038        str   r0, [r7, #0]
 8001ff6:   f7fe fbf7   bl 80007e8 <FlashStart+0x7e8>
 8001ffa:   e016        b.n   800202a <FlashStart+0x202a>
 8001ffc:   f8ad 0000   strh.w   r0, [sp]
 8002000:   f8bd 0000   ldrh.w   r0, [sp]
 8002004:   0500        lsls  r0, r0, #20
 8002006:   d506        bpl.n 8002016 <FlashStart+0x2016>
 8002008:   6838        ldr   r0, [r7, #0]
 800200a:   ea0a 0000   and.w r0, sl, r0
 800200e:   6038        str   r0, [r7, #0]
 8002010:   f7fe fbb2   bl 8000778 <FlashStart+0x778>
 8002014:   e009        b.n   800202a <FlashStart+0x202a>
 8002016:   f8bd 0000   ldrh.w   r0, [sp]
 800201a:   0400        lsls  r0, r0, #16
 800201c:   d5c6        bpl.n 8001fac <FlashStart+0x1fac>
 800201e:   6838        ldr   r0, [r7, #0]
 8002020:   ea0a 0000   and.w r0, sl, r0
 8002024:   6038        str   r0, [r7, #0]
 8002026:   f7fe fc07   bl 8000838 <FlashStart+0x838>
 800202a:   6838        ldr   r0, [r7, #0]
 800202c:   4030        ands  r0, r6
 800202e:   8829        ldrh  r1, [r5, #0]
 8002030:   04c9        lsls  r1, r1, #19
 8002032:   d501        bpl.n 8002038 <FlashStart+0x2038>
 8002034:   f480 5080   eor.w r0, r0, #4096  ; 0x1000
 8002038:   8829        ldrh  r1, [r5, #0]
 800203a:   0489        lsls  r1, r1, #18
 800203c:   d501        bpl.n 8002042 <FlashStart+0x2042>
 800203e:   f480 5000   eor.w r0, r0, #8192  ; 0x2000
 8002042:   8869        ldrh  r1, [r5, #2]
 8002044:   06c9        lsls  r1, r1, #27
 8002046:   d501        bpl.n 800204c <FlashStart+0x204c>
 8002048:   f080 0010   eor.w r0, r0, #16
 800204c:   8869        ldrh  r1, [r5, #2]
 800204e:   0689        lsls  r1, r1, #26
 8002050:   d501        bpl.n 8002056 <FlashStart+0x2056>
 8002052:   f080 0020   eor.w r0, r0, #32
 8002056:   b280        uxth  r0, r0
 8002058:   4320        orrs  r0, r4
 800205a:   6038        str   r0, [r7, #0]
 800205c:   e8bd 8ff1   ldmia.w  sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

.pool
 8002060:   20000880    RAM (bss)
 8002064:   20000a54    RAM (data)
 8002068:   20000a70    RAM (data)
 800206c:   40005c00    USB device FS registers
 8002070:   2000088c    RAM (bss)
 8002074:   20000886    RAM (bss)


FUNCTION:   TODO_8002078
 8002078:   492e        ldr   r1, =0x40022000    ; { Flash memory interface } | [pc, #184] ; (8002134 <FlashStart+0x2134>)
 800207a:   680a        ldr   r2, [r1, #0]
 800207c:   f002 0238   and.w r2, r2, #56 ; 0x38
 8002080:   e005        b.n   800208e <FlashStart+0x208e>

FUNCTION:   TODO_8002082
 8002082:   492c        ldr   r1, =0x40022000    ; { Flash memory interface } | [pc, #176] ; (8002134 <FlashStart+0x2134>)
 8002084:   680a        ldr   r2, [r1, #0]
 8002086:   f022 0210   bic.w r2, r2, #16
 800208a:   600a        str   r2, [r1, #0]
 800208c:   680a        ldr   r2, [r1, #0]
 800208e:   4310        orrs  r0, r2
 8002090:   6008        str   r0, [r1, #0]
 8002092:   4770        bx lr
 8002094:   0000        movs  r0, r0
 8002096:   0000        movs  r0, r0

FUNCTION:   TODO_8002098
 8002098:   4802        ldr   r0, =0x40022004    ; { Flash memory interface } | [pc, #8]   ; (80020a4 <FlashStart+0x20a4>)
 800209a:   4924        ldr   r1, =0x45670123    ; [pc, #144] ; (800212c <FlashStart+0x212c>)
 800209c:   6001        str   r1, [r0, #0]
 800209e:   4924        ldr   r1, =0xcdef89ab    ; [pc, #144] ; (8002130 <FlashStart+0x2130>)
 80020a0:   6001        str   r1, [r0, #0]
 80020a2:   4770        bx lr

.pool
 80020a4:   40022004    Flash memory interface


FUNCTION:   TODO_80020a8
 80020a8:   b570        push  {r4, r5, r6, lr}
 80020aa:   4605        mov   r5, r0
 80020ac:   f640 76ff   movw  r6, #4095   ; 0xfff
 80020b0:   4630        mov   r0, r6
 80020b2:   f000 f859   bl 8002168 <FlashStart+0x2168>
 80020b6:   2804        cmp   r0, #4
 80020b8:   d113        bne.n 80020e2 <FlashStart+0x20e2>
 80020ba:   4c1f        ldr   r4, =0x40022010    ; { Flash memory interface } | [pc, #124] ; (8002138 <FlashStart+0x2138>)
 80020bc:   6820        ldr   r0, [r4, #0]
 80020be:   f040 0002   orr.w r0, r0, #2
 80020c2:   6020        str   r0, [r4, #0]
 80020c4:   6065        str   r5, [r4, #4]
 80020c6:   6820        ldr   r0, [r4, #0]
 80020c8:   f040 0040   orr.w r0, r0, #64 ; 0x40
 80020cc:   6020        str   r0, [r4, #0]
 80020ce:   4630        mov   r0, r6
 80020d0:   f000 f84a   bl 8002168 <FlashStart+0x2168>
 80020d4:   2805        cmp   r0, #5
 80020d6:   d004        beq.n 80020e2 <FlashStart+0x20e2>
 80020d8:   6821        ldr   r1, [r4, #0]
 80020da:   f641 72fd   movw  r2, #8189   ; 0x1ffd
 80020de:   4011        ands  r1, r2
 80020e0:   6021        str   r1, [r4, #0]
 80020e2:   bd70        pop   {r4, r5, r6, pc}

FUNCTION:   TODO_80020e4
 80020e4:   b5f8        push  {r3, r4, r5, r6, r7, lr}
 80020e6:   4605        mov   r5, r0
 80020e8:   460c        mov   r4, r1
 80020ea:   2000        movs  r0, #0
 80020ec:   9000        str   r0, [sp, #0]
 80020ee:   f000 f81b   bl 8002128 <FlashStart+0x2128>
 80020f2:   2804        cmp   r0, #4
 80020f4:   d116        bne.n 8002124 <FlashStart+0x2124>
 80020f6:   4e10        ldr   r6, =0x40022010    ; { Flash memory interface } | [pc, #64]  ; (8002138 <FlashStart+0x2138>)
 80020f8:   6830        ldr   r0, [r6, #0]
 80020fa:   f040 0001   orr.w r0, r0, #1
 80020fe:   6030        str   r0, [r6, #0]
 8002100:   f000 f811   bl 8002126 <FlashStart+0x2126>
 8002104:   f641 77fe   movw  r7, #8190   ; 0x1ffe
 8002108:   2804        cmp   r0, #4
 800210a:   d106        bne.n 800211a <FlashStart+0x211a>
 800210c:   1ca8        adds  r0, r5, #2
 800210e:   9000        str   r0, [sp, #0]
 8002110:   0c20        lsrs  r0, r4, #16
 8002112:   9900        ldr   r1, [sp, #0]
 8002114:   8008        strh  r0, [r1, #0]
 8002116:   f000 f807   bl 8002128 <FlashStart+0x2128>
 800211a:   2805        cmp   r0, #5
 800211c:   d002        beq.n 8002124 <FlashStart+0x2124>
 800211e:   6831        ldr   r1, [r6, #0]
 8002120:   4039        ands  r1, r7
 8002122:   6031        str   r1, [r6, #0]
 8002124:   bdf2        pop   {r1, r4, r5, r6, r7, pc}

FUNCTION:   TODO_8002126
 8002126:   802c        strh  r4, [r5, #0]

FUNCTION:   TODO_8002128
 8002128:   200f        movs  r0, #15
 800212a:   e01d        b.n   8002168 <FlashStart+0x2168>

.pool
 800212c:   45670123
 8002130:   cdef89ab
 8002134:   40022000    Flash memory interface
 8002138:   40022010    Flash memory interface


FUNCTION:   TODO_800213c
 800213c:   4809        ldr   r0, =0x4002200c    ; { Flash memory interface } | [pc, #36]  ; (8002164 <FlashStart+0x2164>)
 800213e:   6801        ldr   r1, [r0, #0]
 8002140:   07c9        lsls  r1, r1, #31
 8002142:   d501        bpl.n 8002148 <FlashStart+0x2148>
 8002144:   2001        movs  r0, #1
 8002146:   4770        bx lr
 8002148:   6801        ldr   r1, [r0, #0]
 800214a:   0749        lsls  r1, r1, #29
 800214c:   d501        bpl.n 8002152 <FlashStart+0x2152>
 800214e:   2002        movs  r0, #2
 8002150:   4770        bx lr
 8002152:   6800        ldr   r0, [r0, #0]
 8002154:   06c0        lsls  r0, r0, #27
 8002156:   d501        bpl.n 800215c <FlashStart+0x215c>
 8002158:   2003        movs  r0, #3
 800215a:   4770        bx lr
 800215c:   2004        movs  r0, #4
 800215e:   4770        bx lr
 8002160:   0000        movs  r0, r0
 8002162:   0000        movs  r0, r0

.pool
 8002164:   4002200c    Flash memory interface


FUNCTION:   TODO_8002168
 8002168:   b510        push  {r4, lr}
 800216a:   b082        sub   sp, #8
 800216c:   4604        mov   r4, r0
 800216e:   f7ff ffe5   bl 800213c <FlashStart+0x213c>
 8002172:   e008        b.n   8002186 <FlashStart+0x2186>
 8002174:   9800        ldr   r0, [sp, #0]
 8002176:   1e40        subs  r0, r0, #1
 8002178:   9000        str   r0, [sp, #0]
 800217a:   9800        ldr   r0, [sp, #0]
 800217c:   2800        cmp   r0, #0
 800217e:   d1f9        bne.n 8002174 <FlashStart+0x2174>
 8002180:   f7ff ffdc   bl 800213c <FlashStart+0x213c>
 8002184:   1e64        subs  r4, r4, #1
 8002186:   2801        cmp   r0, #1
 8002188:   d104        bne.n 8002194 <FlashStart+0x2194>
 800218a:   b124        cbz   r4, 8002196 <FlashStart+0x2196>
 800218c:   2000        movs  r0, #0
 800218e:   9000        str   r0, [sp, #0]
 8002190:   20ff        movs  r0, #255 ; 0xff
 8002192:   e7f1        b.n   8002178 <FlashStart+0x2178>
 8002194:   b904        cbnz  r4, 8002198 <FlashStart+0x2198>
 8002196:   2005        movs  r0, #5
 8002198:   bd16        pop   {r1, r2, r4, pc}
 800219a:   0000        movs  r0, r0

 800219c:   0000        movs  r0, r0
 800219e:   f000 7fff   and.w pc, r0, #33423360 ; 0x1fe0000
 80021a2:   0020        movs  r0, r4
 80021a4:   4080        lsls  r0, r0
 80021a6:   0000        movs  r0, r0
 80021a8:   0081        lsls  r1, r0, #2
 80021aa:   0200        lsls  r0, r0, #8
 80021ac:   0001        movs  r1, r0
 80021ae:   0204        lsls  r4, r0, #8
 80021b0:   0800        lsrs  r0, r0, #32
 80021b2:   0004        movs  r4, r0
 80021b4:   8810        ldrh  r0, [r2, #0]
 80021b6:   2383        movs  r3, #131 ; 0x83
 80021b8:   0710        lsls  r0, r2, #28
 80021ba:   2047        movs  r0, #71  ; 0x47
 80021bc:   8e0e        ldrh  r6, [r1, #48]  ; 0x30
 80021be:   0040        lsls  r0, r0, #1
 80021c0:   8100        strh  r0, [r0, #8]
 80021c2:   0000        movs  r0, r0
 80021c4:   0102        lsls  r2, r0, #4
 80021c6:   0400        lsls  r0, r0, #16
 80021c8:   0002        movs  r2, r0
 80021ca:   0408        lsls  r0, r1, #16
 80021cc:   1000        asrs  r0, r0, #32
 80021ce:   0008        movs  r0, r1
 80021d0:   0020        movs  r0, r4
 80021d2:   0000        movs  r0, r0
 80021d4:   fffc 0fff         ; <UNDEFINED> instruction: 0xfffc0fff
 80021d8:   0000        movs  r0, r0
 80021da:   0018        movs  r0, r3
 80021dc:   3000        adds  r0, #0
 80021de:   0000        movs  r0, r0
 80021e0:   0060        lsls  r0, r4, #1
 80021e2:   c000        stmia r0!, {}
 80021e4:   0800        lsrs  r0, r0, #32
 80021e6:   0180        lsls  r0, r0, #6
 80021e8:   0010        movs  r0, r2
 80021ea:   7003        strb  r3, [r0, #0]
 80021ec:   0600        lsls  r0, r0, #24
 80021ee:   01f0        lsls  r0, r6, #7
 80021f0:   800c        strh  r4, [r1, #0]
 80021f2:   1800        adds  r0, r0, r0
 80021f4:   0100        lsls  r0, r0, #4
 80021f6:   0030        movs  r0, r6
 80021f8:   61c2        str   r2, [r0, #28]
 80021fa:   8400        strh  r0, [r0, #32]
 80021fc:   20c3        movs  r0, #195 ; 0xc3
 80021fe:   8708        strh  r0, [r1, #56]  ; 0x38
 8002200:   10e1        asrs  r1, r4, #3
 8002202:   e304        b.n   800280e <FlashStart+0x280e>
 8002204:   0823        lsrs  r3, r4, #32
 8002206:   4386        bics  r6, r0
 8002208:   0c10        lsrs  r0, r2, #16
 800220a:   1082        asrs  r2, r0, #2
 800220c:   0418        lsls  r0, r3, #16
 800220e:   3019        adds  r0, #25
 8002210:   0a08        lsrs  r0, r1, #8
 8002212:   1060        asrs  r0, r4, #1
 8002214:   c00c        stmia r0!, {r2, r3}
 8002216:   0840        lsrs  r0, r0, #1
 8002218:   0180        lsls  r0, r0, #6
 800221a:   0013        movs  r3, r2
 800221c:   2803        cmp   r0, #3
 800221e:   0600        lsls  r0, r0, #24
 8002220:   0060        lsls  r0, r4, #1
 8002222:   800c        strh  r4, [r1, #0]
 8002224:   1800        adds  r0, r0, r0
 8002226:   0100        lsls  r0, r0, #4
 8002228:   0030        movs  r0, r6
 800222a:   6002        str   r2, [r0, #0]
 800222c:   0400        lsls  r0, r0, #16
 800222e:   00c0        lsls  r0, r0, #3
 8002230:   801c        strh  r4, [r3, #0]
 8002232:   7c01        ldrb  r1, [r0, #16]
 8002234:   0500        lsls  r0, r0, #20
 8002236:   01fc        lsls  r4, r7, #7
 8002238:   f809 2203   strb.w   r2, [r9, <undefined>]
 800223c:   03e0        lsls  r0, r4, #15
 800223e:   8042        strh  r2, [r0, #2]
 8002240:   0403        lsls  r3, r0, #16
 8002242:   0001        movs  r1, r0
 8002244:   0204        lsls  r4, r0, #8
 8002246:   0800        lsrs  r0, r0, #32
 8002248:   0008        movs  r0, r1
 800224a:   1008        asrs  r0, r1, #32
 800224c:   1000        asrs  r0, r0, #32
 800224e:   0020        movs  r0, r4
 8002250:   4020        ands  r0, r4
 8002252:   4000        ands  r0, r0
 8002254:   0080        lsls  r0, r0, #2
 8002256:   0080        lsls  r0, r0, #2
 8002258:   ffff 0001   vaddl.u<illegal width 64>  q8, d15, d1
 800225c:   0000        movs  r0, r0
 800225e:   2080        movs  r0, #128 ; 0x80
 8002260:   e000        b.n   8002264 <FlashStart+0x2264>
 8002262:   03c1        lsls  r1, r0, #15
 8002264:   0040        lsls  r0, r0, #1
 8002266:   8004        strh  r4, [r0, #0]
 8002268:   0f07        lsrs  r7, r0, #28
 800226a:   0800        lsrs  r0, r0, #32
 800226c:   0002        movs  r2, r0
 800226e:   1c1c        adds  r4, r3, #0
 8002270:   0800        lsrs  r0, r0, #32
 8002272:   0020        movs  r0, r4
 8002274:   7070        strb  r0, [r6, #1]
 8002276:   8000        strh  r0, [r0, #0]
 8002278:   0020        movs  r0, r4
 800227a:   c180        stmia r1!, {r7}
 800227c:   0000        movs  r0, r0
 800227e:   0101        lsls  r1, r0, #4
 8002280:   0600        lsls  r0, r0, #24
 8002282:   0003        movs  r3, r0
 8002284:   0208        lsls  r0, r1, #8
 8002286:   1000        asrs  r0, r0, #32
 8002288:   0004        movs  r4, r0
 800228a:   0820        lsrs  r0, r4, #32
 800228c:   4000        ands  r0, r0
 800228e:   0010        movs  r0, r2
 8002290:   fc7f 0c05         ; <UNDEFINED> instruction: 0xfc7f0c05
 8002294:   2026        movs  r0, #38  ; 0x26
 8002296:   6060        str   r0, [r4, #4]
 8002298:   0101        lsls  r1, r0, #4
 800229a:   0a03        lsrs  r3, r0, #8
 800229c:   1808        adds  r0, r1, r0
 800229e:   4050        eors  r0, r2
 80022a0:   80c0        strh  r0, [r0, #6]
 80022a2:   027e        lsls  r6, r7, #9
 80022a4:   1406        asrs  r6, r0, #16
 80022a6:   3010        adds  r0, #16
 80022a8:   80a0        strh  r0, [r4, #4]
 80022aa:   8180        strh  r0, [r0, #12]
 80022ac:   0c05        lsrs  r5, r0, #16
 80022ae:   260e        movs  r6, #14
 80022b0:   d040        beq.n 8002334 <FlashStart+0x2334>
 80022b2:   010f        lsls  r7, r1, #4
 80022b4:   007c        lsls  r4, r7, #1
 80022b6:   0000        movs  r0, r0

FUNCTION:   TODO_80022b8
 80022b8:   b510        push  {r4, lr}
 80022ba:   f04f 4120   mov.w r1, #2684354560   ; 0xa0000000
 80022be:   6842        ldr   r2, [r0, #4]
 80022c0:   6883        ldr   r3, [r0, #8]
 80022c2:   431a        orrs  r2, r3
 80022c4:   68c3        ldr   r3, [r0, #12]
 80022c6:   431a        orrs  r2, r3
 80022c8:   6903        ldr   r3, [r0, #16]
 80022ca:   431a        orrs  r2, r3
 80022cc:   6943        ldr   r3, [r0, #20]
 80022ce:   431a        orrs  r2, r3
 80022d0:   6983        ldr   r3, [r0, #24]
 80022d2:   431a        orrs  r2, r3
 80022d4:   69c3        ldr   r3, [r0, #28]
 80022d6:   431a        orrs  r2, r3
 80022d8:   6a03        ldr   r3, [r0, #32]
 80022da:   431a        orrs  r2, r3
 80022dc:   6a43        ldr   r3, [r0, #36]  ; 0x24
 80022de:   431a        orrs  r2, r3
 80022e0:   6a83        ldr   r3, [r0, #40]  ; 0x28
 80022e2:   431a        orrs  r2, r3
 80022e4:   6ac3        ldr   r3, [r0, #44]  ; 0x2c
 80022e6:   431a        orrs  r2, r3
 80022e8:   6803        ldr   r3, [r0, #0]
 80022ea:   f841 2023   str.w r2, [r1, r3, lsl #2]
 80022ee:   6882        ldr   r2, [r0, #8]
 80022f0:   2a08        cmp   r2, #8
 80022f2:   d106        bne.n 8002302 <FlashStart+0x2302>
 80022f4:   6802        ldr   r2, [r0, #0]
 80022f6:   f851 3022   ldr.w r3, [r1, r2, lsl #2]
 80022fa:   f043 0340   orr.w r3, r3, #64 ; 0x40
 80022fe:   f841 3022   str.w r3, [r1, r2, lsl #2]
 8002302:   6b01        ldr   r1, [r0, #48]  ; 0x30
 8002304:   680a        ldr   r2, [r1, #0]
 8002306:   684b        ldr   r3, [r1, #4]
 8002308:   ea42 1203   orr.w r2, r2, r3, lsl #4
 800230c:   688b        ldr   r3, [r1, #8]
 800230e:   ea42 2203   orr.w r2, r2, r3, lsl #8
 8002312:   68cb        ldr   r3, [r1, #12]
 8002314:   ea42 4203   orr.w r2, r2, r3, lsl #16
 8002318:   690b        ldr   r3, [r1, #16]
 800231a:   ea42 5203   orr.w r2, r2, r3, lsl #20
 800231e:   694b        ldr   r3, [r1, #20]
 8002320:   ea42 6203   orr.w r2, r2, r3, lsl #24
 8002324:   6989        ldr   r1, [r1, #24]
 8002326:   4311        orrs  r1, r2
 8002328:   6802        ldr   r2, [r0, #0]
 800232a:   0092        lsls  r2, r2, #2
 800232c:   f1a2 42c0   sub.w r2, r2, #1610612736  ; 0x60000000
 8002330:   6051        str   r1, [r2, #4]
 8002332:   6801        ldr   r1, [r0, #0]
 8002334:   4a0d        ldr   r2, =0xa0000104    ; { FSMC } | [pc, #52]  ; (800236c <FlashStart+0x236c>)
 8002336:   6a83        ldr   r3, [r0, #40]  ; 0x28
 8002338:   f5b3 4f80   cmp.w r3, #16384  ; 0x4000
 800233c:   d110        bne.n 8002360 <FlashStart+0x2360>
 800233e:   6b40        ldr   r0, [r0, #52]  ; 0x34
 8002340:   6803        ldr   r3, [r0, #0]
 8002342:   6844        ldr   r4, [r0, #4]
 8002344:   ea43 1304   orr.w r3, r3, r4, lsl #4
 8002348:   6884        ldr   r4, [r0, #8]
 800234a:   ea43 2304   orr.w r3, r3, r4, lsl #8
 800234e:   6904        ldr   r4, [r0, #16]
 8002350:   ea43 5304   orr.w r3, r3, r4, lsl #20
 8002354:   6944        ldr   r4, [r0, #20]
 8002356:   ea43 6304   orr.w r3, r3, r4, lsl #24
 800235a:   6980        ldr   r0, [r0, #24]
 800235c:   4318        orrs  r0, r3
 800235e:   e001        b.n   8002364 <FlashStart+0x2364>
 8002360:   f06f 4070   mvn.w r0, #4026531840   ; 0xf0000000
 8002364:   f842 0021   str.w r0, [r2, r1, lsl #2]
 8002368:   bd10        pop   {r4, pc}
 800236a:   0000        movs  r0, r0

.pool
 800236c:   a0000104    FSMC


FUNCTION:   TODO_8002370
 8002370:   f04f 4220   mov.w r2, #2684354560   ; 0xa0000000
 8002374:   2900        cmp   r1, #0
 8002376:   f852 1020   ldr.w r1, [r2, r0, lsl #2]
 800237a:   bf12        itee  ne
 800237c:   f041 0101   orrne.w  r1, r1, #1
 8002380:   4b02        ldreq r3, =0xffffe    ; [pc, #8]   ; (800238c <FlashStart+0x238c>)
 8002382:   4019        andeq r1, r3
 8002384:   f842 1020   str.w r1, [r2, r0, lsl #2]
 8002388:   4770        bx lr
 800238a:   bf00        nop

.pool
 800238c:   000ffffe


FUNCTION:   TODO_8002390
 8002390:   b580        push  {r7, lr}
 8002392:   2001        movs  r0, #1
 8002394:   f7ff fc2c   bl 8001bf0 <FlashStart+0x1bf0>
 8002398:   4831        ldr   r0, =0x40005c40    ; { USB device FS registers } | [pc, #196] ; (8002460 <FlashStart+0x2460>)
 800239a:   2101        movs  r1, #1
 800239c:   6001        str   r1, [r0, #0]
 800239e:   2100        movs  r1, #0
 80023a0:   6001        str   r1, [r0, #0]
 80023a2:   6041        str   r1, [r0, #4]
 80023a4:   f44f 51e0   mov.w r1, #7168   ; 0x1c00
 80023a8:   4a02        ldr   r2, =0x20000888    ; { RAM (bss) } | [pc, #8]   ; (80023b4 <FlashStart+0x23b4>)
 80023aa:   8011        strh  r1, [r2, #0]
 80023ac:   6001        str   r1, [r0, #0]
 80023ae:   2000        movs  r0, #0
 80023b0:   bd02        pop   {r1, pc}
 80023b2:   bf00        nop

.pool
 80023b4:   20000888    RAM (bss)


FUNCTION:   TODO_80023b8
 80023b8:   4829        ldr   r0, =0x40005c40    ; { USB device FS registers } | [pc, #164] ; (8002460 <FlashStart+0x2460>)
 80023ba:   6801        ldr   r1, [r0, #0]
 80023bc:   f041 0108   orr.w r1, r1, #8
 80023c0:   b289        uxth  r1, r1
 80023c2:   6001        str   r1, [r0, #0]
 80023c4:   6801        ldr   r1, [r0, #0]
 80023c6:   f041 0104   orr.w r1, r1, #4
 80023ca:   b289        uxth  r1, r1
 80023cc:   6001        str   r1, [r0, #0]
 80023ce:   f7ff bbfc   b.w   8001bca <FlashStart+0x1bca>

FUNCTION:   TODO_80023d2
 80023d2:   b510        push  {r4, lr}
 80023d4:   4c22        ldr   r4, =0x40005c40    ; { USB device FS registers } | [pc, #136] ; (8002460 <FlashStart+0x2460>)
 80023d6:   6820        ldr   r0, [r4, #0]
 80023d8:   f64f 71fb   movw  r1, #65531  ; 0xfffb
 80023dc:   4008        ands  r0, r1
 80023de:   6020        str   r0, [r4, #0]
 80023e0:   f7ff fbf8   bl 8001bd4 <FlashStart+0x1bd4>
 80023e4:   f44f 403f   mov.w r0, #48896  ; 0xbf00
 80023e8:   6020        str   r0, [r4, #0]
 80023ea:   bd10        pop   {r4, pc}

FUNCTION:   TODO_80023ec
 80023ec:   b510        push  {r4, lr}
 80023ee:   4c1b        ldr   r4, =0x20000878    ; { RAM (bss) } | [pc, #108] ; (800245c <FlashStart+0x245c>)
 80023f0:   2807        cmp   r0, #7
 80023f2:   d000        beq.n 80023f6 <FlashStart+0x23f6>
 80023f4:   7020        strb  r0, [r4, #0]
 80023f6:   481a        ldr   r0, =0x40005c40    ; { USB device FS registers } | [pc, #104] ; (8002460 <FlashStart+0x2460>)
 80023f8:   7821        ldrb  r1, [r4, #0]
 80023fa:   2905        cmp   r1, #5
 80023fc:   d82b        bhi.n 8002456 <FlashStart+0x2456>
 80023fe:   e8df f001   tbb   [pc, r1]
 8002402:   0603        lsls  r3, r0, #24
 8002404:   0e0a        lsrs  r2, r1, #24
 8002406:   1f15        subs  r5, r2, #4
 8002408:   f7ff ffe3   bl 80023d2 <FlashStart+0x23d2>
 800240c:   e023        b.n   8002456 <FlashStart+0x2456>
 800240e:   f7ff ffe0   bl 80023d2 <FlashStart+0x23d2>
 8002412:   2004        movs  r0, #4
 8002414:   e020        b.n   8002458 <FlashStart+0x2458>
 8002416:   2002        movs  r0, #2
 8002418:   7060        strb  r0, [r4, #1]
 800241a:   2003        movs  r0, #3
 800241c:   e01c        b.n   8002458 <FlashStart+0x2458>
 800241e:   7860        ldrb  r0, [r4, #1]
 8002420:   30ff        adds  r0, #255 ; 0xff
 8002422:   7060        strb  r0, [r4, #1]
 8002424:   7860        ldrb  r0, [r4, #1]
 8002426:   2800        cmp   r0, #0
 8002428:   d117        bne.n 800245a <FlashStart+0x245a>
 800242a:   e7f2        b.n   8002412 <FlashStart+0x2412>
 800242c:   6801        ldr   r1, [r0, #0]
 800242e:   f041 0110   orr.w r1, r1, #16
 8002432:   b289        uxth  r1, r1
 8002434:   6001        str   r1, [r0, #0]
 8002436:   2005        movs  r0, #5
 8002438:   7020        strb  r0, [r4, #0]
 800243a:   200a        movs  r0, #10
 800243c:   7060        strb  r0, [r4, #1]
 800243e:   bd10        pop   {r4, pc}
 8002440:   7861        ldrb  r1, [r4, #1]
 8002442:   31ff        adds  r1, #255 ; 0xff
 8002444:   7061        strb  r1, [r4, #1]
 8002446:   7861        ldrb  r1, [r4, #1]
 8002448:   2900        cmp   r1, #0
 800244a:   d106        bne.n 800245a <FlashStart+0x245a>
 800244c:   6801        ldr   r1, [r0, #0]
 800244e:   f64f 72ef   movw  r2, #65519  ; 0xffef
 8002452:   4011        ands  r1, r2
 8002454:   6001        str   r1, [r0, #0]
 8002456:   2006        movs  r0, #6
 8002458:   7020        strb  r0, [r4, #0]
 800245a:   bd10        pop   {r4, pc}

.pool
 800245c:   20000878    RAM (bss)
 8002460:   40005c40    USB device FS registers


FUNCTION:   Set_GPIO_Configuration

[r1] points to a structure:

typedef struct
{
   uint16_t bitfield
   uint8_t mode_2
   uint8_t mode
} GPIO_Setup_t;

r0 points to a GPIO configuration register block.

"mode" values are:
bits 3:0 - CNF and MODE values as described in sections 9.2.1 and 9.2.2 of RM0008
bit 4    - if set, mode_2 will be OR'd with the LS 4 bits of mode
bit 5    - if CNF/MODE == 8 (input with pull-up or pull-down) and bit 5 is set, the port will be pulled down
bit 6    - if CNF/MODE == 8 and bit 6 is set, the port will be pulled up

GPIO_Configuration_Block *SetGPIOConfiguration (GPIO_Configuration_Block *pGpioCB, GPIO_Setup_t *pGpioSetup)
{
   uint8_t cnf_mode = pGpioSetup->mode & 0x0f;
   int bit_counter;
   int bit_mask;
   int CR_temp;
   
   if (pGpioSetup->mode & 0x10)
   {
      cnf_mode |= pGpioSetup->mode_2;
   }
   if ((pGpioSetup->bitfield & 0x00ff) != 0)
   {
      CR_temp = pGpioCB->CRL;
      for (bit_counter=0; bit_counter<8; bit_counter++)
      {
         if ((pGpioSetup->bitfield & (1<<bit_counter)) != 0)
         {
            CR_temp &= ~(0x0f << (bit_counter * 4));
            CR_temp |= (cnf_mode << (bit_counter * 4));
            if (pGpioSetup->mode == 0x28)
            {
               pGpioCB->BRR = (1<<bit_counter);
            }
            if (pGpioSetup->mode == 0x48)
            {
               pGpioCB->BSRR = (1<<bit_counter);
            }
         }
      }
      pGpioCB->CRL = CR_temp;
   }
   if ((pGpioSetup->bitfield & 0xff00) != 0)
   {
      CR_temp = pGpioCB->CRH;
      for (bit_counter=0; bit_counter<8; bit_counter++)
      {
         if ((pGpioSetup->bitfield & (1<<(bit_counter+8))) != 0)
         {
            CR_temp &= ~(0x0f << (bit_counter * 4));
            CR_temp |= (cnf_mode << (bit_counter * 4));
            if (pGpioSetup->mode == 0x28)
            {
               pGpioCB->BRR = (1<<(bit_counter+8));
            }
            if (pGpioSetup->mode == 0x48)
            {
               pGpioCB->BSRR = (1<<(bit_counter+8));
            }
         }
      }
      pGpioCB->CRH = CR_temp;
   }
   return pGpioCB;
}

 8002464:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
 8002468:   78cb        ldrb  r3, [r1, #3]                     ; r3 = mode
 800246a:   f003 020f   and.w r2, r3, #15                      ; r2 = CNF/MODE
 800246e:   06db        lsls  r3, r3, #27                      ; if bit 4 of mode set, then get mode_2 and or it with r2
 8002470:   d501        bpl.n 8002476 <FlashStart+0x2476>      ; label_1 - will jump unless bit 4 of [r1, #3] was set on entry
 8002472:   788b        ldrb  r3, [r1, #2]
 8002474:   431a        orrs  r2, r3
 
label_1:
 8002476:   880b        ldrh  r3, [r1, #0]                     ; get bitfield from structure
 8002478:   2401        movs  r4, #1                           ; r4 and r5 are convenience constants
 800247a:   250f        movs  r5, #15
 800247c:   b2de        uxtb  r6, r3                           ; start with lower 8 bits - if zero, then jump to label_2
 800247e:   b316        cbz   r6, 80024c6 <FlashStart+0x24c6>  ; label_2
 8002480:   f8d0 c000   ldr.w ip, [r0]                         ; get GPIOx_CRL
 8002484:   2600        movs  r6, #0                           ; r6 starts at 0
 
label_4:
 8002486:   fa04 f706   lsl.w r7, r4, r6
 800248a:   ea07 0803   and.w r8, r7, r3
 800248e:   45b8        cmp   r8, r7
 8002490:   d114        bne.n 80024bc <FlashStart+0x24bc>      ; label_3
 8002492:   ea4f 0e86   mov.w lr, r6, lsl #2
 8002496:   fa05 f80e   lsl.w r8, r5, lr
 800249a:   ea2c 0c08   bic.w ip, ip, r8
 800249e:   fa02 fe0e   lsl.w lr, r2, lr
 80024a2:   ea4e 0c0c   orr.w ip, lr, ip
 80024a6:   f891 e003   ldrb.w   lr, [r1, #3]
 80024aa:   f1be 0f28   cmp.w lr, #40  ; 0x28
 80024ae:   d101        bne.n 80024b4 <FlashStart+0x24b4>      ; label_5
 80024b0:   6147        str   r7, [r0, #20]
 80024b2:   e003        b.n   80024bc <FlashStart+0x24bc>      ; label_3

label_5:
 80024b4:   f1be 0f48   cmp.w lr, #72  ; 0x48
 80024b8:   d100        bne.n 80024bc <FlashStart+0x24bc>      ; label_3
 80024ba:   6107        str   r7, [r0, #16]

label_3:
 80024bc:   1c76        adds  r6, r6, #1
 80024be:   2e08        cmp   r6, #8
 80024c0:   d3e1        bcc.n 8002486 <FlashStart+0x2486>      ; label_4
 80024c2:   f8c0 c000   str.w ip, [r0]

label_2:
 80024c6:   f44f 7680   mov.w r6, #256 ; 0x100
 80024ca:   42b3        cmp   r3, r6                           ; jump if r3 < r6
 80024cc:   d325        bcc.n 800251a <FlashStart+0x251a>      ; label_6 (return)
 80024ce:   f8d0 c004   ldr.w ip, [r0, #4]                     ; Port configuration register high
 80024d2:   2600        movs  r6, #0                           ; r6 starts at 0, adds 1 each time, limit 7

label_9:
 80024d4:   f106 0708   add.w r7, r6, #8                       ; r7 starts at 8
 80024d8:   fa04 f707   lsl.w r7, r4, r7                       ; r7 = 1<<r7
 80024dc:   ea07 0803   and.w r8, r7, r3                       ; if (r7&r3)!=r7
 80024e0:   45b8        cmp   r8, r7                           ; then branch
 80024e2:   d115        bne.n 8002510 <FlashStart+0x2510>      ; label_7
 80024e4:   ea4f 0e86   mov.w lr, r6, lsl #2                   ; r6 = 5 in this case
 80024e8:   fa05 f80e   lsl.w r8, r5, lr                       ; r8 = 0x0f << (r6 * 4)
 80024ec:   ea2c 0c08   bic.w ip, ip, r8                       ; PCRH &= ~r8
 80024f0:   fa02 fe0e   lsl.w lr, r2, lr                       ; get new nibble into the PCRH at the right place
 80024f4:   ea4e 0c0c   orr.w ip, lr, ip
 80024f8:   f891 e003   ldrb.w   lr, [r1, #3]                  ; get the new nibble again
 80024fc:   f1be 0f28   cmp.w lr, #40  ; 0x28                  ; if not == 0x28 then jump
 8002500:   d100        bne.n 8002504 <FlashStart+0x2504>      ; label_8
 8002502:   6147        str   r7, [r0, #20]                    ; write to BRR (bit reset register)

label_8:
 8002504:   f891 e003   ldrb.w   lr, [r1, #3]                  ; get the new nibble again
 8002508:   f1be 0f48   cmp.w lr, #72  ; 0x48                  ; if not == 0x48 then jump
 800250c:   d100        bne.n 8002510 <FlashStart+0x2510>      ; label_7
 800250e:   6107        str   r7, [r0, #16]                    ; write to BSRR (bit set/reset register) to set bits

label_7:
 8002510:   1c76        adds  r6, r6, #1                       ; loop around again
 8002512:   2e08        cmp   r6, #8
 8002514:   d3de        bcc.n 80024d4 <FlashStart+0x24d4>      ; label_9
 8002516:   f8c0 c004   str.w ip, [r0, #4]                     ; write to PCRH

label_6:
 800251a:   e8bd 81f0   ldmia.w  sp!, {r4, r5, r6, r7, r8, pc}

FUNCTION:   TODO_800251e
 800251e:   6880        ldr   r0, [r0, #8]
 8002520:   e7ff        b.n   8002522 <FlashStart+0x2522>
 8002522:   4001        ands  r1, r0
 8002524:   0008        movs  r0, r1
 8002526:   d000        beq.n 800252a <FlashStart+0x252a>
 8002528:   2001        movs  r0, #1
 800252a:   b2c0        uxtb  r0, r0
 800252c:   4770        bx lr

FUNCTION:   Write_BSRR
 800252e:   6101        str   r1, [r0, #16]
 8002530:   4770        bx lr

FUNCTION:   TODO_8002532
 8002532:   6141        str   r1, [r0, #20]
 8002534:   4770        bx lr
 8002536:   0000        movs  r0, r0
 8002538:   b570        push  {r4, r5, r6, lr}
 800253a:   4c28        ldr   r4, =0x20000884    ; { RAM (bss) } | [pc, #160] ; (80025dc <FlashStart+0x25dc>)
 800253c:   4d28        ldr   r5, =0x40005c44    ; { USB device FS registers } | [pc, #160] ; (80025e0 <FlashStart+0x25e0>)
 800253e:   6828        ldr   r0, [r5, #0]
 8002540:   8060        strh  r0, [r4, #2]
 8002542:   4e28        ldr   r6, =0x20000888    ; { RAM (bss) } | [pc, #160] ; (80025e4 <FlashStart+0x25e4>)
 8002544:   8860        ldrh  r0, [r4, #2]
 8002546:   8831        ldrh  r1, [r6, #0]
 8002548:   4008        ands  r0, r1
 800254a:   0400        lsls  r0, r0, #16
 800254c:   d501        bpl.n 8002552 <FlashStart+0x2552>
 800254e:   f7ff fcf3   bl 8001f38 <FlashStart+0x1f38>
 8002552:   8860        ldrh  r0, [r4, #2]
 8002554:   8831        ldrh  r1, [r6, #0]
 8002556:   4008        ands  r0, r1
 8002558:   0540        lsls  r0, r0, #21
 800255a:   d505        bpl.n 8002568 <FlashStart+0x2568>
 800255c:   f64f 30ff   movw  r0, #64511  ; 0xfbff
 8002560:   6028        str   r0, [r5, #0]
 8002562:   4821        ldr   r0, =0x200009a0    ; { RAM (data) } | [pc, #132] ; (80025e8 <FlashStart+0x25e8>)
 8002564:   6840        ldr   r0, [r0, #4]
 8002566:   4780        blx   r0
 8002568:   8830        ldrh  r0, [r6, #0]
 800256a:   8861        ldrh  r1, [r4, #2]
 800256c:   4001        ands  r1, r0
 800256e:   0489        lsls  r1, r1, #18
 8002570:   d502        bpl.n 8002578 <FlashStart+0x2578>
 8002572:   f64d 71ff   movw  r1, #57343  ; 0xdfff
 8002576:   6029        str   r1, [r5, #0]
 8002578:   8861        ldrh  r1, [r4, #2]
 800257a:   4008        ands  r0, r1
 800257c:   04c0        lsls  r0, r0, #19
 800257e:   d505        bpl.n 800258c <FlashStart+0x258c>
 8002580:   f64e 70ff   movw  r0, #61439  ; 0xefff
 8002584:   6028        str   r0, [r5, #0]
 8002586:   2000        movs  r0, #0
 8002588:   f7ff ff30   bl 80023ec <FlashStart+0x23ec>
 800258c:   8860        ldrh  r0, [r4, #2]
 800258e:   8831        ldrh  r1, [r6, #0]
 8002590:   4008        ands  r0, r1
 8002592:   0500        lsls  r0, r0, #20
 8002594:   d50b        bpl.n 80025ae <FlashStart+0x25ae>
 8002596:   4815        ldr   r0, =0x20000af0    ; { RAM (data) } | [pc, #84]  ; (80025ec <FlashStart+0x25ec>)
 8002598:   7800        ldrb  r0, [r0, #0]
 800259a:   b110        cbz   r0, 80025a2 <FlashStart+0x25a2>
 800259c:   f7ff ff0c   bl 80023b8 <FlashStart+0x23b8>
 80025a0:   e002        b.n   80025a8 <FlashStart+0x25a8>
 80025a2:   2002        movs  r0, #2
 80025a4:   f7ff ff22   bl 80023ec <FlashStart+0x23ec>
 80025a8:   f24f 70ff   movw  r0, #63487  ; 0xf7ff
 80025ac:   6028        str   r0, [r5, #0]
 80025ae:   8830        ldrh  r0, [r6, #0]
 80025b0:   8861        ldrh  r1, [r4, #2]
 80025b2:   4001        ands  r1, r0
 80025b4:   0589        lsls  r1, r1, #22
 80025b6:   d505        bpl.n 80025c4 <FlashStart+0x25c4>
 80025b8:   f64f 51ff   movw  r1, #65023  ; 0xfdff
 80025bc:   6029        str   r1, [r5, #0]
 80025be:   7821        ldrb  r1, [r4, #0]
 80025c0:   1c49        adds  r1, r1, #1
 80025c2:   7021        strb  r1, [r4, #0]
 80025c4:   8861        ldrh  r1, [r4, #2]
 80025c6:   4008        ands  r0, r1
 80025c8:   05c0        lsls  r0, r0, #23
 80025ca:   d505        bpl.n 80025d8 <FlashStart+0x25d8>
 80025cc:   f64f 60ff   movw  r0, #65279  ; 0xfeff
 80025d0:   6028        str   r0, [r5, #0]
 80025d2:   2007        movs  r0, #7
 80025d4:   f7ff ff0a   bl 80023ec <FlashStart+0x23ec>
 80025d8:   bd70        pop   {r4, r5, r6, pc}
 80025da:   bf00        nop

.pool
 80025dc:   20000884    RAM (bss)
 80025e0:   40005c44    USB device FS registers
 80025e4:   20000888    RAM (bss)
 80025e8:   200009a0    RAM (data)
 80025ec:   20000af0    RAM (data)


FUNCTION:   TODO_80025f0
 80025f0:   b510        push  {r4, lr}
 80025f2:   b086        sub   sp, #24
 80025f4:   2101        movs  r1, #1
 80025f6:   f241 000c   movw  r0, #4108   ; 0x100c
 80025fa:   f7ff fa6f   bl 8001adc <FlashStart+0x1adc>
 80025fe:   20e0        movs  r0, #224 ; 0xe0
 8002600:   f8ad 0000   strh.w   r0, [sp]
 8002604:   2018        movs  r0, #24
 8002606:   f88d 0003   strb.w   r0, [sp, #3]
 800260a:   2003        movs  r0, #3
 800260c:   f88d 0002   strb.w   r0, [sp, #2]
 8002610:   a900        add   r1, sp, #0
 8002612:   481c        ldr   r0, =0x40010800    ; { GPIO Port A } | [pc, #112] ; (8002684 <FlashStart+0x2684>)
 8002614:   f7ff ff26   bl 8002464 <FlashStart+0x2464>
 8002618:   2004        movs  r0, #4
 800261a:   f8ad 0000   strh.w   r0, [sp]
 800261e:   2010        movs  r0, #16
 8002620:   f88d 0003   strb.w   r0, [sp, #3]
 8002624:   4c1b        ldr   r4, =0x40010c00    ; { GPIO Port B } | [pc, #108] ; (8002694 <FlashStart+0x2694>)
 8002626:   a900        add   r1, sp, #0
 8002628:   4620        mov   r0, r4
 800262a:   f7ff ff1b   bl 8002464 <FlashStart+0x2464>
 800262e:   f000 f82b   bl 8002688 <FlashStart+0x2688>
 8002632:   2000        movs  r0, #0
 8002634:   f8ad 0004   strh.w   r0, [sp, #4]
 8002638:   f44f 7082   mov.w r0, #260 ; 0x104
 800263c:   f8ad 0006   strh.w   r0, [sp, #6]
 8002640:   2000        movs  r0, #0
 8002642:   f8ad 0008   strh.w   r0, [sp, #8]
 8002646:   2002        movs  r0, #2
 8002648:   f8ad 000a   strh.w   r0, [sp, #10]
 800264c:   2001        movs  r0, #1
 800264e:   f8ad 000c   strh.w   r0, [sp, #12]
 8002652:   f44f 7000   mov.w r0, #512 ; 0x200
 8002656:   f8ad 000e   strh.w   r0, [sp, #14]
 800265a:   2008        movs  r0, #8
 800265c:   f8ad 0010   strh.w   r0, [sp, #16]
 8002660:   2000        movs  r0, #0
 8002662:   f8ad 0012   strh.w   r0, [sp, #18]
 8002666:   2007        movs  r0, #7
 8002668:   f8ad 0014   strh.w   r0, [sp, #20]
 800266c:   4c08        ldr   r4, =0x40013000    ; { SPI1 } | [pc, #32]  ; (8002690 <FlashStart+0x2690>)
 800266e:   a901        add   r1, sp, #4
 8002670:   4620        mov   r0, r4
 8002672:   f000 f933   bl 80028dc <FlashStart+0x28dc>
 8002676:   2101        movs  r1, #1
 8002678:   4620        mov   r0, r4
 800267a:   f000 f94b   bl 8002914 <FlashStart+0x2914>
 800267e:   b006        add   sp, #24
 8002680:   bd10        pop   {r4, pc}
 8002682:   bf00        nop

.pool
 8002684:   40010800    GPIO Port A


FUNCTION:   TODO_8002688
 8002688:   2104        movs  r1, #4
 800268a:   4620        mov   r0, r4
 800268c:   f7ff bf4f   b.w   800252e <FlashStart+0x252e>

.pool
 8002690:   40013000    SPI1
 8002694:   40010c00    GPIO Port B

 8002698:   b580        push  {r7, lr}
 800269a:   f000 f97b   bl 8002994 <FlashStart+0x2994>
 800269e:   f000 fa9d   bl 8002bdc <FlashStart+0x2bdc>
 80026a2:   f000 fa8b   bl 8002bbc <FlashStart+0x2bbc>
 80026a6:   4823        ldr   r0, =0x20000854    ; { RAM (bss) } | [pc, #140] ; (8002734 <FlashStart+0x2734>)
 80026a8:   f7ff fc24   bl 8001ef4 <FlashStart+0x1ef4>
 80026ac:   f7ff fc35   bl 8001f1a <FlashStart+0x1f1a>
 80026b0:   2000        movs  r0, #0
 80026b2:   bd02        pop   {r1, pc}

FUNCTION:   TODO_80026b4
 80026b4:   f000 b970   b.w   8002998 <FlashStart+0x2998>

FUNCTION:   TODO_80026b8
 80026b8:   f000 b974   b.w   80029a4 <FlashStart+0x29a4>

FUNCTION:   TODO_80026bc
 80026bc:   f000 427c   and.w r2, r0, #4227858432  ; 0xfc000000
 80026c0:   f1b2 6f00   cmp.w r2, #134217728 ; 0x8000000
 80026c4:   d104        bne.n 80026d0 <FlashStart+0x26d0>
 80026c6:   4a03        ldr   r2, =0x2000086c    ; { RAM (bss) } | [pc, #12]  ; (80026d4 <FlashStart+0x26d4>)
 80026c8:   4b03        ldr   r3, =0x80029e5    ; { Flash } | [pc, #12]  ; (80026d8 <FlashStart+0x26d8>)
 80026ca:   6013        str   r3, [r2, #0]
 80026cc:   f000 b98a   b.w   80029e4 <FlashStart+0x29e4>
 80026d0:   2000        movs  r0, #0
 80026d2:   4770        bx lr

.pool
 80026d4:   2000086c    RAM (bss)
 80026d8:   080029e5    Flash


FUNCTION:   TODO_80026dc
 80026dc:   b530        push  {r4, r5, lr}
 80026de:   0e80        lsrs  r0, r0, #26
 80026e0:   f000 0003   and.w r0, r0, #3
 80026e4:   f001 0101   and.w r1, r1, #1
 80026e8:   2801        cmp   r0, #1
 80026ea:   d10d        bne.n 8002708 <FlashStart+0x2708>
 80026ec:   4b11        ldr   r3, =0x20000854    ; { RAM (bss) } | [pc, #68]  ; (8002734 <FlashStart+0x2734>)
 80026ee:   889c        ldrh  r4, [r3, #4]
 80026f0:   f242 2521   movw  r5, #8737   ; 0x2221
 80026f4:   42ac        cmp   r4, r5
 80026f6:   d107        bne.n 8002708 <FlashStart+0x2708>
 80026f8:   881b        ldrh  r3, [r3, #0]
 80026fa:   2b20        cmp   r3, #32
 80026fc:   d101        bne.n 8002702 <FlashStart+0x2702>
 80026fe:   2003        movs  r0, #3
 8002700:   e002        b.n   8002708 <FlashStart+0x2708>
 8002702:   2b01        cmp   r3, #1
 8002704:   d100        bne.n 8002708 <FlashStart+0x2708>
 8002706:   2004        movs  r0, #4
 8002708:   4b08        ldr   r3, =0x20000938    ; { RAM (data) } | [pc, #32]  ; (800272c <FlashStart+0x272c>)
 800270a:   781b        ldrb  r3, [r3, #0]
 800270c:   b11b        cbz   r3, 8002716 <FlashStart+0x2716>
 800270e:   2010        movs  r0, #16
 8002710:   7050        strb  r0, [r2, #1]
 8002712:   2027        movs  r0, #39  ; 0x27
 8002714:   e006        b.n   8002724 <FlashStart+0x2724>
 8002716:   4b06        ldr   r3, =0x8002b94    ; { Flash } | [pc, #24]  ; (8002730 <FlashStart+0x2730>)
 8002718:   eb03 0080   add.w r0, r3, r0, lsl #2
 800271c:   f830 0011   ldrh.w   r0, [r0, r1, lsl #1]
 8002720:   7050        strb  r0, [r2, #1]
 8002722:   0a00        lsrs  r0, r0, #8
 8002724:   7090        strb  r0, [r2, #2]
 8002726:   2000        movs  r0, #0
 8002728:   70d0        strb  r0, [r2, #3]
 800272a:   bd30        pop   {r4, r5, pc}

.pool
 800272c:   20000938    RAM (data)
 8002730:   08002b94    Flash
 8002734:   20000854    RAM (bss)


FUNCTION:   TODO_8002738
 8002738:   b34a        cbz   r2, 800278e <FlashStart+0x278e>
 800273a:   078b        lsls  r3, r1, #30
 800273c:   d007        beq.n 800274e <FlashStart+0x274e>
 800273e:   f811 3b01   ldrb.w   r3, [r1], #1
 8002742:   f800 3b01   strb.w   r3, [r0], #1
 8002746:   1e52        subs  r2, r2, #1
 8002748:   d021        beq.n 800278e <FlashStart+0x278e>
 800274a:   078b        lsls  r3, r1, #30
 800274c:   d1f7        bne.n 800273e <FlashStart+0x273e>
 800274e:   0783        lsls  r3, r0, #30
 8002750:   d11e        bne.n 8002790 <FlashStart+0x2790>
 8002752:   3a10        subs  r2, #16
 8002754:   d307        bcc.n 8002766 <FlashStart+0x2766>
 8002756:   b430        push  {r4, r5}
 8002758:   e8b1 1038   ldmia.w  r1!, {r3, r4, r5, ip}
 800275c:   3a10        subs  r2, #16
 800275e:   e8a0 1038   stmia.w  r0!, {r3, r4, r5, ip}
 8002762:   d2f9        bcs.n 8002758 <FlashStart+0x2758>
 8002764:   bc30        pop   {r4, r5}
 8002766:   0753        lsls  r3, r2, #29
 8002768:   bf24        itt   cs
 800276a:   e8b1 1008   ldmiacs.w   r1!, {r3, ip}
 800276e:   e8a0 1008   stmiacs.w   r0!, {r3, ip}
 8002772:   bf44        itt   mi
 8002774:   f851 3b04   ldrmi.w  r3, [r1], #4
 8002778:   f840 3b04   strmi.w  r3, [r0], #4
 800277c:   07d2        lsls  r2, r2, #31
 800277e:   bf24        itt   cs
 8002780:   f831 2b02   ldrhcs.w r2, [r1], #2
 8002784:   f820 2b02   strhcs.w r2, [r0], #2
 8002788:   bf44        itt   mi
 800278a:   780b        ldrbmi   r3, [r1, #0]
 800278c:   7003        strbmi   r3, [r0, #0]
 800278e:   4770        bx lr
 8002790:   3a08        subs  r2, #8
 8002792:   d307        bcc.n 80027a4 <FlashStart+0x27a4>
 8002794:   e8b1 1008   ldmia.w  r1!, {r3, ip}
 8002798:   3a08        subs  r2, #8
 800279a:   f840 3b04   str.w r3, [r0], #4
 800279e:   f840 cb04   str.w ip, [r0], #4
 80027a2:   d2f7        bcs.n 8002794 <FlashStart+0x2794>
 80027a4:   0753        lsls  r3, r2, #29
 80027a6:   e7e4        b.n   8002772 <FlashStart+0x2772>

FUNCTION:   TODO_80027a8
 80027a8:   b570        push  {r4, r5, r6, lr}
 80027aa:   7803        ldrb  r3, [r0, #0]
 80027ac:   461a        mov   r2, r3
 80027ae:   2101        movs  r1, #1
 80027b0:   78c4        ldrb  r4, [r0, #3]
 80027b2:   b1ec        cbz   r4, 80027f0 <FlashStart+0x27f0>
 80027b4:   4b15        ldr   r3, =0xe000ed0c    ; { Cortex-M3 SCS } | [pc, #84]  ; (800280c <FlashStart+0x280c>)
 80027b6:   681b        ldr   r3, [r3, #0]
 80027b8:   f403 63e0   and.w r3, r3, #1792  ; 0x700
 80027bc:   f5c3 63e0   rsb   r3, r3, #1792  ; 0x700
 80027c0:   0a1b        lsrs  r3, r3, #8
 80027c2:   7844        ldrb  r4, [r0, #1]
 80027c4:   f1c3 0504   rsb   r5, r3, #4
 80027c8:   40ac        lsls  r4, r5
 80027ca:   7885        ldrb  r5, [r0, #2]
 80027cc:   260f        movs  r6, #15
 80027ce:   fa26 f303   lsr.w r3, r6, r3
 80027d2:   402b        ands  r3, r5
 80027d4:   4323        orrs  r3, r4
 80027d6:   011b        lsls  r3, r3, #4
 80027d8:   4c09        ldr   r4, =0xe000e400    ; { Cortex-M3 SCS } | [pc, #36]  ; (8002800 <FlashStart+0x2800>)
 80027da:   5513        strb  r3, [r2, r4]
 80027dc:   7800        ldrb  r0, [r0, #0]
 80027de:   1142        asrs  r2, r0, #5
 80027e0:   4b08        ldr   r3, =0xe000e100    ; { Cortex-M3 SCS } | [pc, #32]  ; (8002804 <FlashStart+0x2804>)
 80027e2:   f000 001f   and.w r0, r0, #31
 80027e6:   fa01 f000   lsl.w r0, r1, r0
 80027ea:   f843 0022   str.w r0, [r3, r2, lsl #2]
 80027ee:   bd70        pop   {r4, r5, r6, pc}
 80027f0:   1150        asrs  r0, r2, #5
 80027f2:   4a05        ldr   r2, =0xe000e180    ; { Cortex-M3 SCS } | [pc, #20]  ; (8002808 <FlashStart+0x2808>)
 80027f4:   f003 031f   and.w r3, r3, #31
 80027f8:   4099        lsls  r1, r3
 80027fa:   f842 1020   str.w r1, [r2, r0, lsl #2]
 80027fe:   bd70        pop   {r4, r5, r6, pc}

.pool
 8002800:   e000e400    Cortex-M3 SCS
 8002804:   e000e100    Cortex-M3 SCS
 8002808:   e000e180    Cortex-M3 SCS
 800280c:   e000ed0c    Cortex-M3 SCS


FUNCTION:   TODO_8002810
 8002810:   f362 220f   bfi   r2, r2, #8, #8
 8002814:   f362 421f   bfi   r2, r2, #16, #16
 8002818:   1840        adds  r0, r0, r1
 800281a:   f010 0303   ands.w   r3, r0, #3
 800281e:   d008        beq.n 8002832 <FlashStart+0x2832>
 8002820:   1ac9        subs  r1, r1, r3
 8002822:   d31f        bcc.n 8002864 <FlashStart+0x2864>
 8002824:   07db        lsls  r3, r3, #31
 8002826:   bf48        it mi
 8002828:   f800 2d01   strbmi.w r2, [r0, #-1]!
 800282c:   bf28        it cs
 800282e:   f820 2d02   strhcs.w r2, [r0, #-2]!
 8002832:   0013        movs  r3, r2
 8002834:   b430        push  {r4, r5}
 8002836:   4614        mov   r4, r2
 8002838:   4615        mov   r5, r2
 800283a:   3910        subs  r1, #16
 800283c:   bf28        it cs
 800283e:   e920 003c   stmdbcs  r0!, {r2, r3, r4, r5}
 8002842:   d8fa        bhi.n 800283a <FlashStart+0x283a>
 8002844:   0749        lsls  r1, r1, #29
 8002846:   bf28        it cs
 8002848:   e920 000c   stmdbcs  r0!, {r2, r3}
 800284c:   bf48        it mi
 800284e:   f840 2d04   strmi.w  r2, [r0, #-4]!
 8002852:   0089        lsls  r1, r1, #2
 8002854:   bf28        it cs
 8002856:   f820 2d02   strhcs.w r2, [r0, #-2]!
 800285a:   bf48        it mi
 800285c:   f800 2d01   strbmi.w r2, [r0, #-1]!
 8002860:   bc30        pop   {r4, r5}
 8002862:   4770        bx lr
 8002864:   18c9        adds  r1, r1, r3
 8002866:   bf18        it ne
 8002868:   f800 2d01   strbne.w r2, [r0, #-1]!
 800286c:   07cb        lsls  r3, r1, #31
 800286e:   bf28        it cs
 8002870:   f800 2d01   strbcs.w r2, [r0, #-1]!
 8002874:   4770        bx lr
 8002876:   0000        movs  r0, r0

FUNCTION:   TODO_8002878
 8002878:   0003        movs  r3, r0
 800287a:   2000        movs  r0, #0
 800287c:   f013 0f03   tst.w r3, #3
 8002880:   d009        beq.n 8002896 <FlashStart+0x2896>
 8002882:   1e52        subs  r2, r2, #1
 8002884:   bf22        ittt  cs
 8002886:   f813 0b01   ldrbcs.w r0, [r3], #1
 800288a:   f811 cb01   ldrbcs.w ip, [r1], #1
 800288e:   ebb0 000c   subscs.w r0, r0, ip
 8002892:   d0f3        beq.n 800287c <FlashStart+0x287c>
 8002894:   4770        bx lr
 8002896:   1f12        subs  r2, r2, #4
 8002898:   bf22        ittt  cs
 800289a:   f853 0b04   ldrcs.w  r0, [r3], #4
 800289e:   f851 cb04   ldrcs.w  ip, [r1], #4
 80028a2:   4560        cmpcs r0, ip
 80028a4:   d0f7        beq.n 8002896 <FlashStart+0x2896>
 80028a6:   1d12        adds  r2, r2, #4
 80028a8:   d20a        bcs.n 80028c0 <FlashStart+0x28c0>
 80028aa:   ba00        rev   r0, r0
 80028ac:   fa9c fc8c   rev.w ip, ip
 80028b0:   ebb0 000c   subs.w   r0, r0, ip
 80028b4:   bf38        it cc
 80028b6:   f06f 0000   mvncc.w  r0, #0
 80028ba:   bf88        it hi
 80028bc:   2001        movhi r0, #1
 80028be:   4770        bx lr
 80028c0:   1e52        subs  r2, r2, #1
 80028c2:   bf22        ittt  cs
 80028c4:   f813 0b01   ldrbcs.w r0, [r3], #1
 80028c8:   f811 cb01   ldrbcs.w ip, [r1], #1
 80028cc:   ebb0 000c   subscs.w r0, r0, ip
 80028d0:   d0f6        beq.n 80028c0 <FlashStart+0x28c0>
 80028d2:   1c52        adds  r2, r2, #1
 80028d4:   bf08        it eq
 80028d6:   4610        moveq r0, r2
 80028d8:   4770        bx lr
 80028da:   0000        movs  r0, r0

FUNCTION:   TODO_80028dc
 80028dc:   8802        ldrh  r2, [r0, #0]
 80028de:   f402 5241   and.w r2, r2, #12352 ; 0x3040
 80028e2:   880b        ldrh  r3, [r1, #0]
 80028e4:   431a        orrs  r2, r3
 80028e6:   884b        ldrh  r3, [r1, #2]
 80028e8:   431a        orrs  r2, r3
 80028ea:   888b        ldrh  r3, [r1, #4]
 80028ec:   431a        orrs  r2, r3
 80028ee:   88cb        ldrh  r3, [r1, #6]
 80028f0:   431a        orrs  r2, r3
 80028f2:   890b        ldrh  r3, [r1, #8]
 80028f4:   431a        orrs  r2, r3
 80028f6:   894b        ldrh  r3, [r1, #10]
 80028f8:   431a        orrs  r2, r3
 80028fa:   898b        ldrh  r3, [r1, #12]
 80028fc:   431a        orrs  r2, r3
 80028fe:   89cb        ldrh  r3, [r1, #14]
 8002900:   431a        orrs  r2, r3
 8002902:   8002        strh  r2, [r0, #0]
 8002904:   8b82        ldrh  r2, [r0, #28]
 8002906:   f24f 73ff   movw  r3, #63487  ; 0xf7ff
 800290a:   401a        ands  r2, r3
 800290c:   8382        strh  r2, [r0, #28]
 800290e:   8a09        ldrh  r1, [r1, #16]
 8002910:   8201        strh  r1, [r0, #16]
 8002912:   4770        bx lr

FUNCTION:   TODO_8002914
 8002914:   2900        cmp   r1, #0
 8002916:   8801        ldrh  r1, [r0, #0]
 8002918:   bf12        itee  ne
 800291a:   f041 0140   orrne.w  r1, r1, #64 ; 0x40
 800291e:   f64f 72bf   movweq   r2, #65471  ; 0xffbf
 8002922:   4011        andeq r1, r2
 8002924:   8001        strh  r1, [r0, #0]
 8002926:   4770        bx lr
 8002928:   8181        strh  r1, [r0, #12]
 800292a:   4770        bx lr

FUNCTION:   TODO_800292c
 800292c:   8900        ldrh  r0, [r0, #8]
 800292e:   4001        ands  r1, r0
 8002930:   0008        movs  r0, r1
 8002932:   d000        beq.n 8002936 <FlashStart+0x2936>
 8002934:   2001        movs  r0, #1
 8002936:   b2c0        uxtb  r0, r0
 8002938:   4770        bx lr
 800293a:   0000        movs  r0, r0

FUNCTION:   TODO_800293c
 800293c:   f7fe bb79   b.w   8001032 <FlashStart+0x1032>

FUNCTION:   TODO_8002940
 8002940:   e92d 4ff8   stmdb sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002944:   4682        mov   sl, r0
 8002946:   4689        mov   r9, r1
 8002948:   4690        mov   r8, r2
 800294a:   469b        mov   fp, r3
 800294c:   9d0a        ldr   r5, [sp, #40]  ; 0x28
 800294e:   2600        movs  r6, #0
 8002950:   2700        movs  r7, #0
 8002952:   e000        b.n   8002956 <FlashStart+0x2956>
 8002954:   1c7f        adds  r7, r7, #1
 8002956:   455f        cmp   r7, fp
 8002958:   da1a        bge.n 8002990 <FlashStart+0x2990>
 800295a:   2400        movs  r4, #0
 800295c:   e008        b.n   8002970 <FlashStart+0x2970>
 800295e:   2000        movs  r0, #0
 8002960:   eb09 0207   add.w r2, r9, r7
 8002964:   eb0a 0104   add.w r1, sl, r4
 8002968:   f7fe fbf2   bl 8001150 <FlashStart+0x1150>
 800296c:   1c76        adds  r6, r6, #1
 800296e:   1c64        adds  r4, r4, #1
 8002970:   4544        cmp   r4, r8
 8002972:   daef        bge.n 8002954 <FlashStart+0x2954>
 8002974:   10b0        asrs  r0, r6, #2
 8002976:   eb06 7050   add.w r0, r6, r0, lsr #29
 800297a:   10c0        asrs  r0, r0, #3
 800297c:   5d41        ldrb  r1, [r0, r5]
 800297e:   eba6 00c0   sub.w r0, r6, r0, lsl #3
 8002982:   fa41 f000   asr.w r0, r1, r0
 8002986:   07c0        lsls  r0, r0, #31
 8002988:   d5e9        bpl.n 800295e <FlashStart+0x295e>
 800298a:   f64f 70ff   movw  r0, #65535  ; 0xffff
 800298e:   e7e7        b.n   8002960 <FlashStart+0x2960>
 8002990:   e8bd 8ff1   ldmia.w  sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

FUNCTION:   TODO_8002994
 8002994:   2000        movs  r0, #0
 8002996:   4770        bx lr
 8002998:   b580        push  {r7, lr}
 800299a:   f7ff fb85   bl 80020a8 <FlashStart+0x20a8>
 800299e:   2000        movs  r0, #0
 80029a0:   bd02        pop   {r1, pc}
 80029a2:   0000        movs  r0, r0
 80029a4:   b5f8        push  {r3, r4, r5, r6, r7, lr}
 80029a6:   4604        mov   r4, r0
 80029a8:   460d        mov   r5, r1
 80029aa:   4e0d        ldr   r6, =0x20000400    ; { RAM (bss) } | [pc, #52]  ; (80029e0 <FlashStart+0x29e0>)
 80029ac:   f015 0003   ands.w   r0, r5, #3
 80029b0:   d00a        beq.n 80029c8 <FlashStart+0x29c8>
 80029b2:   f64f 70fc   movw  r0, #65532  ; 0xfffc
 80029b6:   4028        ands  r0, r5
 80029b8:   1d00        adds  r0, r0, #4
 80029ba:   4285        cmp   r5, r0
 80029bc:   d204        bcs.n 80029c8 <FlashStart+0x29c8>
 80029be:   22ff        movs  r2, #255 ; 0xff
 80029c0:   1b41        subs  r1, r0, r5
 80029c2:   19a8        adds  r0, r5, r6
 80029c4:   f7ff ff24   bl 8002810 <FlashStart+0x2810>
 80029c8:   2700        movs  r7, #0
 80029ca:   e005        b.n   80029d8 <FlashStart+0x29d8>

.pool
 80029cc:   462059b9

 80029d0:   f7ff fb88   bl 80020e4 <FlashStart+0x20e4>
 80029d4:   1d24        adds  r4, r4, #4
 80029d6:   1d3f        adds  r7, r7, #4
 80029d8:   42af        cmp   r7, r5
 80029da:   d3f7        bcc.n 80029cc <FlashStart+0x29cc>
 80029dc:   2000        movs  r0, #0
 80029de:   bdf2        pop   {r1, r4, r5, r6, r7, pc}

.pool
 80029e0:   20000400    RAM (bss)

 80029e4:   4770        bx lr
 80029e6:   0000        movs  r0, r0

FUNCTION:   TODO_80029e8
 80029e8:   b510        push  {r4, lr}
 80029ea:   4b0f        ldr   r3, =0x40006000    ; { Shared USB/CAN SRAM 512 bytes } | [pc, #60]  ; (8002a28 <FlashStart+0x2a28>)
 80029ec:   eb03 0141   add.w r1, r3, r1, lsl #1
 80029f0:   1c52        adds  r2, r2, #1
 80029f2:   1052        asrs  r2, r2, #1
 80029f4:   e009        b.n   8002a0a <FlashStart+0x2a0a>
 80029f6:   f810 3b01   ldrb.w   r3, [r0], #1
 80029fa:   f810 4b01   ldrb.w   r4, [r0], #1
 80029fe:   ea43 2304   orr.w r3, r3, r4, lsl #8
 8002a02:   f821 3b02   strh.w   r3, [r1], #2
 8002a06:   1c89        adds  r1, r1, #2
 8002a08:   1e52        subs  r2, r2, #1
 8002a0a:   d1f4        bne.n 80029f6 <FlashStart+0x29f6>
 8002a0c:   bd10        pop   {r4, pc}

FUNCTION:   TODO_8002a0e
 8002a0e:   4b06        ldr   r3, =0x40006000    ; { Shared USB/CAN SRAM 512 bytes } | [pc, #24]  ; (8002a28 <FlashStart+0x2a28>)
 8002a10:   eb03 0141   add.w r1, r3, r1, lsl #1
 8002a14:   1c52        adds  r2, r2, #1
 8002a16:   1052        asrs  r2, r2, #1
 8002a18:   e004        b.n   8002a24 <FlashStart+0x2a24>
 8002a1a:   f851 3b04   ldr.w r3, [r1], #4
 8002a1e:   f820 3b02   strh.w   r3, [r0], #2
 8002a22:   1e52        subs  r2, r2, #1
 8002a24:   d1f9        bne.n 8002a1a <FlashStart+0x2a1a>
 8002a26:   4770        bx lr

.pool
 8002a28:   40006000    Shared USB/CAN SRAM 512 bytes

 8002a2c:   b510        push  {r4, lr}
 8002a2e:   4c0e        ldr   r4, =0x20000844    ; { RAM (bss) } | [pc, #56]  ; (8002a68 <FlashStart+0x2a68>)
 8002a30:   80a0        strh  r0, [r4, #4]
 8002a32:   222c        movs  r2, #44  ; 0x2c
 8002a34:   2107        movs  r1, #7
 8002a36:   4620        mov   r0, r4
 8002a38:   f7fe fce6   bl 8001408 <FlashStart+0x1408>
 8002a3c:   2000        movs  r0, #0
 8002a3e:   80a0        strh  r0, [r4, #4]
 8002a40:   bd10        pop   {r4, pc}

FUNCTION:   TODO_8002a42
 8002a42:   2002        movs  r0, #2
 8002a44:   e7f2        b.n   8002a2c <FlashStart+0x2a2c>
 8002a46:   4b08        ldr   r3, =0x20000844    ; { RAM (bss) } | [pc, #32]  ; (8002a68 <FlashStart+0x2a68>)
 8002a48:   8058        strh  r0, [r3, #2]
 8002a4a:   222c        movs  r2, #44  ; 0x2c
 8002a4c:   2102        movs  r1, #2
 8002a4e:   4618        mov   r0, r3
 8002a50:   f7fe bcda   b.w   8001408 <FlashStart+0x1408>

FUNCTION:   TODO_8002a54
 8002a54:   2002        movs  r0, #2
 8002a56:   e7f6        b.n   8002a46 <FlashStart+0x2a46>

FUNCTION:   TODO_8002a58
 8002a58:   e7ff        b.n   8002a5a <FlashStart+0x2a5a>
 8002a5a:   222c        movs  r2, #44  ; 0x2c
 8002a5c:   2107        movs  r1, #7
 8002a5e:   4802        ldr   r0, =0x20000844    ; { RAM (bss) } | [pc, #8]   ; (8002a68 <FlashStart+0x2a68>)
 8002a60:   f7fe bd3e   b.w   80014e0 <FlashStart+0x14e0>
 8002a64:   0000        movs  r0, r0
 8002a66:   0000        movs  r0, r0

.pool
 8002a68:   20000844    RAM (bss)

FUNCTION:   SetupInitData

# Get the number of bytes to copy into r3, the source address (in Flash) of the init data into r1,
# and the destination address (in RAM) into R2. These values come from the table.
# Copy the values 32 bits at a time.

 8002a6c:   b410        push  {r4}
 8002a6e:   e009        b.n   8002a84 <FlashStart+0x2a84>
 8002a70:   f850 1b04   ldr.w r1, [r0], #4
 8002a74:   f850 2b04   ldr.w r2, [r0], #4
 8002a78:   f851 4b04   ldr.w r4, [r1], #4
 8002a7c:   f842 4b04   str.w r4, [r2], #4
 8002a80:   1f1b        subs  r3, r3, #4
 8002a82:   d1f9        bne.n 8002a78 <FlashStart+0x2a78>
 8002a84:   f850 3b04   ldr.w r3, [r0], #4
 8002a88:   2b00        cmp   r3, #0
 8002a8a:   d1f1        bne.n 8002a70 <FlashStart+0x2a70>
 8002a8c:   bc10        pop   {r4}
 8002a8e:   4770        bx lr

; Table of values for SetupRAM (8002ad4)
 8002a90:   08002b49    ClearBss
 8002a94:   00000490
 8002a98:   20000400    RAM
 8002a9c:   00000000
 8002aa0:   08002a6d    SetupInitData
 8002aa4:   00000264
 8002aa8:   08002d28    Flash
 8002aac:   20000890    RAM
 8002ab0:   00000000

FUNCTION:   TODO_8002ab4
 8002ab4:   4804        ldr   r0, =0x20000808    ; { RAM (bss) } | [pc, #16]  ; (8002ac8 <FlashStart+0x2ac8>)
 8002ab6:   61c0        str   r0, [r0, #28]
 8002ab8:   2102        movs  r1, #2
 8002aba:   7201        strb  r1, [r0, #8]
 8002abc:   4903        ldr   r1, =0x200009a0    ; { RAM (data) } | [pc, #12]  ; (8002acc <FlashStart+0x2acc>)
 8002abe:   6201        str   r1, [r0, #32]
 8002ac0:   4a03        ldr   r2, =0x200009d4    ; { RAM (data) } | [pc, #12]  ; (8002ad0 <FlashStart+0x2ad0>)
 8002ac2:   6242        str   r2, [r0, #36]  ; 0x24
 8002ac4:   6808        ldr   r0, [r1, #0]
 8002ac6:   4700        bx r0

.pool
 8002ac8:   20000808    RAM (bss)
 8002acc:   200009a0    RAM (data)
 8002ad0:   200009d4    RAM (data)

FUNCTION:   SetupRAM
 
# Load r0 with the start of the SetupRAM table, and R4 with a pointer to the next address after the table.
# Step through the table, loading a function address and calling it. The functions can take more data
# from the table.
 
 8002ad4:   b510        push  {r4, lr}
 8002ad6:   4805        ldr   r0, =0x8002a90    ; { Flash } | [pc, #20]  ; (8002aec <FlashStart+0x2aec>)
 8002ad8:   4c05        ldr   r4, =0x8002ab4    ; { Flash } | [pc, #20]  ; (8002af0 <FlashStart+0x2af0>)
 8002ada:   42a0        cmp   r0, r4
 8002adc:   d004        beq.n 8002ae8 <FlashStart+0x2ae8>
 8002ade:   f850 1b04   ldr.w r1, [r0], #4
 8002ae2:   4788        blx   r1
 8002ae4:   42a0        cmp   r0, r4
 8002ae6:   d1fa        bne.n 8002ade <FlashStart+0x2ade>
 8002ae8:   bd10        pop   {r4, pc}
 8002aea:   bf00        nop

.pool
 8002aec:   08002a90    Flash
 8002af0:   08002ab4    Flash

 FUNCTION:  RET_8002af4
 8002af4:   4770        bx lr
 
FUNCTION:   int SetMainStackPointer (void)
 8002af6:   4804        ldr   r0, =0x8002af5    ; { Flash } | RET_8002af4 (does nothing)
 8002af8:   46f3        mov   fp, lr
 8002afa:   4780        blx   r0
 8002afc:   4903        ldr   r1, =0x20000400    ; { RAM (bss) } | [pc, #12]  ; (8002b0c [=0x20000400])
 8002afe:   f381 8808   msr   MSP, r1
 8002b02:   f04f 0001   mov.w r0, #1
 8002b06:   4758        bx fp

.pool
 8002b08:   08002af5    Flash
 8002b0c:   20000400    RAM (bss)


FUNCTION:   TODO_8002b10
 8002b10:   4804        ldr   r0, =0x40005c40    ; { USB device FS registers } | [pc, #16]  ; (8002b24 <FlashStart+0x2b24>)
 8002b12:   2100        movs  r1, #0
 8002b14:   6041        str   r1, [r0, #4]
 8002b16:   f44f 413f   mov.w r1, #48896  ; 0xbf00
 8002b1a:   4a03        ldr   r2, =0x20000888    ; { RAM (bss) } | [pc, #12]  ; (8002b28 <FlashStart+0x2b28>)
 8002b1c:   8011        strh  r1, [r2, #0]
 8002b1e:   6001        str   r1, [r0, #0]
 8002b20:   2000        movs  r0, #0
 8002b22:   4770        bx lr

.pool
 8002b24:   40005c40    USB device FS registers
 8002b28:   20000888    RAM (bss)


FUNCTION:   TODO_8002b2c
 8002b2c:   b500        push  {lr}
 8002b2e:   4a05        ldr   r2, =0x2000087c    ; { RAM (bss) } | [pc, #20]  ; (8002b44 <FlashStart+0x2b44>)
 8002b30:   6810        ldr   r0, [r2, #0]
 8002b32:   2800        cmp   r0, #0
 8002b34:   d004        beq.n 8002b40 <FlashStart+0x2b40>
 8002b36:   0011        movs  r1, r2
 8002b38:   2002        movs  r0, #2
 8002b3a:   beab        bkpt  0x00ab
 8002b3c:   2000        movs  r0, #0
 8002b3e:   6010        str   r0, [r2, #0]
 8002b40:   bd00        pop   {pc}
 8002b42:   0000        movs  r0, r0

.pool
 8002b44:   2000087c    RAM (bss)


FUNCTION:   ClearBss
 8002b48:   2300        movs  r3, #0
 8002b4a:   e005        b.n   8002b58 <FlashStart+0x2b58>
 8002b4c:   f850 1b04   ldr.w r1, [r0], #4                     Get address of region to clear (0x20000400)
 8002b50:   f841 3b04   str.w r3, [r1], #4                     Store 0, increase address
 8002b54:   1f12        subs  r2, r2, #4                       decrease count
 8002b56:   d1fb        bne.n 8002b50 <FlashStart+0x2b50>      loop until count = 0
 8002b58:   f850 2b04   ldr.w r2, [r0], #4                     Get size of region to clear (0x00000490)
 8002b5c:   2a00        cmp   r2, #0                           Keep going through table until a zero size is found
 8002b5e:   d1f5        bne.n 8002b4c <FlashStart+0x2b4c>
 8002b60:   4770        bx lr
 8002b62:   0000        movs  r0, r0
 
FUNCTION: Reset_Handler
 8002b64:   f7ff ffc7   bl 8002af6 <FlashStart+0x2af6>         SetMainStackPointer();  <- always returns 1
 8002b68:   2800        cmp   r0, #0
 8002b6a:   d001        beq.n 8002b70 <FlashStart+0x2b70>      jump won't be taken first  time around
 8002b6c:   f7ff ffb2   bl 8002ad4 <FlashStart+0x2ad4>         SetupRAM
 8002b70:   2000        movs  r0, #0
 8002b72:   f7fe fd21   bl 80015b8 <FlashStart+0x15b8>
 8002b76:   f000 f849   bl 8002c0c <FlashStart+0x2c0c>
 8002b7a:   0000        movs  r0, r0
 
FUNCTION: NMI_Handler
 8002b7c:   4770        bx lr
 
FUNCTION: HardFault_Handler
 8002b7e:   e7fe        b.n   8002b7e <FlashStart+0x2b7e>   Infinite loop
 
FUNCTION: MemManage_Handler
 8002b80:   e7fe        b.n   8002b80 <FlashStart+0x2b80>   Infinite loop
 
FUNCTION: BusFault_Handler
 8002b82:   e7fe        b.n   8002b82 <FlashStart+0x2b82>   Infinite loop

FUNCTION: UsageFault_Handler
 8002b84:   e7fe        b.n   8002b84 <FlashStart+0x2b84>   Infinite loop

FUNCTION: SVC_Handler
 8002b86:   4770        bx lr

FUNCTION: DebugMon_Handler
 8002b88:   4770        bx lr

FUNCTION: PendSV_Handler
 8002b8a:   4770        bx lr

FUNCTION: SysTick_Handler
 8002b8c:   4770        bx lr

FUNCTION: USB_LP_CAN1_RX0_IRQHandler
 8002b8e:   f7ff bcd3   b.w   8002538 <FlashStart+0x2538>

 8002b92:   0000        movs  r0, r0

 8002b94:   0bb8        lsrs  r0, r7, #14    3000 dec
 8002b96:   0068        lsls  r0, r5, #1     104  dec
 8002b98:   03e8        lsls  r0, r5, #15    1000 dec
 8002b9a:   0068        lsls  r0, r5, #1     104  dec
 8002b9c:   0064        lsls  r4, r4, #1     100  dec
 8002b9e:   0068        lsls  r0, r5, #1     104  dec
 8002ba0:   03e8        lsls  r0, r5, #15    1000 dec
 8002ba2:   0068        lsls  r0, r5, #1     104  dec
 8002ba4:   03e8        lsls  r0, r5, #15    1000 dec
 8002ba6:   0068        lsls  r0, r5, #1     104  dec


FUNCTION:   TODO_8002ba8
 8002ba8:   b580        push  {r7, lr}
 8002baa:   f7ff ffbf   bl 8002b2c <FlashStart+0x2b2c>
 8002bae:   4a02        ldr   r2, =0x20026    ; [pc, #8]   ; (8002bb8 <FlashStart+0x2bb8>)
 8002bb0:   0011        movs  r1, r2
 8002bb2:   2018        movs  r0, #24
 8002bb4:   beab        bkpt  0x00ab
 8002bb6:   e7fb        b.n   8002bb0 <FlashStart+0x2bb0>

.pool
 8002bb8:   00020026


FUNCTION:   TODO_8002bbc
 8002bbc:   b580        push  {r7, lr}
 8002bbe:   f7ff f91b   bl 8001df8 <FlashStart+0x1df8>
 8002bc2:   2101        movs  r1, #1
 8002bc4:   2002        movs  r0, #2
 8002bc6:   f7ff fbd3   bl 8002370 <FlashStart+0x2370>
 8002bca:   2000        movs  r0, #0
 8002bcc:   bd02        pop   {r1, pc}

FUNCTION:   TODO_8002bce
 8002bce:   b510        push  {r4, lr}
 8002bd0:   4604        mov   r4, r0
 8002bd2:   f7ff fdb1   bl 8002738 <FlashStart+0x2738>
 8002bd6:   4620        mov   r0, r4
 8002bd8:   bd10        pop   {r4, pc}
 8002bda:   0000        movs  r0, r0

FUNCTION:   TODO_8002bdc
 8002bdc:   b580        push  {r7, lr}
 8002bde:   f7ff fd07   bl 80025f0 <FlashStart+0x25f0>
 8002be2:   2000        movs  r0, #0
 8002be4:   bd02        pop   {r1, pc}
 8002be6:   0000        movs  r0, r0
 8002be8:   4607        mov   r7, r0
 8002bea:   4638        mov   r0, r7
 8002bec:   f7ff ffdc   bl 8002ba8 <FlashStart+0x2ba8>
 8002bf0:   e7fb        b.n   8002bea <FlashStart+0x2bea>
 8002bf2:   0000        movs  r0, r0
 8002bf4:   0000        movs  r0, r0
 8002bf6:   0f07        lsrs  r7, r0, #28
 8002bf8:   0000        movs  r0, r0
 8002bfa:   0f07        lsrs  r7, r0, #28
 8002bfc:   6644        str   r4, [r0, #100] ; 0x64
 8002bfe:   5375        strh  r5, [r6, r5]
 8002c00:   0165        lsls  r5, r4, #5
 8002c02:   0000        movs  r0, r0

FUNCTION:   SetMainStackPointerToR0
 8002c04:   f380 8808   msr   MSP, r0
 8002c08:   4770        bx lr
 8002c0a:   4770        bx lr

FUNCTION:   TODO_8002c0c
 8002c0c:   b580        push  {r7, lr}
 8002c0e:   f7ff bfeb   b.w   8002be8 <FlashStart+0x2be8>
 8002c12:   f7ff bfb3   b.w   8002b7c <FlashStart+0x2b7c>
 8002c16:   f7ff bfb2   b.w   8002b7e <FlashStart+0x2b7e>
 8002c1a:   f7ff bfb1   b.w   8002b80 <FlashStart+0x2b80>
 8002c1e:   f7ff bfb0   b.w   8002b82 <FlashStart+0x2b82>
 8002c22:   f7ff bfaf   b.w   8002b84 <FlashStart+0x2b84>
 8002c26:   f7ff bfae   b.w   8002b86 <FlashStart+0x2b86>
 8002c2a:   f7ff bfad   b.w   8002b88 <FlashStart+0x2b88>
 8002c2e:   f7ff bfac   b.w   8002b8a <FlashStart+0x2b8a>
 8002c32:   f7ff bfab   b.w   8002b8c <FlashStart+0x2b8c>

FUNCTION: WWDG_IRQHandler
 8002c36:   f7ff bffe   b.w   8002c36 <FlashStart+0x2c36>   Infinite loop

FUNCTION: PVD_IRQHandler
 8002c3a:   f7ff bffe   b.w   8002c3a <FlashStart+0x2c3a>   Infinite loop

FUNCTION: TAMPER_IRQHandler
 8002c3e:   f7ff bffe   b.w   8002c3e <FlashStart+0x2c3e>   Infinite loop

FUNCTION: RTC_IRQHandler
 8002c42:   f7ff bffe   b.w   8002c42 <FlashStart+0x2c42>   Infinite loop

FUNCTION: FLASH_IRQHandler
 8002c46:   f7ff bffe   b.w   8002c46 <FlashStart+0x2c46>   Infinite loop

FUNCTION: RCC_IRQHandler
 8002c4a:   f7ff bffe   b.w   8002c4a <FlashStart+0x2c4a>   Infinite loop

FUNCTION: EXTI0_IRQHandler
 8002c4e:   f7ff bffe   b.w   8002c4e <FlashStart+0x2c4e>   Infinite loop

FUNCTION: EXTI1_IRQHandler
 8002c52:   f7ff bffe   b.w   8002c52 <FlashStart+0x2c52>   Infinite loop

FUNCTION: EXTI2_IRQHandler
 8002c56:   f7ff bffe   b.w   8002c56 <FlashStart+0x2c56>   Infinite loop

FUNCTION: EXTI3_IRQHandler
 8002c5a:   f7ff bffe   b.w   8002c5a <FlashStart+0x2c5a>   Infinite loop

FUNCTION: EXTI4_IRQHandler
 8002c5e:   f7ff bffe   b.w   8002c5e <FlashStart+0x2c5e>   Infinite loop

FUNCTION: DMA1_Channel1_IRQHandler
 8002c62:   f7ff bffe   b.w   8002c62 <FlashStart+0x2c62>   Infinite loop

FUNCTION: DMA1_Channel2_IRQHandler
 8002c66:   f7ff bffe   b.w   8002c66 <FlashStart+0x2c66>   Infinite loop

FUNCTION: DMA1_Channel3_IRQHandler
 8002c6a:   f7ff bffe   b.w   8002c6a <FlashStart+0x2c6a>   Infinite loop

FUNCTION: DMA1_Channel4_IRQHandler
 8002c6e:   f7ff bffe   b.w   8002c6e <FlashStart+0x2c6e>   Infinite loop

FUNCTION: DMA1_Channel5_IRQHandler
 8002c72:   f7ff bffe   b.w   8002c72 <FlashStart+0x2c72>   Infinite loop

FUNCTION: DMA1_Channel6_IRQHandler
 8002c76:   f7ff bffe   b.w   8002c76 <FlashStart+0x2c76>   Infinite loop

FUNCTION: DMA1_Channel7_IRQHandler
 8002c7a:   f7ff bffe   b.w   8002c7a <FlashStart+0x2c7a>   Infinite loop

FUNCTION: ADC1_2_IRQHandler
 8002c7e:   f7ff bffe   b.w   8002c7e <FlashStart+0x2c7e>   Infinite loop

FUNCTION: USB_HP_CAN1_TX_IRQHandler
 8002c82:   f7ff bffe   b.w   8002c82 <FlashStart+0x2c82>   Infinite loop

FUNCTION: Unused_8002c86
 8002c86:   f7ff bf82   b.w   8002b8e <FlashStart+0x2b8e>

FUNCTION: CAN1_RX1_IRQHandler
 8002c8a:   f7ff bffe   b.w   8002c8a <FlashStart+0x2c8a>   Infinite loop

FUNCTION: CAN1_SCE_IRQHandler
 8002c8e:   f7ff bffe   b.w   8002c8e <FlashStart+0x2c8e>   Infinite loop

FUNCTION: EXTI9_5_IRQHandler
 8002c92:   f7ff bffe   b.w   8002c92 <FlashStart+0x2c92>   Infinite loop

FUNCTION: TIM1_BRK_IRQHandler
 8002c96:   f7ff bffe   b.w   8002c96 <FlashStart+0x2c96>   Infinite loop

FUNCTION: TIM1_UP_IRQHandler
 8002c9a:   f7ff bffe   b.w   8002c9a <FlashStart+0x2c9a>   Infinite loop

FUNCTION: TIM1_TRG_COM_IRQHandler
 8002c9e:   f7ff bffe   b.w   8002c9e <FlashStart+0x2c9e>   Infinite loop

FUNCTION: TIM1_CC_IRQHandler
 8002ca2:   f7ff bffe   b.w   8002ca2 <FlashStart+0x2ca2>   Infinite loop

FUNCTION: TIM2_IRQHandler
 8002ca6:   f7ff bffe   b.w   8002ca6 <FlashStart+0x2ca6>   Infinite loop

FUNCTION: TIM3_IRQHandler
 8002caa:   f7ff bffe   b.w   8002caa <FlashStart+0x2caa>   Infinite loop

FUNCTION: TIM4_IRQHandler
 8002cae:   f7ff bffe   b.w   8002cae <FlashStart+0x2cae>   Infinite loop

FUNCTION: I2C1_EV_IRQHandler
 8002cb2:   f7ff bffe   b.w   8002cb2 <FlashStart+0x2cb2>   Infinite loop

FUNCTION: I2C1_ER_IRQHandler
 8002cb6:   f7ff bffe   b.w   8002cb6 <FlashStart+0x2cb6>   Infinite loop

FUNCTION: I2C2_EV_IRQHandler
 8002cba:   f7ff bffe   b.w   8002cba <FlashStart+0x2cba>   Infinite loop

FUNCTION: I2C2_ER_IRQHandler
 8002cbe:   f7ff bffe   b.w   8002cbe <FlashStart+0x2cbe>   Infinite loop

FUNCTION: SPI1_IRQHandler
 8002cc2:   f7ff bffe   b.w   8002cc2 <FlashStart+0x2cc2>   Infinite loop

FUNCTION: SPI2_IRQHandler
 8002cc6:   f7ff bffe   b.w   8002cc6 <FlashStart+0x2cc6>   Infinite loop

FUNCTION: USART1_IRQHandler
 8002cca:   f7ff bffe   b.w   8002cca <FlashStart+0x2cca>   Infinite loop

FUNCTION: USART2_IRQHandler
 8002cce:   f7ff bffe   b.w   8002cce <FlashStart+0x2cce>   Infinite loop

FUNCTION: USART3_IRQHandler
 8002cd2:   f7ff bffe   b.w   8002cd2 <FlashStart+0x2cd2>   Infinite loop

FUNCTION: EXTI15_10_IRQHandler
 8002cd6:   f7ff bffe   b.w   8002cd6 <FlashStart+0x2cd6>   Infinite loop

FUNCTION: RTCAlarm_IRQHandler
 8002cda:   f7ff bffe   b.w   8002cda <FlashStart+0x2cda>   Infinite loop

FUNCTION: USBWakeUp_IRQHandler
 8002cde:   f7ff bffe   b.w   8002cde <FlashStart+0x2cde>   Infinite loop

FUNCTION: TIM8_BRK_IRQHandler
 8002ce2:   f7ff bffe   b.w   8002ce2 <FlashStart+0x2ce2>   Infinite loop

FUNCTION: TIM8_UP_IRQHandler
 8002ce6:   f7ff bffe   b.w   8002ce6 <FlashStart+0x2ce6>   Infinite loop

FUNCTION: TIM8_TRG_COM_IRQHandler
 8002cea:   f7ff bffe   b.w   8002cea <FlashStart+0x2cea>   Infinite loop

FUNCTION: TIM8_CC_IRQHandler
 8002cee:   f7ff bffe   b.w   8002cee <FlashStart+0x2cee>   Infinite loop

FUNCTION: ADC3_IRQHandler
 8002cf2:   f7ff bffe   b.w   8002cf2 <FlashStart+0x2cf2>   Infinite loop

FUNCTION: FSMC_IRQHandler
 8002cf6:   f7ff bffe   b.w   8002cf6 <FlashStart+0x2cf6>   Infinite loop

FUNCTION: SDIO_IRQHandler
 8002cfa:   f7ff bffe   b.w   8002cfa <FlashStart+0x2cfa>   Infinite loop

FUNCTION: TIM5_IRQHandler
 8002cfe:   f7ff bffe   b.w   8002cfe <FlashStart+0x2cfe>   Infinite loop

FUNCTION: SPI3_IRQHandler
 8002d02:   f7ff bffe   b.w   8002d02 <FlashStart+0x2d02>   Infinite loop

FUNCTION: UART4_IRQHandler
 8002d06:   f7ff bffe   b.w   8002d06 <FlashStart+0x2d06>   Infinite loop

FUNCTION: UART5_IRQHandler
 8002d0a:   f7ff bffe   b.w   8002d0a <FlashStart+0x2d0a>   Infinite loop

FUNCTION: TIM6_IRQHandler
 8002d0e:   f7ff bffe   b.w   8002d0e <FlashStart+0x2d0e>   Infinite loop

FUNCTION: TIM7_IRQHandler
 8002d12:   f7ff bffe   b.w   8002d12 <FlashStart+0x2d12>   Infinite loop

FUNCTION: DMA2_Channel1_IRQHandler
 8002d16:   f7ff bffe   b.w   8002d16 <FlashStart+0x2d16>   Infinite loop

FUNCTION: DMA2_Channel2_IRQHandler
 8002d1a:   f7ff bffe   b.w   8002d1a <FlashStart+0x2d1a>   Infinite loop

FUNCTION: DMA2_Channel3_IRQHandler
 8002d1e:   f7ff bffe   b.w   8002d1e <FlashStart+0x2d1e>   Infinite loop

FUNCTION: DMA2_Channel4_5_IRQHandler
 8002d22:   f7ff bffe   b.w   8002d22 <FlashStart+0x2d22>   Infinite loop

 8002d26:   0000        movs  r0, r0

Initialisation data (first as a dump, then as dwords):

 20000890: 60 03 40 00 49 00 6E 00 74 00 65 00 72 00 6E 00   `.@.I.n.t.e.r.n.
 200008a0: 61 00 6C 00 20 00 46 00 6C 00 61 00 73 00 68 00   a.l. .F.l.a.s.h.
 200008b0: 20 00 20 00 2F 00 30 00 78 00 30 00 38 00 30 00    . ./.0.x.0.8.0.
 200008c0: 30 00 30 00 30 00 30 00 30 00 2F 00 30 00 36 00   0.0.0.0.0./.0.6.
 200008d0: 2A 00 30 00 30 00 32 00 4B 00 61 00 2C 00 31 00   *.0.0.2.K.a.,.1.
 200008e0: 32 00 32 00 2A 00 30 00 30 00 32 00 4B 00 67 00   2.2.*.0.0.2.K.g.
 200008f0: 14 03 31 00 2E 00 30 00 2E 00 41 00 2E 00 30 00   ..1...0...A...0.
 20000900: 2E 00 30 00 00 00 00 00 00 00 00 00 00 00 00 00   ..0.............
 20000910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
 20000920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
 20000930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
 20000940: 00 00 00 00 00 00 00 00 00 30 00 08 00 00 00 00   .........0......
 20000950: 38 0A 00 20 1B 00 00 00 00 00 00 00 00 00 00 00   8.. ............
 20000960: 00 00 00 00 00 00 00 00 E8 0A 00 20 04 00 00 00   ........... ....
 20000970: C8 0A 00 20 0A 00 00 00 F8 09 00 20 1E 00 00 00   ... ....... ....
 20000980: 18 0A 00 20 20 00 00 00 90 08 00 20 60 00 00 00   ...  ...... `...
 20000990: B4 0A 00 20 14 00 00 00 F0 08 00 20 14 00 00 00   ... ....... ....
 200009a0: FD 08 00 08 21 09 00 08 D9 09 00 08 DB 09 00 08   ....!...........
 200009b0: 81 0A 00 08 F1 0A 00 08 E1 0B 00 08 A1 0B 00 08   ................
 200009c0: AD 0B 00 08 B9 0B 00 08 C5 0B 00 08 00 00 00 00   ................
 200009d0: 40 00 00 00 F9 08 00 08 BD 09 00 08 F9 08 00 08   @...............
 200009e0: F9 08 00 08 F9 08 00 08 F9 08 00 08 F9 08 00 08   ................
 200009f0: F9 08 00 08 CB 09 00 08 1E 03 4D 00 4E 00 38 00   ..........M.N.8.
 20000a00: 30 00 30 00 20 00 4C 00 69 00 76 00 65 00 56 00   0.0. .L.i.v.e.V.
 20000a10: 69 00 65 00 77 00 00 00 20 03 30 00 30 00 30 00   i.e.w... .0.0.0.
 20000a20: 30 00 30 00 30 00 30 00 30 00 30 00 30 00 30 00   0.0.0.0.0.0.0.0.
 20000a30: 30 00 30 00 30 00 30 00 09 02 1B 00 01 01 00 80   0.0.0.0.........
 20000a40: 32 09 04 00 00 00 FE 01 02 04 09 21 09 FF 00 00   2..........!....
 20000a50: 04 1A 01 00 F9 08 00 08 F9 08 00 08 F9 08 00 08   ................
 20000a60: F9 08 00 08 F9 08 00 08 F9 08 00 08 F9 08 00 08   ................
 20000a70: F9 08 00 08 F9 08 00 08 F9 08 00 08 F9 08 00 08   ................
 20000a80: F9 08 00 08 F9 08 00 08 F9 08 00 08 00 00 00 00   ................
 20000a90: 01 02 03 04 01 02 03 04 06 07 08 09 02 04 06 08   ................
 20000aa0: 12 01 00 02 00 00 00 40 CE 0F FA F0 00 00 01 02   .......@........
 20000ab0: 03 01 00 00 14 03 31 00 32 00 34 00 33 00 2D 00   ......1.2.4.3.-.
 20000ac0: 31 00 32 00 38 00 38 00 0A 03 53 00 45 00 4D 00   1.2.8.8...S.E.M.
 20000ad0: 43 00 00 00 E4 0A 00 20 04 00 00 00 A0 0A 00 20   C...... ....... 
 20000ae0: 12 00 00 00 04 C0 05 06 04 03 09 04 01 01 00 00   ................
 20000af0: 01 00 00 00                                       ....

.InitData
 8002d28 -> 20000890:   00400360
 8002d2c -> 20000894:   006e0049
 8002d30 -> 20000898:   00650074
 8002d34 -> 2000089c:   006e0072
 8002d38 -> 200008a0:   006c0061
 8002d3c -> 200008a4:   00460020
 8002d40 -> 200008a8:   0061006c
 8002d44 -> 200008ac:   00680073
 8002d48 -> 200008b0:   00200020
 8002d4c -> 200008b4:   0030002f
 8002d50 -> 200008b8:   00300078
 8002d54 -> 200008bc:   00300038
 8002d58 -> 200008c0:   00300030
 8002d5c -> 200008c4:   00300030
 8002d60 -> 200008c8:   002f0030
 8002d64 -> 200008cc:   00360030
 8002d68 -> 200008d0:   0030002a
 8002d6c -> 200008d4:   00320030
 8002d70 -> 200008d8:   0061004b
 8002d74 -> 200008dc:   0031002c
 8002d78 -> 200008e0:   00320032
 8002d7c -> 200008e4:   0030002a
 8002d80 -> 200008e8:   00320030
 8002d84 -> 200008ec:   0067004b
 8002d88 -> 200008f0:   00310314
 8002d8c -> 200008f4:   0030002e
 8002d90 -> 200008f8:   0041002e
 8002d94 -> 200008fc:   0030002e
 8002d98 -> 20000900:   0030002e
 8002d9c -> 20000904:   00000000
 8002da0 -> 20000908:   00000000
 8002da4 -> 2000090c:   00000000
 8002da8 -> 20000910:   00000000
 8002dac -> 20000914:   00000000
 8002db0 -> 20000918:   00000000
 8002db4 -> 2000091c:   00000000
 8002db8 -> 20000920:   00000000
 8002dbc -> 20000924:   00000000
 8002dc0 -> 20000928:   00000000
 8002dc4 -> 2000092c:   00000000
 8002dc8 -> 20000930:   00000000
 8002dcc -> 20000934:   00000000
 8002dd0 -> 20000938:   00000000
 8002dd4 -> 2000093c:   00000000
 8002dd8 -> 20000940:   00000000
 8002ddc -> 20000944:   00000000
 8002de0 -> 20000948:   08003000    Flash
 8002de4 -> 2000094c:   00000000
 8002de8 -> 20000950:   20000a38    RAM (data)
 8002dec -> 20000954:   0000001b
 8002df0 -> 20000958:   00000000
 8002df4 -> 2000095c:   00000000
 8002df8 -> 20000960:   00000000
 8002dfc -> 20000964:   00000000
 8002e00 -> 20000968:   20000ae8    RAM (data)
 8002e04 -> 2000096c:   00000004
 8002e08 -> 20000970:   20000ac8    RAM (data)
 8002e0c -> 20000974:   0000000a
 8002e10 -> 20000978:   200009f8    RAM (data)
 8002e14 -> 2000097c:   0000001e
 8002e18 -> 20000980:   20000a18    RAM (data)
 8002e1c -> 20000984:   00000020
 8002e20 -> 20000988:   20000890    RAM (data)
 8002e24 -> 2000098c:   00000060
 8002e28 -> 20000990:   20000ab4    RAM (data)
 8002e2c -> 20000994:   00000014
 8002e30 -> 20000998:   200008f0    RAM (data)
 8002e34 -> 2000099c:   00000014
 8002e38 -> 200009a0:   080008fd    Flash
 8002e3c -> 200009a4:   08000921    Flash
 8002e40 -> 200009a8:   080009d9    Flash
 8002e44 -> 200009ac:   080009db    Flash
 8002e48 -> 200009b0:   08000a81    Flash
 8002e4c -> 200009b4:   08000af1    Flash
 8002e50 -> 200009b8:   08000be1    Flash
 8002e54 -> 200009bc:   08000ba1    Flash
 8002e58 -> 200009c0:   08000bad    Flash
 8002e5c -> 200009c4:   08000bb9    Flash
 8002e60 -> 200009c8:   08000bc5    Flash
 8002e64 -> 200009cc:   00000000
 8002e68 -> 200009d0:   00000040
 8002e6c -> 200009d4:   080008f9    Flash
 8002e70 -> 200009d8:   080009bd    Flash
 8002e74 -> 200009dc:   080008f9    Flash
 8002e78 -> 200009e0:   080008f9    Flash
 8002e7c -> 200009e4:   080008f9    Flash
 8002e80 -> 200009e8:   080008f9    Flash
 8002e84 -> 200009ec:   080008f9    Flash
 8002e88 -> 200009f0:   080008f9    Flash
 8002e8c -> 200009f4:   080009cb    Flash
 8002e90 -> 200009f8:   004d031e
 8002e94 -> 200009fc:   0038004e
 8002e98 -> 20000a00:   00300030
 8002e9c -> 20000a04:   004c0020
 8002ea0 -> 20000a08:   00760069
 8002ea4 -> 20000a0c:   00560065
 8002ea8 -> 20000a10:   00650069
 8002eac -> 20000a14:   00000077
 8002eb0 -> 20000a18:   00300320
 8002eb4 -> 20000a1c:   00300030
 8002eb8 -> 20000a20:   00300030
 8002ebc -> 20000a24:   00300030
 8002ec0 -> 20000a28:   00300030
 8002ec4 -> 20000a2c:   00300030
 8002ec8 -> 20000a30:   00300030
 8002ecc -> 20000a34:   00300030
 8002ed0 -> 20000a38:   001b0209
 8002ed4 -> 20000a3c:   80000101
 8002ed8 -> 20000a40:   00040932
 8002edc -> 20000a44:   01fe0000
 8002ee0 -> 20000a48:   21090402
 8002ee4 -> 20000a4c:   0000ff09
 8002ee8 -> 20000a50:   00011a04
 8002eec -> 20000a54:   080008f9    Flash
 8002ef0 -> 20000a58:   080008f9    Flash
 8002ef4 -> 20000a5c:   080008f9    Flash
 8002ef8 -> 20000a60:   080008f9    Flash
 8002efc -> 20000a64:   080008f9    Flash
 8002f00 -> 20000a68:   080008f9    Flash
 8002f04 -> 20000a6c:   080008f9    Flash
 8002f08 -> 20000a70:   080008f9    Flash
 8002f0c -> 20000a74:   080008f9    Flash
 8002f10 -> 20000a78:   080008f9    Flash
 8002f14 -> 20000a7c:   080008f9    Flash
 8002f18 -> 20000a80:   080008f9    Flash
 8002f1c -> 20000a84:   080008f9    Flash
 8002f20 -> 20000a88:   080008f9    Flash
 8002f24 -> 20000a8c:   00000000
 8002f28 -> 20000a90:   04030201
 8002f2c -> 20000a94:   04030201
 8002f30 -> 20000a98:   09080706
 8002f34 -> 20000a9c:   08060402
 8002f38 -> 20000aa0:   02000112
 8002f3c -> 20000aa4:   40000000    TIM2 timer
 8002f40 -> 20000aa8:   f0fa0fce
 8002f44 -> 20000aac:   02010000
 8002f48 -> 20000ab0:   00000103
 8002f4c -> 20000ab4:   00310314
 8002f50 -> 20000ab8:   00340032
 8002f54 -> 20000abc:   002d0033
 8002f58 -> 20000ac0:   00320031
 8002f5c -> 20000ac4:   00380038
 8002f60 -> 20000ac8:   0053030a
 8002f64 -> 20000acc:   004d0045
 8002f68 -> 20000ad0:   00000043
 8002f6c -> 20000ad4:   20000ae4    RAM (data)
 8002f70 -> 20000ad8:   00000004
 8002f74 -> 20000adc:   20000aa0    RAM (data)
 8002f78 -> 20000ae0:   00000012
 8002f7c -> 20000ae4:   0605c004
 8002f80 -> 20000ae8:   04090304
 8002f84 -> 20000aec:   00000101
 8002f88 -> 20000af0:   00000001

 8002f8c to 8002fff:    All 0xffffffff
